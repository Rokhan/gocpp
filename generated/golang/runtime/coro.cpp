// generated by GoCpp from file '$(ImportDir)/runtime/coro.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/coro.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/stubs.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using atomic::rec::CompareAndSwap;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    coro::operator T()
    {
        T result;
        result.gp = this->gp;
        result.f = this->f;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool coro::operator==(const T& ref) const
    {
        if (gp != ref.gp) return false;
        if (f != ref.f) return false;
        return true;
    }

    std::ostream& coro::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << gp;
        os << " " << f;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct coro& value)
    {
        return value.PrintTo(os);
    }

    struct coro* newcoro(std::function<void (coro*)> f)
    {
        auto c = new(coro);
        c->f = f;
        auto pc = getcallerpc();
        auto gp = getg();
        systemstack([=]() mutable -> void
        {
            auto start = corostart;
            auto startfv = *(funcval**)(unsafe::Pointer(& start));
            gp = newproc1(startfv, gp, pc);
        });
        gp->coroarg = c;
        gp->waitreason = waitReasonCoroutine;
        casgstatus(gp, _Grunnable, _Gwaiting);
        rec::set(gocpp::recv(c->gp), gp);
        return c;
    }

    void corostart()
    {
        auto gp = getg();
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        rec::f(gocpp::recv(c), c);
        coroexit(c);
    }

    void coroexit(struct coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        gp->coroexit = true;
        mcall(coroswitch_m);
    }

    void coroswitch(struct coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        mcall(coroswitch_m);
    }

    void coroswitch_m(struct g* gp)
    {
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        auto exit = gp->coroexit;
        gp->coroexit = false;
        auto mp = gp->m;
        if(exit)
        {
            gdestroy(gp);
            gp = nullptr;
        }
        else
        {
            gp->waitreason = waitReasonCoroutine;
            if(! rec::CompareAndSwap(gocpp::recv(gp->atomicstatus), _Grunning, _Gwaiting))
            {
                casgstatus(gp, _Grunning, _Gwaiting);
            }
            setMNoWB(& gp->m, nullptr);
        }
        g* gnext = {};
        for(; ; )
        {
            auto next = c->gp;
            if(rec::ptr(gocpp::recv(next)) == nullptr)
            {
                go_throw("coroswitch on exited coro");
            }
            runtime::guintptr self = {};
            rec::set(gocpp::recv(self), gp);
            if(rec::cas(gocpp::recv(c->gp), next, self))
            {
                gnext = rec::ptr(gocpp::recv(next));
                break;
            }
        }
        setGNoWB(& mp->curg, gnext);
        setMNoWB(& gnext->m, mp);
        if(! rec::CompareAndSwap(gocpp::recv(gnext->atomicstatus), _Gwaiting, _Grunning))
        {
            casgstatus(gnext, _Gwaiting, _Grunnable);
            casgstatus(gnext, _Grunnable, _Grunning);
        }
        gogo(& gnext->sched);
    }

}

