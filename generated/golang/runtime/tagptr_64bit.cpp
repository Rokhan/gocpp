// generated by GoCpp from file '$(ImportDir)/runtime/tagptr_64bit.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/tagptr_64bit.h"
#include "gocpp/support.h"

#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/internal/goos/zgoos_windows.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/tagptr.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    int addrBits = 48;
    int tagBits = 64 - addrBits + 3;
    int aixAddrBits = 57;
    int aixTagBits = 64 - aixAddrBits + 3;
    int riscv64AddrBits = 56;
    int riscv64TagBits = 64 - riscv64AddrBits + 3;
    int taggedPointerBits = (goos.IsAix * aixTagBits) + (goarch.IsRiscv64 * riscv64TagBits) + ((1 - goos.IsAix) * (1 - goarch.IsRiscv64) * tagBits);
    taggedPointer taggedPointerPack(unsafe::Pointer ptr, uintptr_t tag)
    {
        if(GOOS == "aix")
        {
            if(GOARCH != "ppc64")
            {
                go_throw("check this code for aix on non-ppc64");
            }
            return taggedPointer((uint64_t(uintptr(ptr)) << (64 - aixAddrBits)) | uint64_t(tag & ((1 << aixTagBits) - 1)));
        }
        if(GOARCH == "riscv64")
        {
            return taggedPointer((uint64_t(uintptr(ptr)) << (64 - riscv64AddrBits)) | uint64_t(tag & ((1 << riscv64TagBits) - 1)));
        }
        return taggedPointer((uint64_t(uintptr(ptr)) << (64 - addrBits)) | uint64_t(tag & ((1 << tagBits) - 1)));
    }

    unsafe::Pointer pointer(taggedPointer tp)
    {
        if(GOARCH == "amd64")
        {
            return Pointer(gocpp::recv(unsafe), uintptr((int64(tp) >> tagBits) << 3));
        }
        if(GOOS == "aix")
        {
            return Pointer(gocpp::recv(unsafe), uintptr(((tp >> aixTagBits) << 3) | (0xa << 56)));
        }
        if(GOARCH == "riscv64")
        {
            return Pointer(gocpp::recv(unsafe), uintptr((tp >> riscv64TagBits) << 3));
        }
        return Pointer(gocpp::recv(unsafe), uintptr((tp >> tagBits) << 3));
    }

    uintptr_t tag(taggedPointer tp)
    {
        return uintptr(tp & ((1 << taggedPointerBits) - 1));
    }

}

