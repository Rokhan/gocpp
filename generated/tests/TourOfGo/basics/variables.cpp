// generated by GoCpp from file 'tests/TourOfGo/basics/variables.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/variables.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    bool c;
    bool python;
    bool java;
    int ii = 3;
    int jj = 4;
    int kk = 5;
    std::function<void (void)> funcVar1 = []() mutable -> void
    {
        mocklib::Println("funcVar"s);
    };
    std::function<int (int)> funcVar2 = [](int i) mutable -> int
    {
        mocklib::Println("funcVar,"s, i);
        return 3;
    };
    std::function<std::tuple<int, std::string> (int)> funcVar3 = [](int i) mutable -> std::tuple<int, std::string>
    {
        mocklib::Println("funcVar,"s, i);
        return {3, "zz"s};
    };
    void main()
    {
        int i = {};
        mocklib::Println(i, c, python, java);
        mocklib::Println(ii, jj, kk);
        std::tie(ii, jj, kk) = std::tuple{6, 7, 8};
        mocklib::Println(ii, jj, kk);
        auto [ii, zz, kk] = std::tuple{9, 10, 11};
        mocklib::Println(ii, zz, kk);
        {
            auto [ii, zz, ll] = std::tuple{12, 13, 14};
            mocklib::Println(ii, zz, ll);
        }
        mocklib::Println(ii, zz, kk);
        if(true)
        {
            auto [ii, zz, ll] = std::tuple{15, 16, 17};
            mocklib::Println(ii, zz, ll);
        }
        mocklib::Println(ii, zz, kk);
        auto [go_do, go_while, go_template, go_class] = std::tuple{"do"s, "while"s, "template"s, "class"s};
        mocklib::Println(go_do, go_while, go_template, go_class);
        dummy_vars();
        funcVar1();
        ii = funcVar2(3);
        std::string s = {};
        std::tie(ii, s) = funcVar3(3);
        mocklib::Println(ii, s);
        withNamedResults();
        inlineAssign(99);
    }

    std::tuple<int, std::string> withNamedResults()
    {
        int i;
        std::string s;
        i = 3;
        s = "hello"s;
        {
            auto j = i;
            auto i = 10;
            auto k = i;
            auto s = "world"s;
            mocklib::Println("withNamedResults:"s, i, s, j, k);
        }
        mocklib::Println("withNamedResults:"s, i, s);
        return {i, s};
    }

    void inlineAssign(int i)
    {
        if(auto [i, ok1] = std::tuple{1, true}; ok1)
        {
            mocklib::Println("inlineAssign:"s, i);
        }
        mocklib::Println("inlineAssign:"s, i);
        if(auto [i, ok2] = std::tuple{2, true}; ok2)
        {
            mocklib::Println("inlineAssign:"s, i);
        }
        mocklib::Println("inlineAssign:"s, i);
        if(auto [i, ok2] = std::tuple{22, true}; ok2)
        {
            mocklib::Println("inlineAssign:"s, i);
        }
        {
            if(auto [i, ok1] = std::tuple{3, true}; ok1)
            {
                mocklib::Println("inlineAssign:"s, i);
            }
            mocklib::Println("inlineAssign:"s, i);
        }
        mocklib::Println("inlineAssign:"s, i);
        {
            auto i = 66;
            if(auto [i, ok1] = std::tuple{4, true}; ok1)
            {
                mocklib::Println("inlineAssign:"s, i);
            }
            mocklib::Println("inlineAssign:"s, i);
        }
        mocklib::Println("inlineAssign:"s, i);
    }

    void dummy_vars()
    {
        std::string go_do = "do"s;
        std::string go_while = "while"s;
        std::string go_template = "template"s;
        std::string go_class = "class"s;
        mocklib::Println(go_do, go_while, go_template, go_class);
    }

    void dummy_funcs()
    {
        go_do();
        go_while();
        go_template();
        go_class();
    }

    void go_do()
    {
    }

    void go_while()
    {
    }

    void go_template()
    {
    }

    void go_class()
    {
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
