// generated by GoCpp from file '$(ImportDir)/internal/poll/fd_poll_runtime.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd_poll_runtime.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/internal/poll/errno_windows.h"
#include "golang/internal/poll/fd.h"
#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::poll
{
    namespace rec
    {
        using namespace mocklib::rec;
        using sync::rec::Do;
        using time::rec::IsZero;
    }

    int64_t runtimeNano()
    /* convertBlockStmt, nil block */;

    void runtime_pollServerInit()
    /* convertBlockStmt, nil block */;

    std::tuple<uintptr_t, int> runtime_pollOpen(uintptr_t fd)
    /* convertBlockStmt, nil block */;

    void runtime_pollClose(uintptr_t ctx)
    /* convertBlockStmt, nil block */;

    int runtime_pollWait(uintptr_t ctx, int mode)
    /* convertBlockStmt, nil block */;

    void runtime_pollWaitCanceled(uintptr_t ctx, int mode)
    /* convertBlockStmt, nil block */;

    int runtime_pollReset(uintptr_t ctx, int mode)
    /* convertBlockStmt, nil block */;

    void runtime_pollSetDeadline(uintptr_t ctx, int64_t d, int mode)
    /* convertBlockStmt, nil block */;

    void runtime_pollUnblock(uintptr_t ctx)
    /* convertBlockStmt, nil block */;

    bool runtime_isPollServerDescriptor(uintptr_t fd)
    /* convertBlockStmt, nil block */;

    
    template<typename T> requires gocpp::GoStruct<T>
    pollDesc::operator T()
    {
        T result;
        result.runtimeCtx = this->runtimeCtx;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool pollDesc::operator==(const T& ref) const
    {
        if (runtimeCtx != ref.runtimeCtx) return false;
        return true;
    }

    std::ostream& pollDesc::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << runtimeCtx;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct pollDesc& value)
    {
        return value.PrintTo(os);
    }

    sync::Once serverInit;
    struct gocpp::error rec::init(struct pollDesc* pd, struct FD* fd)
    {
        rec::Do(gocpp::recv(serverInit), runtime_pollServerInit);
        auto [ctx, errno] = runtime_pollOpen(uintptr_t(fd->Sysfd));
        if(errno != 0)
        {
            return errnoErr(syscall::Errno(errno));
        }
        pd->runtimeCtx = ctx;
        return nullptr;
    }

    void rec::close(struct pollDesc* pd)
    {
        if(pd->runtimeCtx == 0)
        {
            return;
        }
        runtime_pollClose(pd->runtimeCtx);
        pd->runtimeCtx = 0;
    }

    void rec::evict(struct pollDesc* pd)
    {
        if(pd->runtimeCtx == 0)
        {
            return;
        }
        runtime_pollUnblock(pd->runtimeCtx);
    }

    struct gocpp::error rec::prepare(struct pollDesc* pd, int mode, bool isFile)
    {
        if(pd->runtimeCtx == 0)
        {
            return nullptr;
        }
        auto res = runtime_pollReset(pd->runtimeCtx, mode);
        return convertErr(res, isFile);
    }

    struct gocpp::error rec::prepareRead(struct pollDesc* pd, bool isFile)
    {
        return rec::prepare(gocpp::recv(pd), 'r', isFile);
    }

    struct gocpp::error rec::prepareWrite(struct pollDesc* pd, bool isFile)
    {
        return rec::prepare(gocpp::recv(pd), 'w', isFile);
    }

    struct gocpp::error rec::wait(struct pollDesc* pd, int mode, bool isFile)
    {
        if(pd->runtimeCtx == 0)
        {
            return errors::New("waiting for unsupported file type"s);
        }
        auto res = runtime_pollWait(pd->runtimeCtx, mode);
        return convertErr(res, isFile);
    }

    struct gocpp::error rec::waitRead(struct pollDesc* pd, bool isFile)
    {
        return rec::wait(gocpp::recv(pd), 'r', isFile);
    }

    struct gocpp::error rec::waitWrite(struct pollDesc* pd, bool isFile)
    {
        return rec::wait(gocpp::recv(pd), 'w', isFile);
    }

    void rec::waitCanceled(struct pollDesc* pd, int mode)
    {
        if(pd->runtimeCtx == 0)
        {
            return;
        }
        runtime_pollWaitCanceled(pd->runtimeCtx, mode);
    }

    bool rec::pollable(struct pollDesc* pd)
    {
        return pd->runtimeCtx != 0;
    }

    struct gocpp::error convertErr(int res, bool isFile)
    {
        //Go switch emulation
        {
            auto condition = res;
            int conditionId = -1;
            if(condition == pollNoError) { conditionId = 0; }
            else if(condition == pollErrClosing) { conditionId = 1; }
            else if(condition == pollErrTimeout) { conditionId = 2; }
            else if(condition == pollErrNotPollable) { conditionId = 3; }
            switch(conditionId)
            {
                case 0:
                    return nullptr;
                    break;
                case 1:
                    return errClosing(isFile);
                    break;
                case 2:
                    return ErrDeadlineExceeded;
                    break;
                case 3:
                    return ErrNotPollable;
                    break;
            }
        }
        println("unreachable: "s, res);
        gocpp::panic("unreachable"s);
    }

    struct gocpp::error rec::SetDeadline(struct FD* fd, mocklib::Date t)
    {
        return setDeadlineImpl(fd, t, 'r' + 'w');
    }

    struct gocpp::error rec::SetReadDeadline(struct FD* fd, mocklib::Date t)
    {
        return setDeadlineImpl(fd, t, 'r');
    }

    struct gocpp::error rec::SetWriteDeadline(struct FD* fd, mocklib::Date t)
    {
        return setDeadlineImpl(fd, t, 'w');
    }

    struct gocpp::error setDeadlineImpl(struct FD* fd, mocklib::Date t, int mode)
    {
        gocpp::Defer defer;
        try
        {
            int64_t d = {};
            if(! rec::IsZero(gocpp::recv(t)))
            {
                d = int64_t(time::Until(t));
                if(d == 0)
                {
                    d = - 1;
                }
            }
            if(auto err = rec::incref(gocpp::recv(fd)); err != nullptr)
            {
                return err;
            }
            defer.push_back([=]{ rec::decref(gocpp::recv(fd)); });
            if(fd->pd.runtimeCtx == 0)
            {
                return ErrNoDeadline;
            }
            runtime_pollSetDeadline(fd->pd.runtimeCtx, d, mode);
            return nullptr;
        }
        catch(gocpp::GoPanic& gp)
        {
            defer.handlePanic(gp);
        }
    }

    bool IsPollDescriptor(uintptr_t fd)
    {
        return runtime_isPollServerDescriptor(fd);
    }

}

