// generated by GoCpp from file '$(ImportDir)/runtime/trace2event.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2event.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2string.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    traceEv traceEvNone = 0;
    traceEv traceEvEventBatch = 1;
    traceEv traceEvStacks = 2;
    traceEv traceEvStack = 3;
    traceEv traceEvStrings = 4;
    traceEv traceEvString = 5;
    traceEv traceEvCPUSamples = 6;
    traceEv traceEvCPUSample = 7;
    traceEv traceEvFrequency = 8;
    traceEv traceEvProcsChange = 9;
    traceEv traceEvProcStart = 10;
    traceEv traceEvProcStop = 11;
    traceEv traceEvProcSteal = 12;
    traceEv traceEvProcStatus = 13;
    traceEv traceEvGoCreate = 14;
    traceEv traceEvGoCreateSyscall = 15;
    traceEv traceEvGoStart = 16;
    traceEv traceEvGoDestroy = 17;
    traceEv traceEvGoDestroySyscall = 18;
    traceEv traceEvGoStop = 19;
    traceEv traceEvGoBlock = 20;
    traceEv traceEvGoUnblock = 21;
    traceEv traceEvGoSyscallBegin = 22;
    traceEv traceEvGoSyscallEnd = 23;
    traceEv traceEvGoSyscallEndBlocked = 24;
    traceEv traceEvGoStatus = 25;
    traceEv traceEvSTWBegin = 26;
    traceEv traceEvSTWEnd = 27;
    traceEv traceEvGCActive = 28;
    traceEv traceEvGCBegin = 29;
    traceEv traceEvGCEnd = 30;
    traceEv traceEvGCSweepActive = 31;
    traceEv traceEvGCSweepBegin = 32;
    traceEv traceEvGCSweepEnd = 33;
    traceEv traceEvGCMarkAssistActive = 34;
    traceEv traceEvGCMarkAssistBegin = 35;
    traceEv traceEvGCMarkAssistEnd = 36;
    traceEv traceEvHeapAlloc = 37;
    traceEv traceEvHeapGoal = 38;
    traceEv traceEvGoLabel = 39;
    traceEv traceEvUserTaskBegin = 40;
    traceEv traceEvUserTaskEnd = 41;
    traceEv traceEvUserRegionBegin = 42;
    traceEv traceEvUserRegionEnd = 43;
    traceEv traceEvUserLog = 44;
    
    std::ostream& traceEventWriter::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << w;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct traceEventWriter& value)
    {
        return value.PrintTo(os);
    }

    traceEventWriter eventWriter(struct traceLocker tl, traceGoStatus goStatus, traceProcStatus procStatus)
    {
        auto w = writer(gocpp::recv(tl));
        if(auto pp = ptr(gocpp::recv(tl.mp->p)); pp != nullptr && ! statusWasTraced(gocpp::recv(pp->trace), tl.gen) && acquireStatus(gocpp::recv(pp->trace), tl.gen))
        {
            w = writeProcStatus(gocpp::recv(w), uint64_t(pp->id), procStatus, pp->trace.inSweep);
        }
        if(auto gp = tl.mp->curg; gp != nullptr && ! statusWasTraced(gocpp::recv(gp->trace), tl.gen) && acquireStatus(gocpp::recv(gp->trace), tl.gen))
        {
            w = writeGoStatus(gocpp::recv(w), uint64_t(gp->goid), int64(tl.mp->procid), goStatus, gp->inMarkAssist);
        }
        return traceEventWriter {w};
    }

    void commit(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args)
    {
        e = write(gocpp::recv(e), ev, args);
        end(gocpp::recv(e));
    }

    traceEventWriter write(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args)
    {
        e.w = event(gocpp::recv(e.w), ev, args);
        return e;
    }

    void end(struct traceEventWriter e)
    {
        end(gocpp::recv(e.w));
    }

    traceWriter event(struct traceWriter w, traceEv ev, gocpp::slice<traceArg> args)
    {
        std::tie(w, _) = ensure(gocpp::recv(w), 1 + (len(args) + 1) * traceBytesPerNumber);
        auto ts = traceClockNow();
        if(ts <= w.traceBuf->lastTime)
        {
            ts = w.traceBuf->lastTime + 1;
        }
        auto tsDiff = uint64_t(ts - w.traceBuf->lastTime);
        w.traceBuf->lastTime = ts;
        byte(gocpp::recv(w), byte(ev));
        varint(gocpp::recv(w), tsDiff);
        for(auto [_, arg] : args)
        {
            varint(gocpp::recv(w), uint64_t(arg));
        }
        return w;
    }

    traceArg stack(struct traceLocker tl, int skip)
    {
        return traceArg(traceStack(skip, tl.mp, tl.gen));
    }

    traceArg startPC(struct traceLocker tl, uintptr_t pc)
    {
        return traceArg(put(gocpp::recv(trace.stackTab[tl.gen % 2]), gocpp::slice<uintptr_t> {logicalStackSentinel, startPCForTrace(pc) + sys.PCQuantum}));
    }

    traceArg string(struct traceLocker tl, std::string s)
    {
        return traceArg(put(gocpp::recv(trace.stringTab[tl.gen % 2]), tl.gen, s));
    }

    traceArg uniqueString(struct traceLocker tl, std::string s)
    {
        return traceArg(emit(gocpp::recv(trace.stringTab[tl.gen % 2]), tl.gen, s));
    }

}

