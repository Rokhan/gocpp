// generated by GoCpp from file '$(ImportDir)/runtime/cgocall.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/cgocall.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/internal/goexperiment/exp_cgocheck2_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/atomic_pointer.h"
#include "golang/runtime/error.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/mbitmap.h"
#include "golang/runtime/mbitmap_allocheaders.h"
#include "golang/runtime/mfinal.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/print.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/race0.h"
#include "golang/runtime/runtime1.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/slice.h"
#include "golang/runtime/stack.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/type.h"
#include "golang/runtime/typekind.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    using cgoCallers = gocpp::array<uintptr_t, 32>;
    struct argset
    {
        unsafe::Pointer args;
        uintptr_t retval;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const argset& value);
    uintptr_t syscall_cgocaller(unsafe::Pointer fn, gocpp::slice<uintptr_t> args);
    template<typename... Args>
    uintptr_t syscall_cgocaller(unsafe::Pointer fn, Args... args)
    {
        return syscall_cgocaller(fn, gocpp::ToSlice<uintptr_t>(args...));
    }

    int32_t cgocall(unsafe::Pointer fn, unsafe::Pointer arg);
    void callbackUpdateSystemStack(m* mp, uintptr_t sp, bool signal);
    void cgocallbackg(unsafe::Pointer fn, unsafe::Pointer frame, uintptr_t ctxt);
    void cgocallbackg1(unsafe::Pointer fn, unsafe::Pointer frame, uintptr_t ctxt);
    void unwindm(bool* restore);
    void badcgocallback();
    void cgounimpl();
    void cgoCheckPointer(any ptr, any arg);
    extern std::string cgoCheckPointerFail;
    extern std::string cgoResultFail;
    void cgoCheckArg(_type* t, unsafe::Pointer p, bool indir, bool top, std::string msg);
    std::tuple<uintptr_t, uintptr_t> cgoCheckUnknownPointer(unsafe::Pointer p, std::string msg);
    bool cgoIsGoPointer(unsafe::Pointer p);
    bool cgoInRange(unsafe::Pointer p, uintptr_t start, uintptr_t end);
    void cgoCheckResult(any val);
}

