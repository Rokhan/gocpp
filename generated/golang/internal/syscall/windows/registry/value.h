// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/registry/value.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/registry/value.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/syscall/windows/registry/key.h"
#include "golang/syscall/syscall_windows.h"

namespace golang::registry
{
    extern syscall::Errno ErrShortBuffer;
    extern syscall::Errno ErrNotExist;
    extern gocpp::error ErrUnexpectedType;
    std::tuple<std::string, struct gocpp::error> ExpandString(std::string value);

    namespace rec
    {
        std::tuple<int, uint32_t, struct gocpp::error> GetValue(golang::registry::Key k, std::string name, gocpp::slice<unsigned char> buf);
        std::tuple<gocpp::slice<unsigned char>, uint32_t, struct gocpp::error> getValue(golang::registry::Key k, std::string name, gocpp::slice<unsigned char> buf);
        std::tuple<std::string, uint32_t, struct gocpp::error> GetStringValue(golang::registry::Key k, std::string name);
        std::tuple<std::string, struct gocpp::error> GetMUIStringValue(golang::registry::Key k, std::string name);
        std::tuple<gocpp::slice<std::string>, uint32_t, struct gocpp::error> GetStringsValue(golang::registry::Key k, std::string name);
        std::tuple<uint64_t, uint32_t, struct gocpp::error> GetIntegerValue(golang::registry::Key k, std::string name);
        std::tuple<gocpp::slice<unsigned char>, uint32_t, struct gocpp::error> GetBinaryValue(golang::registry::Key k, std::string name);
        struct gocpp::error setValue(golang::registry::Key k, std::string name, uint32_t valtype, gocpp::slice<unsigned char> data);
        struct gocpp::error SetDWordValue(golang::registry::Key k, std::string name, uint32_t value);
        struct gocpp::error SetQWordValue(golang::registry::Key k, std::string name, uint64_t value);
        struct gocpp::error setStringValue(golang::registry::Key k, std::string name, uint32_t valtype, std::string value);
        struct gocpp::error SetStringValue(golang::registry::Key k, std::string name, std::string value);
        struct gocpp::error SetExpandStringValue(golang::registry::Key k, std::string name, std::string value);
        struct gocpp::error SetStringsValue(golang::registry::Key k, std::string name, gocpp::slice<std::string> value);
        struct gocpp::error SetBinaryValue(golang::registry::Key k, std::string name, gocpp::slice<unsigned char> value);
        struct gocpp::error DeleteValue(golang::registry::Key k, std::string name);
        std::tuple<gocpp::slice<std::string>, struct gocpp::error> ReadValueNames(golang::registry::Key k);
    }
}

