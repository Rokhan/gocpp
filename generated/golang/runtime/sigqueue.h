// generated by GoCpp from file '$(ImportDir)/runtime/sigqueue.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/sigqueue.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/extern.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/sigqueue_note.h"  [Ignored, known errors]

namespace golang::runtime
{
    bool sigsend(uint32_t s);
    uint32_t signal_recv();
    void signalWaitUntilIdle();
    void signal_enable(uint32_t s);
    void signal_disable(uint32_t s);
    void signal_ignore(uint32_t s);
    void sigInitIgnored(uint32_t s);
    bool signal_ignored(uint32_t s);
}

