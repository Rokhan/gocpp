// generated by GoCpp from file '$(ImportDir)/runtime/internal/atomic/atomic_amd64.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "gocpp/support.h"


namespace golang::atomic
{
    uint32_t Load(uint32_t* ptr);
    unsafe::Pointer Loadp(unsafe::Pointer ptr);
    uint64_t Load64(uint64_t* ptr);
    uint32_t LoadAcq(uint32_t* ptr);
    uint64_t LoadAcq64(uint64_t* ptr);
    uintptr_t LoadAcquintptr(uintptr_t* ptr);
    uint32_t Xadd(uint32_t* ptr, int32_t delta);
    uint64_t Xadd64(uint64_t* ptr, int64_t delta);
    uintptr_t Xadduintptr(uintptr_t* ptr, uintptr_t delta);
    uint32_t Xchg(uint32_t* ptr, uint32_t go_new);
    uint64_t Xchg64(uint64_t* ptr, uint64_t go_new);
    uintptr_t Xchguintptr(uintptr_t* ptr, uintptr_t go_new);
    uint8_t Load8(uint8_t* ptr);
    void And8(uint8_t* ptr, uint8_t val);
    void Or8(uint8_t* ptr, uint8_t val);
    void And(uint32_t* ptr, uint32_t val);
    void Or(uint32_t* ptr, uint32_t val);
    uint32_t And32(uint32_t* ptr, uint32_t val);
    uint32_t Or32(uint32_t* ptr, uint32_t val);
    uint64_t And64(uint64_t* ptr, uint64_t val);
    uint64_t Or64(uint64_t* ptr, uint64_t val);
    uintptr_t Anduintptr(uintptr_t* ptr, uintptr_t val);
    uintptr_t Oruintptr(uintptr_t* ptr, uintptr_t val);
    bool Cas64(uint64_t* ptr, uint64_t old, uint64_t go_new);
    bool CasRel(uint32_t* ptr, uint32_t old, uint32_t go_new);
    void Store(uint32_t* ptr, uint32_t val);
    void Store8(uint8_t* ptr, uint8_t val);
    void Store64(uint64_t* ptr, uint64_t val);
    void StoreRel(uint32_t* ptr, uint32_t val);
    void StoreRel64(uint64_t* ptr, uint64_t val);
    void StoreReluintptr(uintptr_t* ptr, uintptr_t val);
    void StorepNoWB(unsafe::Pointer ptr, unsafe::Pointer val);

    namespace rec
    {
    }
}

