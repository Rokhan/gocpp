// generated by GoCpp from file '$(ImportDir)/runtime/runtime.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/runtime.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct ticksType
    {
        mutex lock;
        int64_t startTicks;
        int64_t startTime;
        atomic::Int64 val;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct ticksType& value);
    void init(struct ticksType* t);
    int64_t ticksPerSecond();
    gocpp::slice<std::string> syscall_runtime_envs();
    int syscall_Getpagesize();
    gocpp::slice<std::string> os_runtime_args();
    void syscall_Exit(int code);
    void godebug_setUpdate(std::function<void (std::string, std::string)> update);
    void godebug_setNewIncNonDefault(std::function<std::function<void ()> (std::string)> newIncNonDefault);
    struct godebugInc
    {
        std::string name;
        atomic::Pointer<std::function<void ()>> inc;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct godebugInc& value);
    void IncNonDefault(struct godebugInc* g);
    void godebugNotify(bool envChanged);
    void syscall_runtimeSetenv(std::string key, std::string value);
    void syscall_runtimeUnsetenv(std::string key);
    void writeErrStr(std::string s);
    gocpp::slice<uintptr_t> getAuxv();
}

