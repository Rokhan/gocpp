// generated by GoCpp from file '$(ImportDir)/sync/poolqueue.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/poolqueue.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"

namespace golang::sync
{
    struct eface
    {
        unsafe::Pointer typ;
        unsafe::Pointer val;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct eface& value);
    struct poolChain
    {
        poolChainElt* head;
        poolChainElt* tail;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct poolChain& value);
    void storePoolChainElt(struct poolChainElt** pp, struct poolChainElt* v);
    struct poolChainElt* loadPoolChainElt(struct poolChainElt** pp);
    struct poolDequeue
    {
        atomic::Uint64 headTail;
        gocpp::slice<eface> vals;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct poolDequeue& value);
    struct poolChainElt
    {
        poolDequeue poolDequeue;
        poolChainElt* next;
        poolChainElt* prev;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct poolChainElt& value);

    namespace rec
    {
        std::tuple<uint32_t, uint32_t> unpack(struct poolDequeue* d, uint64_t ptrs);
        uint64_t pack(struct poolDequeue* d, uint32_t head, uint32_t tail);
        bool pushHead(struct poolDequeue* d, go_any val);
        std::tuple<go_any, bool> popHead(struct poolDequeue* d);
        std::tuple<go_any, bool> popTail(struct poolDequeue* d);
        void pushHead(struct poolChain* c, go_any val);
        std::tuple<go_any, bool> popHead(struct poolChain* c);
        std::tuple<go_any, bool> popTail(struct poolChain* c);
    }
}

