// generated by GoCpp from file '$(ImportDir)/strings/strings.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strings/strings.fwd.h"
#include "gocpp/support.h"

#include "golang/unicode/letter.h"

namespace golang::strings
{
    gocpp::slice<std::string> explode(std::string s, int n);
    int Count(std::string s, std::string substr);
    bool Contains(std::string s, std::string substr);
    bool ContainsAny(std::string s, std::string chars);
    bool ContainsRune(std::string s, gocpp::rune r);
    bool ContainsFunc(std::string s, std::function<bool (gocpp::rune)> f);
    int LastIndex(std::string s, std::string substr);
    int IndexByte(std::string s, unsigned char c);
    int IndexRune(std::string s, gocpp::rune r);
    int IndexAny(std::string s, std::string chars);
    int LastIndexAny(std::string s, std::string chars);
    int LastIndexByte(std::string s, unsigned char c);
    gocpp::slice<std::string> genSplit(std::string s, std::string sep, int sepSave, int n);
    gocpp::slice<std::string> SplitN(std::string s, std::string sep, int n);
    gocpp::slice<std::string> SplitAfterN(std::string s, std::string sep, int n);
    gocpp::slice<std::string> Split(std::string s, std::string sep);
    gocpp::slice<std::string> SplitAfter(std::string s, std::string sep);
    extern gocpp::array<uint8_t, 256> asciiSpace;
    gocpp::slice<std::string> Fields(std::string s);
    gocpp::slice<std::string> FieldsFunc(std::string s, std::function<bool (gocpp::rune)> f);
    std::string Join(gocpp::slice<std::string> elems, std::string sep);
    bool HasPrefix(std::string s, std::string prefix);
    bool HasSuffix(std::string s, std::string suffix);
    std::string Map(std::function<gocpp::rune (gocpp::rune)> mapping, std::string s);
    std::string Repeat(std::string s, int count);
    std::string ToUpper(std::string s);
    std::string ToLower(std::string s);
    std::string ToTitle(std::string s);
    std::string ToUpperSpecial(unicode::SpecialCase c, std::string s);
    std::string ToLowerSpecial(unicode::SpecialCase c, std::string s);
    std::string ToTitleSpecial(unicode::SpecialCase c, std::string s);
    std::string ToValidUTF8(std::string s, std::string replacement);
    bool isSeparator(gocpp::rune r);
    std::string Title(std::string s);
    std::string TrimLeftFunc(std::string s, std::function<bool (gocpp::rune)> f);
    std::string TrimRightFunc(std::string s, std::function<bool (gocpp::rune)> f);
    std::string TrimFunc(std::string s, std::function<bool (gocpp::rune)> f);
    int IndexFunc(std::string s, std::function<bool (gocpp::rune)> f);
    int LastIndexFunc(std::string s, std::function<bool (gocpp::rune)> f);
    int indexFunc(std::string s, std::function<bool (gocpp::rune)> f, bool truth);
    int lastIndexFunc(std::string s, std::function<bool (gocpp::rune)> f, bool truth);
    std::tuple<strings::asciiSet, bool> makeASCIISet(std::string chars);
    std::string Trim(std::string s, std::string cutset);
    std::string TrimLeft(std::string s, std::string cutset);
    std::string trimLeftByte(std::string s, unsigned char c);
    std::string trimLeftASCII(std::string s, golang::strings::asciiSet* as);
    std::string trimLeftUnicode(std::string s, std::string cutset);
    std::string TrimRight(std::string s, std::string cutset);
    std::string trimRightByte(std::string s, unsigned char c);
    std::string trimRightASCII(std::string s, golang::strings::asciiSet* as);
    std::string trimRightUnicode(std::string s, std::string cutset);
    std::string TrimSpace(std::string s);
    std::string TrimPrefix(std::string s, std::string prefix);
    std::string TrimSuffix(std::string s, std::string suffix);
    std::string Replace(std::string s, std::string old, std::string go_new, int n);
    std::string ReplaceAll(std::string s, std::string old, std::string go_new);
    bool EqualFold(std::string s, std::string t);
    int Index(std::string s, std::string substr);
    std::tuple<std::string, std::string, bool> Cut(std::string s, std::string sep);
    std::tuple<std::string, bool> CutPrefix(std::string s, std::string prefix);
    std::tuple<std::string, bool> CutSuffix(std::string s, std::string suffix);

    namespace rec
    {
        bool contains(golang::strings::asciiSet* as, unsigned char c);
    }
}

