// generated by GoCpp from file '$(ImportDir)/encoding/binary/binary.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/encoding/binary/binary.fwd.h"
#include "gocpp/support.h"

#include "golang/encoding/binary/native_endian_little.h"
#include "golang/internal/abi/type.h"
#include "golang/io/io.h"
#include "golang/reflect/type.h"
// #include "golang/reflect/value.h"  [Ignored, known errors]
#include "golang/sync/atomic/type.h"
#include "golang/sync/map.h"
#include "golang/sync/mutex.h"

namespace golang::binary
{
    struct ByteOrder : gocpp::Interface
    {
        ByteOrder(){}
        ByteOrder(ByteOrder& i) = default;
        ByteOrder(const ByteOrder& i) = default;
        ByteOrder& operator=(ByteOrder& i) = default;
        ByteOrder& operator=(const ByteOrder& i) = default;

        template<typename T>
        ByteOrder(T& ref);

        template<typename T>
        ByteOrder(const T& ref);

        template<typename T>
        ByteOrder(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IByteOrder
        {
            virtual uint16_t vUint16(gocpp::slice<unsigned char>) = 0;
            virtual uint32_t vUint32(gocpp::slice<unsigned char>) = 0;
            virtual uint64_t vUint64(gocpp::slice<unsigned char>) = 0;
            virtual void vPutUint16(gocpp::slice<unsigned char>, uint16_t) = 0;
            virtual void vPutUint32(gocpp::slice<unsigned char>, uint32_t) = 0;
            virtual void vPutUint64(gocpp::slice<unsigned char>, uint64_t) = 0;
            virtual std::string vString() = 0;
        };

        template<typename T, typename StoreT>
        struct ByteOrderImpl : IByteOrder
        {
            explicit ByteOrderImpl(T* ptr)
            {
                value.reset(ptr);
            }

            uint16_t vUint16(gocpp::slice<unsigned char>) override;

            uint32_t vUint32(gocpp::slice<unsigned char>) override;

            uint64_t vUint64(gocpp::slice<unsigned char>) override;

            void vPutUint16(gocpp::slice<unsigned char>, uint16_t) override;

            void vPutUint32(gocpp::slice<unsigned char>, uint32_t) override;

            void vPutUint64(gocpp::slice<unsigned char>, uint64_t) override;

            std::string vString() override;

            StoreT value;
        };

        std::shared_ptr<IByteOrder> value;
    };

    uint16_t Uint16(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>);
    uint16_t Uint16(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>);

    uint32_t Uint32(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>);
    uint32_t Uint32(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>);

    uint64_t Uint64(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>);
    uint64_t Uint64(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>);

    void PutUint16(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>, uint16_t);
    void PutUint16(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>, uint16_t);

    void PutUint32(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>, uint32_t);
    void PutUint32(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>, uint32_t);

    void PutUint64(const gocpp::PtrRecv<ByteOrder, false>& self, gocpp::slice<unsigned char>, uint64_t);
    void PutUint64(const gocpp::ObjRecv<ByteOrder>& self, gocpp::slice<unsigned char>, uint64_t);

    std::string String(const gocpp::PtrRecv<ByteOrder, false>& self);
    std::string String(const gocpp::ObjRecv<ByteOrder>& self);

    std::ostream& operator<<(std::ostream& os, const struct ByteOrder& value);
    struct AppendByteOrder : gocpp::Interface
    {
        AppendByteOrder(){}
        AppendByteOrder(AppendByteOrder& i) = default;
        AppendByteOrder(const AppendByteOrder& i) = default;
        AppendByteOrder& operator=(AppendByteOrder& i) = default;
        AppendByteOrder& operator=(const AppendByteOrder& i) = default;

        template<typename T>
        AppendByteOrder(T& ref);

        template<typename T>
        AppendByteOrder(const T& ref);

        template<typename T>
        AppendByteOrder(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IAppendByteOrder
        {
            virtual gocpp::slice<unsigned char> vAppendUint16(gocpp::slice<unsigned char>, uint16_t) = 0;
            virtual gocpp::slice<unsigned char> vAppendUint32(gocpp::slice<unsigned char>, uint32_t) = 0;
            virtual gocpp::slice<unsigned char> vAppendUint64(gocpp::slice<unsigned char>, uint64_t) = 0;
            virtual std::string vString() = 0;
        };

        template<typename T, typename StoreT>
        struct AppendByteOrderImpl : IAppendByteOrder
        {
            explicit AppendByteOrderImpl(T* ptr)
            {
                value.reset(ptr);
            }

            gocpp::slice<unsigned char> vAppendUint16(gocpp::slice<unsigned char>, uint16_t) override;

            gocpp::slice<unsigned char> vAppendUint32(gocpp::slice<unsigned char>, uint32_t) override;

            gocpp::slice<unsigned char> vAppendUint64(gocpp::slice<unsigned char>, uint64_t) override;

            std::string vString() override;

            StoreT value;
        };

        std::shared_ptr<IAppendByteOrder> value;
    };

    gocpp::slice<unsigned char> AppendUint16(const gocpp::PtrRecv<AppendByteOrder, false>& self, gocpp::slice<unsigned char>, uint16_t);
    gocpp::slice<unsigned char> AppendUint16(const gocpp::ObjRecv<AppendByteOrder>& self, gocpp::slice<unsigned char>, uint16_t);

    gocpp::slice<unsigned char> AppendUint32(const gocpp::PtrRecv<AppendByteOrder, false>& self, gocpp::slice<unsigned char>, uint32_t);
    gocpp::slice<unsigned char> AppendUint32(const gocpp::ObjRecv<AppendByteOrder>& self, gocpp::slice<unsigned char>, uint32_t);

    gocpp::slice<unsigned char> AppendUint64(const gocpp::PtrRecv<AppendByteOrder, false>& self, gocpp::slice<unsigned char>, uint64_t);
    gocpp::slice<unsigned char> AppendUint64(const gocpp::ObjRecv<AppendByteOrder>& self, gocpp::slice<unsigned char>, uint64_t);

    std::string String(const gocpp::PtrRecv<AppendByteOrder, false>& self);
    std::string String(const gocpp::ObjRecv<AppendByteOrder>& self);

    std::ostream& operator<<(std::ostream& os, const struct AppendByteOrder& value);
    struct littleEndian
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct littleEndian& value);
    uint16_t Uint16(littleEndian, gocpp::slice<unsigned char> b);
    void PutUint16(littleEndian, gocpp::slice<unsigned char> b, uint16_t v);
    gocpp::slice<unsigned char> AppendUint16(littleEndian, gocpp::slice<unsigned char> b, uint16_t v);
    uint32_t Uint32(littleEndian, gocpp::slice<unsigned char> b);
    void PutUint32(littleEndian, gocpp::slice<unsigned char> b, uint32_t v);
    gocpp::slice<unsigned char> AppendUint32(littleEndian, gocpp::slice<unsigned char> b, uint32_t v);
    uint64_t Uint64(littleEndian, gocpp::slice<unsigned char> b);
    void PutUint64(littleEndian, gocpp::slice<unsigned char> b, uint64_t v);
    gocpp::slice<unsigned char> AppendUint64(littleEndian, gocpp::slice<unsigned char> b, uint64_t v);
    std::string String(littleEndian);
    std::string GoString(littleEndian);
    struct bigEndian
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct bigEndian& value);
    uint16_t Uint16(bigEndian, gocpp::slice<unsigned char> b);
    void PutUint16(bigEndian, gocpp::slice<unsigned char> b, uint16_t v);
    gocpp::slice<unsigned char> AppendUint16(bigEndian, gocpp::slice<unsigned char> b, uint16_t v);
    uint32_t Uint32(bigEndian, gocpp::slice<unsigned char> b);
    void PutUint32(bigEndian, gocpp::slice<unsigned char> b, uint32_t v);
    gocpp::slice<unsigned char> AppendUint32(bigEndian, gocpp::slice<unsigned char> b, uint32_t v);
    uint64_t Uint64(bigEndian, gocpp::slice<unsigned char> b);
    void PutUint64(bigEndian, gocpp::slice<unsigned char> b, uint64_t v);
    gocpp::slice<unsigned char> AppendUint64(bigEndian, gocpp::slice<unsigned char> b, uint64_t v);
    std::string String(bigEndian);
    std::string GoString(bigEndian);
    std::string String(nativeEndian);
    std::string GoString(nativeEndian);
    gocpp::error Read(io::Reader r, ByteOrder order, go_any data);
    gocpp::error Write(io::Writer w, ByteOrder order, go_any data);
    int Size(go_any v);
    int dataSize(reflect::Value v);
    int sizeof(reflect::Type t);
    struct coder
    {
        ByteOrder order;
        gocpp::slice<unsigned char> buf;
        int offset;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct coder& value);
    bool bool(struct decoder* d);
    void bool(struct encoder* e, bool x);
    uint8_t uint8(struct decoder* d);
    void uint8(struct encoder* e, uint8_t x);
    uint16_t uint16(struct decoder* d);
    void uint16(struct encoder* e, uint16_t x);
    uint32_t uint32(struct decoder* d);
    void uint32(struct encoder* e, uint32_t x);
    uint64_t uint64(struct decoder* d);
    void uint64(struct encoder* e, uint64_t x);
    int8_t int8(struct decoder* d);
    void int8(struct encoder* e, int8_t x);
    int16_t int16(struct decoder* d);
    void int16(struct encoder* e, int16_t x);
    int32_t int32(struct decoder* d);
    void int32(struct encoder* e, int32_t x);
    int64_t int64(struct decoder* d);
    void int64(struct encoder* e, int64_t x);
    void value(struct decoder* d, reflect::Value v);
    void value(struct encoder* e, reflect::Value v);
    void skip(struct decoder* d, reflect::Value v);
    void skip(struct encoder* e, reflect::Value v);
    int intDataSize(go_any data);
}

