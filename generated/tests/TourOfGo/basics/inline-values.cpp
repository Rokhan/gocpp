// generated by GoCpp from file 'tests/TourOfGo/basics/inline-values.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/inline-values.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    void main()
    {
        mocklib::Println(fetcher["https://golang.org/"s]->body);
        for(auto [gocpp_ignored, url] : fetcher["https://golang.org/"s]->urls)
        {
            mocklib::Println(" -> "s, url);
        }
        mocklib::Print("Small primes:"s);
        for(auto [gocpp_ignored, prime] : smallPrimes)
        {
            mocklib::Printf(" %v"s, prime);
        }
        mocklib::Println();
    }

    main::ints smallPrimes = main::ints {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
    // fakeFetcher is Fetcher that returns canned results.
    
    template<typename T> requires gocpp::GoStruct<T>
    fakeResult::operator T()
    {
        T result;
        result.body = this->body;
        result.urls = this->urls;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool fakeResult::operator==(const T& ref) const
    {
        if (body != ref.body) return false;
        if (urls != ref.urls) return false;
        return true;
    }

    std::ostream& fakeResult::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << body;
        os << " " << urls;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct fakeResult& value)
    {
        return value.PrintTo(os);
    }

    main::fakeFetcher fetcher = main::fakeFetcher {{ "https://golang.org/"s, new fakeResult {"The Go Programming Language"s, gocpp::slice<std::string> {"https://golang.org/pkg/"s, "https://golang.org/cmd/"s}} }, { "https://golang.org/pkg/"s, new fakeResult {"Packages"s, gocpp::slice<std::string> {"https://golang.org/"s, "https://golang.org/cmd/"s, "https://golang.org/pkg/fmt/"s, "https://golang.org/pkg/os/"s}} }, { "https://golang.org/pkg/fmt/"s, new fakeResult {"Package fmt"s, gocpp::slice<std::string> {"https://golang.org/"s, "https://golang.org/pkg/"s}} }, { "https://golang.org/pkg/os/"s, new fakeResult {"Package os"s, gocpp::slice<std::string> {"https://golang.org/"s, "https://golang.org/pkg/"s}} }};
}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
