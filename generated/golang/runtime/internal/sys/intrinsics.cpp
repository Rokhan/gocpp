// generated by GoCpp from file '$(ImportDir)/runtime/internal/sys/intrinsics.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/internal/sys/intrinsics.h"
#include "gocpp/support.h"

namespace golang::sys
{
    gocpp::array<unsigned char, 32> deBruijn32tab = gocpp::array<unsigned char, 32> {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
    int deBruijn32 = 0x077CB531;
    gocpp::array<unsigned char, 64> deBruijn64tab = gocpp::array<unsigned char, 64> {0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6};
    int deBruijn64 = 0x03f79d71b4ca8b09;
    std::string ntz8tab = "" + "\x08\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x06\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x07\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x06\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x05\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00" + "\x04\x00\x01\x00\x02\x00\x01\x00\x03\x00\x01\x00\x02\x00\x01\x00";
    int TrailingZeros32(uint32_t x)
    {
        if(x == 0)
        {
            return 32;
        }
        return int(deBruijn32tab[(x & - x) * deBruijn32 >> (32 - 5)]);
    }

    int TrailingZeros64(uint64_t x)
    {
        if(x == 0)
        {
            return 64;
        }
        return int(deBruijn64tab[(x & - x) * deBruijn64 >> (64 - 6)]);
    }

    int TrailingZeros8(uint8_t x)
    {
        return int(ntz8tab[x]);
    }

    std::string len8tab = "" + "\x00\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04" + "\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05" + "\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06" + "\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06" + "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07" + "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07" + "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07" + "\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08" + "\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08";
    int Len64(uint64_t x)
    {
        int n;
        if(x >= (1 << 32))
        {
            int n;
            x >>= 32;
            n = 32;
        }
        if(x >= (1 << 16))
        {
            int n;
            x >>= 16;
            n += 16;
        }
        if(x >= (1 << 8))
        {
            int n;
            x >>= 8;
            n += 8;
        }
        return n + int(len8tab[x]);
    }

    int m0 = 0x5555555555555555;
    int m1 = 0x3333333333333333;
    int m2 = 0x0f0f0f0f0f0f0f0f;
    int OnesCount64(uint64_t x)
    {
        auto m = (1 << 64) - 1;
        x = (x >> 1) & (m0 & m) + x & (m0 & m);
        x = (x >> 2) & (m1 & m) + x & (m1 & m);
        x = ((x >> 4) + x) & (m2 & m);
        x += x >> 8;
        x += x >> 16;
        x += x >> 32;
        return int(x) & ((1 << 7) - 1);
    }

    int LeadingZeros64(uint64_t x)
    {
        return 64 - Len64(x);
    }

    int LeadingZeros8(uint8_t x)
    {
        return 8 - Len8(x);
    }

    int Len8(uint8_t x)
    {
        return int(len8tab[x]);
    }

    uint64_t Bswap64(uint64_t x)
    {
        auto c8 = uint64_t(0x00ff00ff00ff00ff);
        auto a = (x >> 8) & c8;
        auto b = (x & c8) << 8;
        x = a | b;
        auto c16 = uint64_t(0x0000ffff0000ffff);
        a = (x >> 16) & c16;
        b = (x & c16) << 16;
        x = a | b;
        auto c32 = uint64_t(0x00000000ffffffff);
        a = (x >> 32) & c32;
        b = (x & c32) << 32;
        x = a | b;
        return x;
    }

    uint32_t Bswap32(uint32_t x)
    {
        auto c8 = uint32_t(0x00ff00ff);
        auto a = (x >> 8) & c8;
        auto b = (x & c8) << 8;
        x = a | b;
        auto c16 = uint32_t(0x0000ffff);
        a = (x >> 16) & c16;
        b = (x & c16) << 16;
        x = a | b;
        return x;
    }

    void Prefetch(uintptr_t addr)
    {
    }

    void PrefetchStreamed(uintptr_t addr)
    {
    }

}

