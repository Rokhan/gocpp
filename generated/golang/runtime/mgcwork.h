// generated by GoCpp from file '$(ImportDir)/runtime/mgcwork.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mgcwork.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/lock_sema.h"
#include "golang/runtime/mgc.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/mheap.h"
#include "golang/unsafe/unsafe.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
#include "golang/runtime/lfstack.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mgcpacer.h"

namespace golang::runtime
{
    extern int _WorkbufSize;
    extern int workbufAlloc;
    void init();
    struct gcWork
    {
        workbuf* wbuf1;
        workbuf* wbuf2;
        uint64_t bytesMarked;
        int64_t heapScanWork;
        bool flushedWork;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const gcWork& value);
    void init(gcWork* w);
    void put(gcWork* w, uintptr_t obj);
    bool putFast(gcWork* w, uintptr_t obj);
    void putBatch(gcWork* w, gocpp::slice<uintptr_t> obj);
    uintptr_t tryGet(gcWork* w);
    uintptr_t tryGetFast(gcWork* w);
    void dispose(gcWork* w);
    void balance(gcWork* w);
    bool empty(gcWork* w);
    struct workbufhdr
    {
        lfnode node;
        int nobj;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const workbufhdr& value);
    struct workbuf
    {
        sys::NotInHeap _;
        gocpp::array<uintptr_t, (_WorkbufSize - Sizeof(gocpp::recv(unsafe), workbufhdr {})) / goarch.PtrSize> obj;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const workbuf& value);
    void checknonempty(workbuf* b);
    void checkempty(workbuf* b);
    workbuf* getempty();
    void putempty(workbuf* b);
    void putfull(workbuf* b);
    workbuf* trygetfull();
    workbuf* handoff(workbuf* b);
    void prepareFreeWorkbufs();
    bool freeSomeWbufs(bool preemptible);
}

