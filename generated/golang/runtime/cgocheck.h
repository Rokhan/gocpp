// generated by GoCpp from file '$(ImportDir)/runtime/cgocheck.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/cgocheck.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
#include "golang/runtime/mbitmap_allocheaders.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/print.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/type.h"
#include "golang/runtime/typekind.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    extern std::string cgoWriteBarrierFail;
    void cgoCheckPtrWrite(unsafe::Pointer* dst, unsafe::Pointer src);
    void cgoCheckMemmove(_type* typ, unsafe::Pointer dst, unsafe::Pointer src);
    void cgoCheckMemmove2(_type* typ, unsafe::Pointer dst, unsafe::Pointer src, uintptr_t off, uintptr_t size);
    void cgoCheckSliceCopy(_type* typ, unsafe::Pointer dst, unsafe::Pointer src, int n);
    void cgoCheckTypedBlock(_type* typ, unsafe::Pointer src, uintptr_t off, uintptr_t size);
    void cgoCheckBits(unsafe::Pointer src, unsigned char* gcbits, uintptr_t off, uintptr_t size);
    void cgoCheckUsingType(_type* typ, unsafe::Pointer src, uintptr_t off, uintptr_t size);
}

