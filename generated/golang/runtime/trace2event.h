// generated by GoCpp from file '$(ImportDir)/runtime/trace2event.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2event.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct traceEventWriter
    {
        /* traceWriter w; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceEventWriter& value);

    namespace rec
    {
        struct traceEventWriter eventWriter(struct traceLocker tl, runtime::traceGoStatus goStatus, runtime::traceProcStatus procStatus);
        void commit(struct traceEventWriter e, runtime::traceEv ev, gocpp::slice<runtime::traceArg> args);
        
template<typename... Args>
        void commit(struct traceEventWriter e, runtime::traceEv ev, Args... args)
        {
            return commit(e, ev, gocpp::ToSlice<runtime::traceArg>(args...));
        }

        struct traceEventWriter write(struct traceEventWriter e, runtime::traceEv ev, gocpp::slice<runtime::traceArg> args);
        
template<typename... Args>
        struct traceEventWriter write(struct traceEventWriter e, runtime::traceEv ev, Args... args)
        {
            return write(e, ev, gocpp::ToSlice<runtime::traceArg>(args...));
        }

        void end(struct traceEventWriter e);
        struct traceWriter event(struct traceWriter w, runtime::traceEv ev, gocpp::slice<runtime::traceArg> args);
        
template<typename... Args>
        struct traceWriter event(struct traceWriter w, runtime::traceEv ev, Args... args)
        {
            return event(w, ev, gocpp::ToSlice<runtime::traceArg>(args...));
        }

        runtime::traceArg stack(struct traceLocker tl, int skip);
        runtime::traceArg startPC(struct traceLocker tl, uintptr_t pc);
        runtime::traceArg string(struct traceLocker tl, std::string s);
        runtime::traceArg uniqueString(struct traceLocker tl, std::string s);
    }
}

