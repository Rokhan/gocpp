// generated by GoCpp from file '$(ImportDir)/syscall/types_windows_amd64.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/types_windows_amd64.h"
#include "gocpp/support.h"

#include "golang/syscall/types_windows.h"

namespace golang::syscall
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    WSAData::operator T()
    {
        T result;
        result.Version = this->Version;
        result.HighVersion = this->HighVersion;
        result.MaxSockets = this->MaxSockets;
        result.MaxUdpDg = this->MaxUdpDg;
        result.VendorInfo = this->VendorInfo;
        result.Description = this->Description;
        result.SystemStatus = this->SystemStatus;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool WSAData::operator==(const T& ref) const
    {
        if (Version != ref.Version) return false;
        if (HighVersion != ref.HighVersion) return false;
        if (MaxSockets != ref.MaxSockets) return false;
        if (MaxUdpDg != ref.MaxUdpDg) return false;
        if (VendorInfo != ref.VendorInfo) return false;
        if (Description != ref.Description) return false;
        if (SystemStatus != ref.SystemStatus) return false;
        return true;
    }

    std::ostream& WSAData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Version;
        os << " " << HighVersion;
        os << " " << MaxSockets;
        os << " " << MaxUdpDg;
        os << " " << VendorInfo;
        os << " " << Description;
        os << " " << SystemStatus;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct WSAData& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Servent::operator T()
    {
        T result;
        result.Name = this->Name;
        result.Aliases = this->Aliases;
        result.Proto = this->Proto;
        result.Port = this->Port;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Servent::operator==(const T& ref) const
    {
        if (Name != ref.Name) return false;
        if (Aliases != ref.Aliases) return false;
        if (Proto != ref.Proto) return false;
        if (Port != ref.Port) return false;
        return true;
    }

    std::ostream& Servent::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Aliases;
        os << " " << Proto;
        os << " " << Port;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Servent& value)
    {
        return value.PrintTo(os);
    }

}

