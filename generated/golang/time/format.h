// generated by GoCpp from file '$(ImportDir)/time/format.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/time/format.fwd.h"
#include "gocpp/support.h"

#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::time
{
    extern std::string Layout;
    extern std::string ANSIC;
    extern std::string UnixDate;
    extern std::string RubyDate;
    extern std::string RFC822;
    extern std::string RFC822Z;
    extern std::string RFC850;
    extern std::string RFC1123;
    extern std::string RFC1123Z;
    extern std::string RFC3339;
    extern std::string RFC3339Nano;
    extern std::string Kitchen;
    extern std::string Stamp;
    extern std::string StampMilli;
    extern std::string StampMicro;
    extern std::string StampNano;
    extern std::string DateTime;
    extern std::string DateOnly;
    extern std::string TimeOnly;
    extern gocpp::array_base<int> std0x;
    bool startsWithLowerCase(std::string str);
    std::tuple<std::string, int, std::string> nextStdChunk(std::string layout);
    extern gocpp::slice<std::string> longDayNames;
    extern gocpp::slice<std::string> shortDayNames;
    extern gocpp::slice<std::string> shortMonthNames;
    extern gocpp::slice<std::string> longMonthNames;
    bool match(std::string s1, std::string s2);
    std::tuple<int, std::string, struct gocpp::error> lookup(gocpp::slice<std::string> tab, std::string val);
    gocpp::slice<unsigned char> appendInt(gocpp::slice<unsigned char> b, int x, int width);
    extern gocpp::error errAtoi;
    
template<typename bytes>
    std::tuple<int, struct gocpp::error> atoi(bytes s);
    int stdFracSecond(int code, int n, int c);
    int digitsLen(int std);
    unsigned char separator(int std);
    gocpp::slice<unsigned char> appendNano(gocpp::slice<unsigned char> b, int nanosec, int std);
    extern gocpp::error errBad;
    struct ParseError
    {
        std::string Layout;
        std::string Value;
        std::string LayoutElem;
        std::string ValueElem;
        std::string Message;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct ParseError& value);
    struct ParseError* newParseError(std::string layout, std::string value, std::string layoutElem, std::string valueElem, std::string message);
    std::string cloneString(std::string s);
    extern std::string lowerhex;
    std::string quote(std::string s);
    
template<typename bytes>
    bool isDigit(bytes s, int i);
    std::tuple<int, std::string, struct gocpp::error> getnum(std::string s, bool fixed);
    std::tuple<int, std::string, struct gocpp::error> getnum3(std::string s, bool fixed);
    std::string cutspace(std::string s);
    std::tuple<std::string, struct gocpp::error> skip(std::string value, std::string prefix);
    std::tuple<struct Time, struct gocpp::error> Parse(std::string layout, std::string value);
    std::tuple<struct Time, struct gocpp::error> ParseInLocation(std::string layout, std::string value, struct Location* loc);
    std::tuple<struct Time, struct gocpp::error> parse(std::string layout, std::string value, struct Location* defaultLocation, struct Location* local);
    std::tuple<int, bool> parseTimeZone(std::string value);
    int parseGMT(std::string value);
    int parseSignedOffset(std::string value);
    bool commaOrPeriod(unsigned char b);
    
template<typename bytes>
    std::tuple<int, std::string, struct gocpp::error> parseNanoseconds(bytes value, int nbytes);
    extern gocpp::error errLeadingInt;
    
template<typename bytes>
    std::tuple<uint64_t, bytes, struct gocpp::error> leadingInt(bytes s);
    std::tuple<uint64_t, double, std::string> leadingFraction(std::string s);
    extern gocpp::map<std::string, uint64_t> unitMap;
    std::tuple<time::Duration, struct gocpp::error> ParseDuration(std::string s);

    namespace rec
    {
        std::string String(struct Time t);
        std::string GoString(struct Time t);
        std::string Format(struct Time t, std::string layout);
        gocpp::slice<unsigned char> AppendFormat(struct Time t, gocpp::slice<unsigned char> b, std::string layout);
        gocpp::slice<unsigned char> appendFormat(struct Time t, gocpp::slice<unsigned char> b, std::string layout);
        std::string Error(struct ParseError* e);
    }
}

