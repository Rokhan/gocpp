// generated by GoCpp from file 'tests/TourOfGo/methods/interfaces-cast.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/methods/interfaces-cast.fwd.h"
#include "gocpp/support.h"


namespace golang::main
{
    void main();
    struct gocpp_id_0 : gocpp::Interface
    {
        using gocpp::Interface::operator==;
        using gocpp::Interface::operator!=;

        gocpp_id_0(){}
        gocpp_id_0(gocpp_id_0& i) = default;
        gocpp_id_0(const gocpp_id_0& i) = default;
        gocpp_id_0& operator=(gocpp_id_0& i) = default;
        gocpp_id_0& operator=(const gocpp_id_0& i) = default;

        template<typename T>
        gocpp_id_0(T& ref);

        template<typename T>
        gocpp_id_0(const T& ref);

        template<typename T>
        gocpp_id_0(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct Igocpp_id_0
        {
            virtual void vM() = 0;
        };

        template<typename T, typename StoreT>
        struct gocpp_id_0Impl : Igocpp_id_0
        {
            explicit gocpp_id_0Impl(T* ptr)
            {
                value.reset(ptr);
            }

            void vM() override;

            StoreT value;
        };

        std::shared_ptr<Igocpp_id_0> value;
    };

    namespace rec
    {
        void M(const gocpp::PtrRecv<struct gocpp_id_0, false>& self);
        void M(const gocpp::ObjRecv<struct gocpp_id_0>& self);
    }

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value);

    namespace rec
    {
    }
}

