// generated by GoCpp from file '$(ImportDir)/runtime/defs_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/defs_windows.h"
#include "gocpp/support.h"

#include "golang/runtime/defs_windows_amd64.h"

namespace golang::runtime
{
    
    std::ostream& systeminfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << anon0;
        os << " " << dwpagesize;
        os << " " << lpminimumapplicationaddress;
        os << " " << lpmaximumapplicationaddress;
        os << " " << dwactiveprocessormask;
        os << " " << dwnumberofprocessors;
        os << " " << dwprocessortype;
        os << " " << dwallocationgranularity;
        os << " " << wprocessorlevel;
        os << " " << wprocessorrevision;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct systeminfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& exceptionpointers::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << record;
        os << " " << context;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct exceptionpointers& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& exceptionrecord::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << exceptioncode;
        os << " " << exceptionflags;
        os << " " << exceptionrecord;
        os << " " << exceptionaddress;
        os << " " << numberparameters;
        os << " " << exceptioninformation;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct exceptionrecord& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& overlapped::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << internal;
        os << " " << internalhigh;
        os << " " << anon0;
        os << " " << hevent;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct overlapped& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& memoryBasicInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << baseAddress;
        os << " " << allocationBase;
        os << " " << allocationProtect;
        os << " " << regionSize;
        os << " " << state;
        os << " " << protect;
        os << " " << type_;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct memoryBasicInformation& value)
    {
        return value.PrintTo(os);
    }

}

