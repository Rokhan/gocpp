// generated by GoCpp from file '$(ImportDir)/sync/atomic/type.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/atomic/type.fwd.h"
#include "gocpp/support.h"


namespace golang::atomic
{
    struct Bool
    {
        /* noCopy _; [Known incomplete type] */
        uint32_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Bool& value);
    bool Load(struct Bool* x);
    void Store(struct Bool* x, bool val);
    bool Swap(struct Bool* x, bool go_new);
    bool CompareAndSwap(struct Bool* x, bool old, bool go_new);
    uint32_t b32(bool b);
    template<typename T> 
    struct Pointer
    {
        /* gocpp::array<T*, 0> _; [Known incomplete type] */
        /* noCopy _; [Known incomplete type] */
        unsafe::Pointer v;

        using isGoStruct = void;

        template<typename U> requires gocpp::GoStruct<U>
        operator U();

        template<typename U> requires gocpp::GoStruct<U>
        bool operator==(const U& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Pointer<T>& value);

    template<typename T>
    T* Load(struct Pointer<T>* x);

    template<typename T>
    void Store(struct Pointer<T>* x, T* val);

    template<typename T>
    T* Swap(struct Pointer<T>* x, T* go_new);

    template<typename T>
    bool CompareAndSwap(struct Pointer<T>* x, T* old, T* go_new);
    struct Int32
    {
        /* noCopy _; [Known incomplete type] */
        int32_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Int32& value);
    int32_t Load(struct Int32* x);
    void Store(struct Int32* x, int32_t val);
    int32_t Swap(struct Int32* x, int32_t go_new);
    bool CompareAndSwap(struct Int32* x, int32_t old, int32_t go_new);
    int32_t Add(struct Int32* x, int32_t delta);
    struct Int64
    {
        /* noCopy _; [Known incomplete type] */
        /* align64 _; [Known incomplete type] */
        int64_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Int64& value);
    int64_t Load(struct Int64* x);
    void Store(struct Int64* x, int64_t val);
    int64_t Swap(struct Int64* x, int64_t go_new);
    bool CompareAndSwap(struct Int64* x, int64_t old, int64_t go_new);
    int64_t Add(struct Int64* x, int64_t delta);
    struct Uint32
    {
        /* noCopy _; [Known incomplete type] */
        uint32_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Uint32& value);
    uint32_t Load(struct Uint32* x);
    void Store(struct Uint32* x, uint32_t val);
    uint32_t Swap(struct Uint32* x, uint32_t go_new);
    bool CompareAndSwap(struct Uint32* x, uint32_t old, uint32_t go_new);
    uint32_t Add(struct Uint32* x, uint32_t delta);
    struct Uint64
    {
        /* noCopy _; [Known incomplete type] */
        /* align64 _; [Known incomplete type] */
        uint64_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Uint64& value);
    uint64_t Load(struct Uint64* x);
    void Store(struct Uint64* x, uint64_t val);
    uint64_t Swap(struct Uint64* x, uint64_t go_new);
    bool CompareAndSwap(struct Uint64* x, uint64_t old, uint64_t go_new);
    uint64_t Add(struct Uint64* x, uint64_t delta);
    struct Uintptr
    {
        /* noCopy _; [Known incomplete type] */
        uintptr_t v;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Uintptr& value);
    uintptr_t Load(struct Uintptr* x);
    void Store(struct Uintptr* x, uintptr_t val);
    uintptr_t Swap(struct Uintptr* x, uintptr_t go_new);
    bool CompareAndSwap(struct Uintptr* x, uintptr_t old, uintptr_t go_new);
    uintptr_t Add(struct Uintptr* x, uintptr_t delta);
    struct noCopy
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct noCopy& value);
    void Lock(noCopy*);
    void Unlock(noCopy*);
    struct align64
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct align64& value);
}

