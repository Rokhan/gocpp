// generated by GoCpp from file '$(ImportDir)/sync/pool.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/pool.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/race/norace.h"  [Ignored, known errors]
#include "golang/runtime/debug.h"
// #include "golang/sync/atomic/doc.h"  [Ignored, known errors]
#include "golang/sync/cond.h"
#include "golang/sync/mutex.h"
#include "golang/sync/poolqueue.h"
#include "golang/unsafe/unsafe.h"

namespace golang::sync
{
    struct Pool
    {
        noCopy noCopy;
        unsafe::Pointer local;
        uintptr_t localSize;
        unsafe::Pointer victim;
        uintptr_t victimSize;
        std::function<any ()> New;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const Pool& value);
    struct poolLocalInternal
    {
        any private;
        poolChain shared;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const poolLocalInternal& value);
    struct poolLocal
    {
        gocpp::array<unsigned char, 128 - Sizeof(gocpp::recv(unsafe), poolLocalInternal {}) % 128> pad;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const poolLocal& value);
    uint32_t runtime_randn(uint32_t n);
    unsafe::Pointer poolRaceAddr(any x);
    void Put(Pool* p, any x);
    any Get(Pool* p);
    any getSlow(Pool* p, int pid);
    std::tuple<poolLocal*, int> pin(Pool* p);
    std::tuple<poolLocal*, int> pinSlow(Pool* p);
    void poolCleanup();
    void init();
    poolLocal* indexLocal(unsafe::Pointer l, int i);
    void runtime_registerPoolCleanup(std::function<void ()> cleanup);
    int runtime_procPin();
    void runtime_procUnpin();
    uintptr_t runtime_LoadAcquintptr(uintptr_t* ptr);
    uintptr_t runtime_StoreReluintptr(uintptr_t* ptr, uintptr_t val);
}

