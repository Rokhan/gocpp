// generated by GoCpp from file '$(ImportDir)/runtime/cgocall.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/cgocall.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct argset
    {
        unsafe::Pointer args;
        uintptr_t retval;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct argset& value);
    extern std::string cgoCheckPointerFail;
    extern std::string cgoResultFail;
    uintptr_t syscall_cgocaller(unsafe::Pointer fn, gocpp::slice<uintptr_t> args);
    
    template<typename... Args>
    uintptr_t syscall_cgocaller(unsafe::Pointer fn, Args... args)
    {
        return syscall_cgocaller(fn, gocpp::ToSlice<uintptr_t>(args...));
    }
    
    template<typename... Args>
    uintptr_t syscall_cgocaller(unsafe::Pointer fn, uintptr_t value, Args... args)
    {
        return syscall_cgocaller(fn, gocpp::ToSlice<uintptr_t>(value, args...));
    }
    int32_t cgocall(unsafe::Pointer fn, unsafe::Pointer arg);
    void callbackUpdateSystemStack(struct m* mp, uintptr_t sp, bool signal);
    void cgocallbackg(unsafe::Pointer fn, unsafe::Pointer frame, uintptr_t ctxt);
    void cgocallbackg1(unsafe::Pointer fn, unsafe::Pointer frame, uintptr_t ctxt);
    void unwindm(bool* restore);
    void badcgocallback();
    void cgounimpl();
    void cgoCheckPointer(go_any ptr, go_any arg);
    void cgoCheckArg(golang::runtime::_type* t, unsafe::Pointer p, bool indir, bool top, std::string msg);
    std::tuple<uintptr_t, uintptr_t> cgoCheckUnknownPointer(unsafe::Pointer p, std::string msg);
    bool cgoIsGoPointer(unsafe::Pointer p);
    bool cgoInRange(unsafe::Pointer p, uintptr_t start, uintptr_t end);
    void cgoCheckResult(go_any val);

    namespace rec
    {
    }
}

