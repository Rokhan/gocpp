// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/net_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/net_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::windows
{
    struct TCP_INITIAL_RTO_PARAMETERS
    {
        uint16_t Rtt;
        uint8_t MaxSynRetransmissions;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TCP_INITIAL_RTO_PARAMETERS& value);
    extern std::function<bool (void)> Support_TCP_INITIAL_RTO_NO_SYN_RETRANSMISSIONS;
    struct gocpp::error WSASendtoInet4(syscall::Handle s, syscall::WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, syscall::SockaddrInet4* to, syscall::Overlapped* overlapped, unsigned char* croutine);
    struct gocpp::error WSASendtoInet6(syscall::Handle s, syscall::WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, syscall::SockaddrInet6* to, syscall::Overlapped* overlapped, unsigned char* croutine);
    void rtlGetNtVersionNumbers(uint32_t* majorVersion, uint32_t* minorVersion, uint32_t* buildNumber);

    namespace rec
    {
    }
}

