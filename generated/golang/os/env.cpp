// generated by GoCpp from file '$(ImportDir)/os/env.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/env.h"
#include "gocpp/support.h"

#include "golang/internal/testlog/log.h"
#include "golang/os/error.h"
#include "golang/syscall/env_windows.h"

namespace golang::os
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    std::string Expand(std::string s, std::function<std::string (std::string)> mapping)
    {
        gocpp::slice<unsigned char> buf = {};
        auto i = 0;
        for(auto j = 0; j < len(s); j++)
        {
            if(s[j] == '$' && j + 1 < len(s))
            {
                if(buf == nullptr)
                {
                    buf = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 0, 2 * len(s));
                }
                buf = append(buf, s.make_slice(i, j));
                auto [name, w] = getShellName(s.make_slice(j + 1));
                if(name == ""s && w > 0)
                {
                }
                else
                if(name == ""s)
                {
                    buf = append(buf, s[j]);
                }
                else
                {
                    buf = append(buf, mapping(name));
                }
                j += w;
                i = j + 1;
            }
        }
        if(buf == nullptr)
        {
            return s;
        }
        return std::string(buf) + s.make_slice(i);
    }

    std::string ExpandEnv(std::string s)
    {
        return Expand(s, Getenv);
    }

    bool isShellSpecialVar(uint8_t c)
    {
        //Go switch emulation
        {
            auto condition = c;
            int conditionId = -1;
            if(condition == '*') { conditionId = 0; }
            else if(condition == '#') { conditionId = 1; }
            else if(condition == '$') { conditionId = 2; }
            else if(condition == '@') { conditionId = 3; }
            else if(condition == '!') { conditionId = 4; }
            else if(condition == '?') { conditionId = 5; }
            else if(condition == '-') { conditionId = 6; }
            else if(condition == '0') { conditionId = 7; }
            else if(condition == '1') { conditionId = 8; }
            else if(condition == '2') { conditionId = 9; }
            else if(condition == '3') { conditionId = 10; }
            else if(condition == '4') { conditionId = 11; }
            else if(condition == '5') { conditionId = 12; }
            else if(condition == '6') { conditionId = 13; }
            else if(condition == '7') { conditionId = 14; }
            else if(condition == '8') { conditionId = 15; }
            else if(condition == '9') { conditionId = 16; }
            switch(conditionId)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                    return true;
                    break;
            }
        }
        return false;
    }

    bool isAlphaNum(uint8_t c)
    {
        return c == '_' || '0' <= c && c <= '9' || 'a' <= c && c <= 'z' || 'A' <= c && c <= 'Z';
    }

    std::tuple<std::string, int> getShellName(std::string s)
    {
        //Go switch emulation
        {
            int conditionId = -1;
            if(s[0] == '{') { conditionId = 0; }
            else if(isShellSpecialVar(s[0])) { conditionId = 1; }
            switch(conditionId)
            {
                case 0:
                    if(len(s) > 2 && isShellSpecialVar(s[1]) && s[2] == '}')
                    {
                        return {s.make_slice(1, 2), 3};
                    }
                    for(auto i = 1; i < len(s); i++)
                    {
                        if(s[i] == '}')
                        {
                            if(i == 1)
                            {
                                return {""s, 2};
                            }
                            return {s.make_slice(1, i), i + 1};
                        }
                    }
                    return {""s, 1};
                    break;
                case 1:
                    return {s.make_slice(0, 1), 1};
                    break;
            }
        }
        int i = {};
        for(i = 0; i < len(s) && isAlphaNum(s[i]); i++)
        {
        }
        return {s.make_slice(0, i), i};
    }

    std::string Getenv(std::string key)
    {
        testlog::Getenv(key);
        auto [v, gocpp_id_1] = syscall::Getenv(key);
        return v;
    }

    std::tuple<std::string, bool> LookupEnv(std::string key)
    {
        testlog::Getenv(key);
        return syscall::Getenv(key);
    }

    struct gocpp::error Setenv(std::string key, std::string value)
    {
        auto err = syscall::Setenv(key, value);
        if(err != nullptr)
        {
            return NewSyscallError("setenv"s, err);
        }
        return nullptr;
    }

    struct gocpp::error Unsetenv(std::string key)
    {
        return syscall::Unsetenv(key);
    }

    void Clearenv()
    {
        syscall::Clearenv();
    }

    gocpp::slice<std::string> Environ()
    {
        return syscall::Environ();
    }

}

