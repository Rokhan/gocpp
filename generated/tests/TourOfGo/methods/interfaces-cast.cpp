// generated by GoCpp from file 'tests/TourOfGo/methods/interfaces-cast.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/methods/interfaces-cast.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"
#include "golang/unsafe/unsafe.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    
        template<typename T>
        gocpp_id_0::gocpp_id_0(T& ref)
        {
            value.reset(new gocpp_id_0Impl<T, std::unique_ptr<T>>(new T(ref)));
        }

        template<typename T>
        gocpp_id_0::gocpp_id_0(const T& ref)
        {
            value.reset(new gocpp_id_0Impl<T, std::unique_ptr<T>>(new T(ref)));
        }

        template<typename T>
        gocpp_id_0::gocpp_id_0(T* ptr)
        {
            value.reset(new gocpp_id_0Impl<T, gocpp::ptr<T>>(ptr));
        }

        std::ostream& gocpp_id_0::PrintTo(std::ostream& os) const
        {
            return os;
        }

        template<typename T, typename StoreT>
        void gocpp_id_0::gocpp_id_0Impl<T, StoreT>::vM()
        {
            return rec::M(gocpp::PtrRecv<T, false>(value.get()));
        }

        namespace rec
        {
            void M(const gocpp::PtrRecv<struct gocpp_id_0, false>& self)
            {
                return self.ptr->value->vM();
            }

            void M(const gocpp::ObjRecv<struct gocpp_id_0>& self)
            {
                return self.obj.value->vM();
            }
        }

        std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
        {
            return value.PrintTo(os);
        }


    void main()
    {
        // declarartion and cast extracted from reflect/value.go, line 1230
        go_any eface = {};
        unsafe::Pointer ptr = unsafe::Pointer(& eface);
        eface = *(go_any*)(ptr);
        mocklib::Println(eface);
        eface = (go_any)(*(gocpp_id_0*)(ptr));
        mocklib::Println(eface);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
