// generated by GoCpp from file '$(ImportDir)/sync/atomic/type.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/atomic/type.h"
#include "gocpp/support.h"

// #include "golang/sync/atomic/doc.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::atomic
{
    
    std::ostream& Bool::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Bool& value)
    {
        return value.PrintTo(os);
    }

    bool Load(struct Bool* x)
    {
        return LoadUint32(& x->v) != 0;
    }

    void Store(struct Bool* x, bool val)
    {
        StoreUint32(& x->v, b32(val));
    }

    bool Swap(struct Bool* x, bool go_new)
    {
        bool old;
        return SwapUint32(& x->v, b32(go_new)) != 0;
    }

    bool CompareAndSwap(struct Bool* x, bool old, bool go_new)
    {
        bool swapped;
        return CompareAndSwapUint32(& x->v, b32(old), b32(go_new));
    }

    uint32_t b32(bool b)
    {
        if(b)
        {
            return 1;
        }
        return 0;
    }

    Pointer<int>* gocpp_id_0 = new Pointer<int> {};
    
    template<typename T>
    std::ostream& Pointer<T>::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << _;
        os << " " << v;
        os << '}';
        return os;
    }

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Pointer<T>& value)
    {
        return value.PrintTo(os);
    }


    template<typename T>
    T* Load(struct Pointer<T>* x)
    {
        return (T*)(LoadPointer(& x->v));
    }


    template<typename T>
    void Store(struct Pointer<T>* x, T* val)
    {
        StorePointer(& x->v, unsafe::Pointer(val));
    }


    template<typename T>
    T* Swap(struct Pointer<T>* x, T* go_new)
    {
        T* old;
        return (T*)(SwapPointer(& x->v, unsafe::Pointer(go_new)));
    }


    template<typename T>
    bool CompareAndSwap(struct Pointer<T>* x, T* old, T* go_new)
    {
        bool swapped;
        return CompareAndSwapPointer(& x->v, unsafe::Pointer(old), unsafe::Pointer(go_new));
    }

    
    std::ostream& Int32::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Int32& value)
    {
        return value.PrintTo(os);
    }

    int32_t Load(struct Int32* x)
    {
        return LoadInt32(& x->v);
    }

    void Store(struct Int32* x, int32_t val)
    {
        StoreInt32(& x->v, val);
    }

    int32_t Swap(struct Int32* x, int32_t go_new)
    {
        int32_t old;
        return SwapInt32(& x->v, go_new);
    }

    bool CompareAndSwap(struct Int32* x, int32_t old, int32_t go_new)
    {
        bool swapped;
        return CompareAndSwapInt32(& x->v, old, go_new);
    }

    int32_t Add(struct Int32* x, int32_t delta)
    {
        int32_t go_new;
        return AddInt32(& x->v, delta);
    }

    
    std::ostream& Int64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Int64& value)
    {
        return value.PrintTo(os);
    }

    int64_t Load(struct Int64* x)
    {
        return LoadInt64(& x->v);
    }

    void Store(struct Int64* x, int64_t val)
    {
        StoreInt64(& x->v, val);
    }

    int64_t Swap(struct Int64* x, int64_t go_new)
    {
        int64_t old;
        return SwapInt64(& x->v, go_new);
    }

    bool CompareAndSwap(struct Int64* x, int64_t old, int64_t go_new)
    {
        bool swapped;
        return CompareAndSwapInt64(& x->v, old, go_new);
    }

    int64_t Add(struct Int64* x, int64_t delta)
    {
        int64_t go_new;
        return AddInt64(& x->v, delta);
    }

    
    std::ostream& Uint32::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uint32& value)
    {
        return value.PrintTo(os);
    }

    uint32_t Load(struct Uint32* x)
    {
        return LoadUint32(& x->v);
    }

    void Store(struct Uint32* x, uint32_t val)
    {
        StoreUint32(& x->v, val);
    }

    uint32_t Swap(struct Uint32* x, uint32_t go_new)
    {
        uint32_t old;
        return SwapUint32(& x->v, go_new);
    }

    bool CompareAndSwap(struct Uint32* x, uint32_t old, uint32_t go_new)
    {
        bool swapped;
        return CompareAndSwapUint32(& x->v, old, go_new);
    }

    uint32_t Add(struct Uint32* x, uint32_t delta)
    {
        uint32_t go_new;
        return AddUint32(& x->v, delta);
    }

    
    std::ostream& Uint64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uint64& value)
    {
        return value.PrintTo(os);
    }

    uint64_t Load(struct Uint64* x)
    {
        return LoadUint64(& x->v);
    }

    void Store(struct Uint64* x, uint64_t val)
    {
        StoreUint64(& x->v, val);
    }

    uint64_t Swap(struct Uint64* x, uint64_t go_new)
    {
        uint64_t old;
        return SwapUint64(& x->v, go_new);
    }

    bool CompareAndSwap(struct Uint64* x, uint64_t old, uint64_t go_new)
    {
        bool swapped;
        return CompareAndSwapUint64(& x->v, old, go_new);
    }

    uint64_t Add(struct Uint64* x, uint64_t delta)
    {
        uint64_t go_new;
        return AddUint64(& x->v, delta);
    }

    
    std::ostream& Uintptr::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << v;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uintptr& value)
    {
        return value.PrintTo(os);
    }

    uintptr_t Load(struct Uintptr* x)
    {
        return LoadUintptr(& x->v);
    }

    void Store(struct Uintptr* x, uintptr_t val)
    {
        StoreUintptr(& x->v, val);
    }

    uintptr_t Swap(struct Uintptr* x, uintptr_t go_new)
    {
        uintptr_t old;
        return SwapUintptr(& x->v, go_new);
    }

    bool CompareAndSwap(struct Uintptr* x, uintptr_t old, uintptr_t go_new)
    {
        bool swapped;
        return CompareAndSwapUintptr(& x->v, old, go_new);
    }

    uintptr_t Add(struct Uintptr* x, uintptr_t delta)
    {
        uintptr_t go_new;
        return AddUintptr(& x->v, delta);
    }

    
    std::ostream& noCopy::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct noCopy& value)
    {
        return value.PrintTo(os);
    }

    void Lock(noCopy*)
    {
    }

    void Unlock(noCopy*)
    {
    }

    
    std::ostream& align64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct align64& value)
    {
        return value.PrintTo(os);
    }

}

