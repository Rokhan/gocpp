// generated by GoCpp from file '$(ImportDir)/strings/builder.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strings/builder.h"
#include "gocpp/support.h"

#include "golang/internal/bytealg/bytealg.h"
#include "golang/unicode/utf8/utf8.h"
#include "golang/unsafe/unsafe.h"

namespace golang::strings
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // A Builder is used to efficiently build a string using [Builder.Write] methods.
    // It minimizes memory copying. The zero value is ready to use.
    // Do not copy a non-zero Builder.
    
    template<typename T> requires gocpp::GoStruct<T>
    Builder::operator T()
    {
        T result;
        result.addr = this->addr;
        result.buf = this->buf;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Builder::operator==(const T& ref) const
    {
        if (addr != ref.addr) return false;
        if (buf != ref.buf) return false;
        return true;
    }

    std::ostream& Builder::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << addr;
        os << " " << buf;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Builder& value)
    {
        return value.PrintTo(os);
    }

    // noescape hides a pointer from escape analysis. It is the identity function
    // but escape analysis doesn't think the output depends on the input.
    // noescape is inlined and currently compiles down to zero instructions.
    // USE CAREFULLY!
    // This was copied from the runtime; see issues 23382 and 7921.
    //
    //go:nosplit
    //go:nocheckptr
    unsafe::Pointer noescape(unsafe::Pointer p)
    {
        auto x = uintptr_t(p);
        return unsafe::Pointer(x ^ 0);
    }

    void rec::copyCheck(struct Builder* b)
    {
        if(b->addr == nullptr)
        {
            b->addr = (Builder*)(noescape(unsafe::Pointer(b)));
        }
        else
        if(b->addr != b)
        {
            gocpp::panic("strings: illegal use of non-zero Builder copied by value"s);
        }
    }

    // String returns the accumulated string.
    std::string rec::String(struct Builder* b)
    {
        return unsafe::String(unsafe::SliceData(b->buf), len(b->buf));
    }

    // Len returns the number of accumulated bytes; b.Len() == len(b.String()).
    int rec::Len(struct Builder* b)
    {
        return len(b->buf);
    }

    // Cap returns the capacity of the builder's underlying byte slice. It is the
    // total space allocated for the string being built and includes any bytes
    // already written.
    int rec::Cap(struct Builder* b)
    {
        return cap(b->buf);
    }

    // Reset resets the [Builder] to be empty.
    void rec::Reset(struct Builder* b)
    {
        b->addr = nullptr;
        b->buf = nullptr;
    }

    // grow copies the buffer to a new, larger buffer so that there are at least n
    // bytes of capacity beyond len(b.buf).
    void rec::grow(struct Builder* b, int n)
    {
        auto buf = bytealg::MakeNoZero(2 * cap(b->buf) + n).make_slice(0, len(b->buf));
        copy(buf, b->buf);
        b->buf = buf;
    }

    // Grow grows b's capacity, if necessary, to guarantee space for
    // another n bytes. After Grow(n), at least n bytes can be written to b
    // without another allocation. If n is negative, Grow panics.
    void rec::Grow(struct Builder* b, int n)
    {
        rec::copyCheck(gocpp::recv(b));
        if(n < 0)
        {
            gocpp::panic("strings.Builder.Grow: negative count"s);
        }
        if(cap(b->buf) - len(b->buf) < n)
        {
            rec::grow(gocpp::recv(b), n);
        }
    }

    // Write appends the contents of p to b's buffer.
    // Write always returns len(p), nil.
    std::tuple<int, struct gocpp::error> rec::Write(struct Builder* b, gocpp::slice<unsigned char> p)
    {
        rec::copyCheck(gocpp::recv(b));
        b->buf = append(b->buf, p);
        return {len(p), nullptr};
    }

    // WriteByte appends the byte c to b's buffer.
    // The returned error is always nil.
    struct gocpp::error rec::WriteByte(struct Builder* b, unsigned char c)
    {
        rec::copyCheck(gocpp::recv(b));
        b->buf = append(b->buf, c);
        return nullptr;
    }

    // WriteRune appends the UTF-8 encoding of Unicode code point r to b's buffer.
    // It returns the length of r and a nil error.
    std::tuple<int, struct gocpp::error> rec::WriteRune(struct Builder* b, gocpp::rune r)
    {
        rec::copyCheck(gocpp::recv(b));
        auto n = len(b->buf);
        b->buf = utf8::AppendRune(b->buf, r);
        return {len(b->buf) - n, nullptr};
    }

    // WriteString appends the contents of s to b's buffer.
    // It returns the length of s and a nil error.
    std::tuple<int, struct gocpp::error> rec::WriteString(struct Builder* b, std::string s)
    {
        rec::copyCheck(gocpp::recv(b));
        b->buf = append(b->buf, s);
        return {len(s), nullptr};
    }

}

