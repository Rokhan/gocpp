// generated by GoCpp from file '$(ImportDir)/runtime/trace2map.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2map.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/trace2region.h"  [Ignored, known errors]

namespace golang::runtime
{
    struct traceMap
    {
        mutex lock;
        atomic::Uint64 seq;
        traceRegionAlloc mem;
        gocpp::array<atomic::UnsafePointer, 1 << 13> tab;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceMap& value);
    struct traceMapNode
    {
        sys::NotInHeap _;
        atomic::UnsafePointer link;
        uintptr_t hash;
        uint64_t id;
        gocpp::slice<unsigned char> data;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceMapNode& value);
    traceMapNode* next(struct traceMapNode* n);
    uint64_t stealID(struct traceMap* tab);
    std::tuple<uint64_t, bool> put(struct traceMap* tab, unsafe::Pointer data, uintptr_t size);
    uint64_t find(struct traceMap* tab, unsafe::Pointer data, uintptr_t size, uintptr_t hash);
    traceMapNode* bucket(struct traceMap* tab, int part);
    traceMapNode* newTraceMapNode(struct traceMap* tab, unsafe::Pointer data, uintptr_t size, uintptr_t hash, uint64_t id);
    void reset(struct traceMap* tab);
}

