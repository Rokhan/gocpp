// generated by GoCpp from file '$(ImportDir)/syscall/types_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/types_windows.h"
#include "gocpp/support.h"

#include "golang/syscall/syscall_windows.h"

namespace golang::syscall
{
    gocpp::array_base<std::string> signals = gocpp::Init<gocpp::array_base<std::string>>([](gocpp::array_base<std::string>& x) { x.1 = "hangup"; x.2 = "interrupt"; x.3 = "quit"; x.4 = "illegal instruction"; x.5 = "trace/breakpoint trap"; x.6 = "aborted"; x.7 = "bus error"; x.8 = "floating point exception"; x.9 = "killed"; x.10 = "user defined signal 1"; x.11 = "segmentation fault"; x.12 = "user defined signal 2"; x.13 = "broken pipe"; x.14 = "alarm clock"; x.15 = "terminated"; });
    gocpp::slice<unsigned char> OID_PKIX_KP_SERVER_AUTH = gocpp::Tag<gocpp::slice<unsigned char>>()("1.3.6.1.5.5.7.3.1\x00");
    gocpp::slice<unsigned char> OID_SERVER_GATED_CRYPTO = gocpp::Tag<gocpp::slice<unsigned char>>()("1.3.6.1.4.1.311.10.3.3\x00");
    gocpp::slice<unsigned char> OID_SGC_NETSCAPE = gocpp::Tag<gocpp::slice<unsigned char>>()("2.16.840.1.113730.4.1\x00");
    struct gocpp_id_0
    {

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
    {
        return value.PrintTo(os);
    }


    
    std::ostream& Timeval::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Sec;
        os << " " << Usec;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Timeval& value)
    {
        return value.PrintTo(os);
    }

    int64_t Nanoseconds(struct Timeval* tv)
    {
        return (int64_t(tv->Sec) * 1e6 + int64_t(tv->Usec)) * 1e3;
    }

    Timeval NsecToTimeval(int64_t nsec)
    {
        Timeval tv;
        tv->Sec = int32_t(nsec / 1e9);
        tv->Usec = int32_t(nsec % 1e9 / 1e3);
        return tv;
    }

    
    std::ostream& SecurityAttributes::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Length;
        os << " " << SecurityDescriptor;
        os << " " << InheritHandle;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct SecurityAttributes& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Overlapped::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Internal;
        os << " " << InternalHigh;
        os << " " << Offset;
        os << " " << OffsetHigh;
        os << " " << HEvent;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Overlapped& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& FileNotifyInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << NextEntryOffset;
        os << " " << Action;
        os << " " << FileNameLength;
        os << " " << FileName;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct FileNotifyInformation& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Filetime::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << LowDateTime;
        os << " " << HighDateTime;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Filetime& value)
    {
        return value.PrintTo(os);
    }

    int64_t Nanoseconds(struct Filetime* ft)
    {
        auto nsec = (int64_t(ft->HighDateTime) << 32) + int64_t(ft->LowDateTime);
        nsec -= 116444736000000000;
        nsec *= 100;
        return nsec;
    }

    Filetime NsecToFiletime(int64_t nsec)
    {
        Filetime ft;
        nsec /= 100;
        nsec += 116444736000000000;
        ft->LowDateTime = uint32_t(nsec & 0xffffffff);
        ft->HighDateTime = uint32_t((nsec >> 32) & 0xffffffff);
        return ft;
    }

    
    std::ostream& Win32finddata::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << FileAttributes;
        os << " " << CreationTime;
        os << " " << LastAccessTime;
        os << " " << LastWriteTime;
        os << " " << FileSizeHigh;
        os << " " << FileSizeLow;
        os << " " << Reserved0;
        os << " " << Reserved1;
        os << " " << FileName;
        os << " " << AlternateFileName;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Win32finddata& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& win32finddata1::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << FileAttributes;
        os << " " << CreationTime;
        os << " " << LastAccessTime;
        os << " " << LastWriteTime;
        os << " " << FileSizeHigh;
        os << " " << FileSizeLow;
        os << " " << Reserved0;
        os << " " << Reserved1;
        os << " " << FileName;
        os << " " << AlternateFileName;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct win32finddata1& value)
    {
        return value.PrintTo(os);
    }

    void copyFindData(Win32finddata* dst, win32finddata1* src)
    {
        dst->FileAttributes = src->FileAttributes;
        dst->CreationTime = src->CreationTime;
        dst->LastAccessTime = src->LastAccessTime;
        dst->LastWriteTime = src->LastWriteTime;
        dst->FileSizeHigh = src->FileSizeHigh;
        dst->FileSizeLow = src->FileSizeLow;
        dst->Reserved0 = src->Reserved0;
        dst->Reserved1 = src->Reserved1;
        copy(dst->FileName.make_slice(0, ), src->FileName.make_slice(0, ));
        copy(dst->AlternateFileName.make_slice(0, ), src->AlternateFileName.make_slice(0, ));
    }

    
    std::ostream& ByHandleFileInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << FileAttributes;
        os << " " << CreationTime;
        os << " " << LastAccessTime;
        os << " " << LastWriteTime;
        os << " " << VolumeSerialNumber;
        os << " " << FileSizeHigh;
        os << " " << FileSizeLow;
        os << " " << NumberOfLinks;
        os << " " << FileIndexHigh;
        os << " " << FileIndexLow;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct ByHandleFileInformation& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Win32FileAttributeData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << FileAttributes;
        os << " " << CreationTime;
        os << " " << LastAccessTime;
        os << " " << LastWriteTime;
        os << " " << FileSizeHigh;
        os << " " << FileSizeLow;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Win32FileAttributeData& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& StartupInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Cb;
        os << " " << _;
        os << " " << Desktop;
        os << " " << Title;
        os << " " << X;
        os << " " << Y;
        os << " " << XSize;
        os << " " << YSize;
        os << " " << XCountChars;
        os << " " << YCountChars;
        os << " " << FillAttribute;
        os << " " << Flags;
        os << " " << ShowWindow;
        os << " " << _;
        os << " " << _;
        os << " " << StdInput;
        os << " " << StdOutput;
        os << " " << StdErr;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct StartupInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& _PROC_THREAD_ATTRIBUTE_LIST::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _PROC_THREAD_ATTRIBUTE_LIST& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& _STARTUPINFOEXW::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ProcThreadAttributeList;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _STARTUPINFOEXW& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& ProcessInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Process;
        os << " " << Thread;
        os << " " << ProcessId;
        os << " " << ThreadId;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct ProcessInformation& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& ProcessEntry32::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << Usage;
        os << " " << ProcessID;
        os << " " << DefaultHeapID;
        os << " " << ModuleID;
        os << " " << Threads;
        os << " " << ParentProcessID;
        os << " " << PriClassBase;
        os << " " << Flags;
        os << " " << ExeFile;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct ProcessEntry32& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Systemtime::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Year;
        os << " " << Month;
        os << " " << DayOfWeek;
        os << " " << Day;
        os << " " << Hour;
        os << " " << Minute;
        os << " " << Second;
        os << " " << Milliseconds;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Systemtime& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Timezoneinformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Bias;
        os << " " << StandardName;
        os << " " << StandardDate;
        os << " " << StandardBias;
        os << " " << DaylightName;
        os << " " << DaylightDate;
        os << " " << DaylightBias;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Timezoneinformation& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& WSABuf::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Len;
        os << " " << Buf;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct WSABuf& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Hostent::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Aliases;
        os << " " << AddrType;
        os << " " << Length;
        os << " " << AddrList;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Hostent& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& Protoent::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Aliases;
        os << " " << Proto;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Protoent& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& DNSSRVData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Target;
        os << " " << Priority;
        os << " " << Weight;
        os << " " << Port;
        os << " " << Pad;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DNSSRVData& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& DNSPTRData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Host;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DNSPTRData& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& DNSMXData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << NameExchange;
        os << " " << Preference;
        os << " " << Pad;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DNSMXData& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& DNSTXTData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << StringCount;
        os << " " << StringArray;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DNSTXTData& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& DNSRecord::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Next;
        os << " " << Name;
        os << " " << Type;
        os << " " << Length;
        os << " " << Dw;
        os << " " << Ttl;
        os << " " << Reserved;
        os << " " << Data;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DNSRecord& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& TransmitFileBuffers::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Head;
        os << " " << HeadLength;
        os << " " << Tail;
        os << " " << TailLength;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TransmitFileBuffers& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& InterfaceInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Flags;
        os << " " << Address;
        os << " " << BroadcastAddress;
        os << " " << Netmask;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct InterfaceInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& IpAddressString::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << String;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct IpAddressString& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& IpAddrString::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Next;
        os << " " << IpAddress;
        os << " " << IpMask;
        os << " " << Context;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct IpAddrString& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& IpAdapterInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Next;
        os << " " << ComboIndex;
        os << " " << AdapterName;
        os << " " << Description;
        os << " " << AddressLength;
        os << " " << Address;
        os << " " << Index;
        os << " " << Type;
        os << " " << DhcpEnabled;
        os << " " << CurrentIpAddress;
        os << " " << IpAddressList;
        os << " " << GatewayList;
        os << " " << DhcpServer;
        os << " " << HaveWins;
        os << " " << PrimaryWinsServer;
        os << " " << SecondaryWinsServer;
        os << " " << LeaseObtained;
        os << " " << LeaseExpires;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct IpAdapterInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& MibIfRow::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Index;
        os << " " << Type;
        os << " " << Mtu;
        os << " " << Speed;
        os << " " << PhysAddrLen;
        os << " " << PhysAddr;
        os << " " << AdminStatus;
        os << " " << OperStatus;
        os << " " << LastChange;
        os << " " << InOctets;
        os << " " << InUcastPkts;
        os << " " << InNUcastPkts;
        os << " " << InDiscards;
        os << " " << InErrors;
        os << " " << InUnknownProtos;
        os << " " << OutOctets;
        os << " " << OutUcastPkts;
        os << " " << OutNUcastPkts;
        os << " " << OutDiscards;
        os << " " << OutErrors;
        os << " " << OutQLen;
        os << " " << DescrLen;
        os << " " << Descr;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct MibIfRow& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertContext::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << EncodingType;
        os << " " << EncodedCert;
        os << " " << Length;
        os << " " << CertInfo;
        os << " " << Store;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertContext& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertChainContext::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << TrustStatus;
        os << " " << ChainCount;
        os << " " << Chains;
        os << " " << LowerQualityChainCount;
        os << " " << LowerQualityChains;
        os << " " << HasRevocationFreshnessTime;
        os << " " << RevocationFreshnessTime;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertChainContext& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertTrustListInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertTrustListInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertSimpleChain::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << TrustStatus;
        os << " " << NumElements;
        os << " " << Elements;
        os << " " << TrustListInfo;
        os << " " << HasRevocationFreshnessTime;
        os << " " << RevocationFreshnessTime;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertSimpleChain& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertChainElement::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << CertContext;
        os << " " << TrustStatus;
        os << " " << RevocationInfo;
        os << " " << IssuanceUsage;
        os << " " << ApplicationUsage;
        os << " " << ExtendedErrorInfo;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertChainElement& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertRevocationCrlInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertRevocationCrlInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertRevocationInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << RevocationResult;
        os << " " << RevocationOid;
        os << " " << OidSpecificInfo;
        os << " " << HasFreshnessTime;
        os << " " << FreshnessTime;
        os << " " << CrlInfo;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertRevocationInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertTrustStatus::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ErrorStatus;
        os << " " << InfoStatus;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertTrustStatus& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertUsageMatch::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Type;
        os << " " << Usage;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertUsageMatch& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertEnhKeyUsage::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Length;
        os << " " << UsageIdentifiers;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertEnhKeyUsage& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertChainPara::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << RequestedUsage;
        os << " " << RequstedIssuancePolicy;
        os << " " << URLRetrievalTimeout;
        os << " " << CheckRevocationFreshnessTime;
        os << " " << RevocationFreshnessTime;
        os << " " << CacheResync;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertChainPara& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertChainPolicyPara::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << Flags;
        os << " " << ExtraPolicyPara;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertChainPolicyPara& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& SSLExtraCertChainPolicyPara::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << AuthType;
        os << " " << Checks;
        os << " " << ServerName;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct SSLExtraCertChainPolicyPara& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& CertChainPolicyStatus::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Size;
        os << " " << Error;
        os << " " << ChainIndex;
        os << " " << ElementIndex;
        os << " " << ExtraPolicyStatus;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct CertChainPolicyStatus& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& AddrinfoW::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Flags;
        os << " " << Family;
        os << " " << Socktype;
        os << " " << Protocol;
        os << " " << Addrlen;
        os << " " << Canonname;
        os << " " << Addr;
        os << " " << Next;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct AddrinfoW& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& GUID::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Data1;
        os << " " << Data2;
        os << " " << Data3;
        os << " " << Data4;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct GUID& value)
    {
        return value.PrintTo(os);
    }

    GUID WSAID_CONNECTEX = GUID {0x25a207b9, 0xddf3, 0x4660, gocpp::array<unsigned char, 8> {0x8e, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e}};
    
    std::ostream& WSAProtocolInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ServiceFlags1;
        os << " " << ServiceFlags2;
        os << " " << ServiceFlags3;
        os << " " << ServiceFlags4;
        os << " " << ProviderFlags;
        os << " " << ProviderId;
        os << " " << CatalogEntryId;
        os << " " << ProtocolChain;
        os << " " << Version;
        os << " " << AddressFamily;
        os << " " << MaxSockAddr;
        os << " " << MinSockAddr;
        os << " " << SocketType;
        os << " " << Protocol;
        os << " " << ProtocolMaxOffset;
        os << " " << NetworkByteOrder;
        os << " " << SecurityScheme;
        os << " " << MessageSize;
        os << " " << ProviderReserved;
        os << " " << ProtocolName;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct WSAProtocolInfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& WSAProtocolChain::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ChainLen;
        os << " " << ChainEntries;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct WSAProtocolChain& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& TCPKeepalive::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << OnOff;
        os << " " << Time;
        os << " " << Interval;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TCPKeepalive& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& symbolicLinkReparseBuffer::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << SubstituteNameOffset;
        os << " " << SubstituteNameLength;
        os << " " << PrintNameOffset;
        os << " " << PrintNameLength;
        os << " " << Flags;
        os << " " << PathBuffer;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct symbolicLinkReparseBuffer& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& mountPointReparseBuffer::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << SubstituteNameOffset;
        os << " " << SubstituteNameLength;
        os << " " << PrintNameOffset;
        os << " " << PrintNameLength;
        os << " " << PathBuffer;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct mountPointReparseBuffer& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& reparseDataBuffer::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ReparseTag;
        os << " " << ReparseDataLength;
        os << " " << Reserved;
        os << " " << reparseBuffer;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct reparseDataBuffer& value)
    {
        return value.PrintTo(os);
    }

}

