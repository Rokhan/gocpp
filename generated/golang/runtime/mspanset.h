// generated by GoCpp from file '$(ImportDir)/runtime/mspanset.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mspanset.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lfstack.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mheap.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct spanSet
    {
        /* mutex spineLock; [Known incomplete type] */
        /* atomicSpanSetSpinePointer spine; [Known incomplete type] */
        atomic::Uintptr spineLen;
        uintptr_t spineCap;
        /* atomicHeadTailIndex index; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct spanSet& value);
    struct spanSetBlock
    {
        atomic::Uint32 popped;
        gocpp::array<atomicMSpanPointer, spanSetBlockEntries> spans;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct spanSetBlock& value);
    void push(struct spanSet* b, struct mspan* s);
    struct mspan* pop(struct spanSet* b);
    void reset(struct spanSet* b);
    struct atomicSpanSetSpinePointer
    {
        atomic::UnsafePointer a;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct atomicSpanSetSpinePointer& value);
    struct spanSetSpinePointer Load(struct atomicSpanSetSpinePointer* s);
    void StoreNoWB(struct atomicSpanSetSpinePointer* s, struct spanSetSpinePointer p);
    struct spanSetSpinePointer
    {
        unsafe::Pointer p;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct spanSetSpinePointer& value);
    atomic::Pointer<spanSetBlock>* lookup(struct spanSetSpinePointer s, uintptr_t idx);
    struct spanSetBlockAlloc
    {
        /* lfstack stack; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct spanSetBlockAlloc& value);
    struct spanSetBlock* alloc(struct spanSetBlockAlloc* p);
    void free(struct spanSetBlockAlloc* p, struct spanSetBlock* block);
    headTailIndex makeHeadTailIndex(uint32_t head, uint32_t tail);
    uint32_t head(headTailIndex h);
    uint32_t tail(headTailIndex h);
    std::tuple<uint32_t, uint32_t> split(headTailIndex h);
    struct atomicHeadTailIndex
    {
        atomic::Uint64 u;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct atomicHeadTailIndex& value);
    headTailIndex load(struct atomicHeadTailIndex* h);
    bool cas(struct atomicHeadTailIndex* h, headTailIndex old, headTailIndex go_new);
    headTailIndex incHead(struct atomicHeadTailIndex* h);
    headTailIndex decHead(struct atomicHeadTailIndex* h);
    headTailIndex incTail(struct atomicHeadTailIndex* h);
    void reset(struct atomicHeadTailIndex* h);
    struct atomicMSpanPointer
    {
        atomic::UnsafePointer p;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct atomicMSpanPointer& value);
    struct mspan* Load(struct atomicMSpanPointer* p);
    void StoreNoWB(struct atomicMSpanPointer* p, struct mspan* s);
}

