// generated by GoCpp from file '$(ImportDir)/runtime/chan.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/chan.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct hchan
    {
        unsigned int qcount;
        unsigned int dataqsiz;
        unsafe::Pointer buf;
        uint16_t elemsize;
        uint32_t closed;
        _type* elemtype;
        unsigned int sendx;
        unsigned int recvx;
        /* waitq recvq; [Known incomplete type] */
        /* waitq sendq; [Known incomplete type] */
        /* mutex lock; [Known incomplete type] */

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct hchan& value);
    struct waitq
    {
        /* sudog* first; [Known incomplete type] */
        /* sudog* last; [Known incomplete type] */

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct waitq& value);
    hchan* reflect_makechan(chantype* t, int size);
    hchan* makechan64(chantype* t, int64_t size);
    hchan* makechan(chantype* t, int size);
    unsafe::Pointer chanbuf(hchan* c, unsigned int i);
    bool full(hchan* c);
    void chansend1(hchan* c, unsafe::Pointer elem);
    bool chansend(hchan* c, unsafe::Pointer ep, bool block, uintptr_t callerpc);
    void send(hchan* c, sudog* sg, unsafe::Pointer ep, std::function<void ()> unlockf, int skip);
    void sendDirect(_type* t, sudog* sg, unsafe::Pointer src);
    void recvDirect(_type* t, sudog* sg, unsafe::Pointer dst);
    void closechan(hchan* c);
    bool empty(hchan* c);
    void chanrecv1(hchan* c, unsafe::Pointer elem);
    bool chanrecv2(hchan* c, unsafe::Pointer elem);
    std::tuple<bool, bool> chanrecv(hchan* c, unsafe::Pointer ep, bool block);
    void recv(hchan* c, sudog* sg, unsafe::Pointer ep, std::function<void ()> unlockf, int skip);
    bool chanparkcommit(g* gp, unsafe::Pointer chanLock);
    bool selectnbsend(hchan* c, unsafe::Pointer elem);
    std::tuple<bool, bool> selectnbrecv(unsafe::Pointer elem, hchan* c);
    bool reflect_chansend(hchan* c, unsafe::Pointer elem, bool nb);
    std::tuple<bool, bool> reflect_chanrecv(hchan* c, bool nb, unsafe::Pointer elem);
    int reflect_chanlen(hchan* c);
    int reflectlite_chanlen(hchan* c);
    int reflect_chancap(hchan* c);
    void reflect_chanclose(hchan* c);
    void enqueue(struct waitq* q, sudog* sgp);
    sudog* dequeue(struct waitq* q);
    unsafe::Pointer raceaddr(struct hchan* c);
    void racesync(hchan* c, sudog* sg);
    void racenotify(hchan* c, unsigned int idx, sudog* sg);
}

