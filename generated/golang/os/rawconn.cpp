// generated by GoCpp from file '$(ImportDir)/os/rawconn.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/rawconn.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_posix.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_posix.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/runtime/mfinal.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::os
{
    namespace rec
    {
        using namespace mocklib::rec;
        using poll::rec::RawControl;
        using poll::rec::RawRead;
        using poll::rec::RawWrite;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    rawConn::operator T()
    {
        T result;
        result.file = this->file;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool rawConn::operator==(const T& ref) const
    {
        if (file != ref.file) return false;
        return true;
    }

    std::ostream& rawConn::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << file;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct rawConn& value)
    {
        return value.PrintTo(os);
    }

    struct gocpp::error rec::Control(struct rawConn* c, std::function<void (uintptr_t)> f)
    {
        if(auto err = rec::checkValid(gocpp::recv(c->file), "SyscallConn.Control"s); err != nullptr)
        {
            return err;
        }
        auto err = rec::RawControl(gocpp::recv(c->file->pfd), f);
        runtime::KeepAlive(c->file);
        return err;
    }

    struct gocpp::error rec::Read(struct rawConn* c, std::function<bool (uintptr_t)> f)
    {
        if(auto err = rec::checkValid(gocpp::recv(c->file), "SyscallConn.Read"s); err != nullptr)
        {
            return err;
        }
        auto err = rec::RawRead(gocpp::recv(c->file->pfd), f);
        runtime::KeepAlive(c->file);
        return err;
    }

    struct gocpp::error rec::Write(struct rawConn* c, std::function<bool (uintptr_t)> f)
    {
        if(auto err = rec::checkValid(gocpp::recv(c->file), "SyscallConn.Write"s); err != nullptr)
        {
            return err;
        }
        auto err = rec::RawWrite(gocpp::recv(c->file->pfd), f);
        runtime::KeepAlive(c->file);
        return err;
    }

    std::tuple<struct rawConn*, struct gocpp::error> newRawConn(struct File* file)
    {
        return {gocpp::InitPtr<rawConn>([=](auto& x) {
            x.file = file;
        }), nullptr};
    }

}

