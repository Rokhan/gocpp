// generated by GoCpp from file '$(ImportDir)/fmt/errors.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/fmt/errors.fwd.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/fmt/print.h"
#include "golang/sort/sort.h"

namespace golang::fmt
{
    std::string Errorf(std::string format, gocpp::slice<any> a);
    template<typename... Args>
    std::string Errorf(std::string format, Args... a)
    {
        return Errorf(format, gocpp::ToSlice<any>(a...));
    }

    struct wrapError
    {
        std::string msg;
        std::string err;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const wrapError& value);
    std::string Error(wrapError* e);
    std::string Unwrap(wrapError* e);
    struct wrapErrors
    {
        std::string msg;
        gocpp::slice<std::string> errs;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const wrapErrors& value);
    std::string Error(wrapErrors* e);
    gocpp::slice<std::string> Unwrap(wrapErrors* e);
}

