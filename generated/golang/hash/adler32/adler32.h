// generated by GoCpp from file '$(ImportDir)/hash/adler32/adler32.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/adler32/adler32.fwd.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/hash/hash.h"

namespace golang::adler32
{
    extern int mod;
    extern int nmax;
    extern int Size;
    void Reset(digest* d);
    hash::Hash32 New();
    int Size(digest* d);
    int BlockSize(digest* d);
    extern std::string magic;
    extern int marshaledSize;
    std::tuple<gocpp::slice<unsigned char>, std::string> MarshalBinary(digest* d);
    std::string UnmarshalBinary(digest* d, gocpp::slice<unsigned char> b);
    gocpp::slice<unsigned char> appendUint32(gocpp::slice<unsigned char> b, uint32_t x);
    uint32_t readUint32(gocpp::slice<unsigned char> b);
    digest update(digest d, gocpp::slice<unsigned char> p);
    std::tuple<int, std::string> Write(digest* d, gocpp::slice<unsigned char> p);
    uint32_t Sum32(digest* d);
    gocpp::slice<unsigned char> Sum(digest* d, gocpp::slice<unsigned char> in);
    uint32_t Checksum(gocpp::slice<unsigned char> data);
}

