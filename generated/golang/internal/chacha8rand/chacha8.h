// generated by GoCpp from file '$(ImportDir)/internal/chacha8rand/chacha8.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/chacha8rand/chacha8.fwd.h"
#include "gocpp/support.h"

namespace golang::chacha8rand
{
    void block(gocpp::array<uint64_t, 4>* seed, gocpp::array<uint64_t, 32>* blocks, uint32_t counter);
    struct State
    {
        gocpp::array<uint64_t, 32> buf;
        gocpp::array<uint64_t, 4> seed;
        uint32_t i;
        uint32_t n;
        uint32_t c;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct State& value);
    std::tuple<uint64_t, bool> Next(struct State* s);
    void Init(struct State* s, gocpp::array<unsigned char, 32> seed);
    void Init64(struct State* s, gocpp::array<uint64_t, 4> seed);
    void Refill(struct State* s);
    void Reseed(struct State* s);
    gocpp::slice<unsigned char> Marshal(State* s);
    struct errUnmarshalChaCha8
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct errUnmarshalChaCha8& value);
    std::string Error(errUnmarshalChaCha8*);
    gocpp::error Unmarshal(State* s, gocpp::slice<unsigned char> data);
    uint64_t beUint64(gocpp::slice<unsigned char> b);
    void bePutUint64(gocpp::slice<unsigned char> b, uint64_t v);
    uint64_t leUint64(gocpp::slice<unsigned char> b);
    void lePutUint64(gocpp::slice<unsigned char> b, uint64_t v);
}

