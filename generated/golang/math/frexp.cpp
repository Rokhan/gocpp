// generated by GoCpp from file '$(ImportDir)/math/frexp.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/frexp.h"
#include "gocpp/support.h"

#include "golang/math/bits.h"
#include "golang/math/stubs.h"
#include "golang/math/unsafe.h"

namespace golang::math
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace math::rec;
    }

    std::tuple<double, int> Frexp(double f)
    {
        double frac;
        int exp;
        if(haveArchFrexp)
        {
            double frac;
            int exp;
            return archFrexp(f);
        }
        return frexp(f);
    }

    std::tuple<double, int> frexp(double f)
    {
        double frac;
        int exp;
        //Go switch emulation
        {
            int conditionId = -1;
            if(f == 0) { conditionId = 0; }
            else if(IsInf(f, 0) || IsNaN(f)) { conditionId = 1; }
            switch(conditionId)
            {
                double frac;
                int exp;
                case 0:
                    return {f, 0};
                    break;
                case 1:
                    return {f, 0};
                    break;
            }
        }
        std::tie(f, exp) = normalize(f);
        auto x = Float64bits(f);
        exp += int((x >> shift) & mask) - bias + 1;
        x &^= mask << shift;
        x |= (- 1 + bias) << shift;
        frac = Float64frombits(x);
        return {frac, exp};
    }

}

