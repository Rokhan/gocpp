// generated by GoCpp from file '$(ImportDir)/compress/flate/huffman_bit_writer.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/compress/flate/huffman_bit_writer.fwd.h"
#include "gocpp/support.h"

#include "golang/compress/flate/huffman_code.h"
#include "golang/compress/flate/token.h"
#include "golang/io/io.h"

namespace golang::flate
{
    extern gocpp::slice<int8_t> lengthExtraBits;
    extern gocpp::slice<uint32_t> lengthBase;
    extern gocpp::slice<int8_t> offsetExtraBits;
    extern gocpp::slice<uint32_t> offsetBase;
    extern gocpp::slice<uint32_t> codegenOrder;
    struct huffmanBitWriter
    {
        io::Writer writer;
        uint64_t bits;
        unsigned int nbits;
        gocpp::array<unsigned char, bufferSize> bytes;
        gocpp::array<int32_t, codegenCodeCount> codegenFreq;
        int nbytes;
        gocpp::slice<int32_t> literalFreq;
        gocpp::slice<int32_t> offsetFreq;
        gocpp::slice<uint8_t> codegen;
        huffmanEncoder* literalEncoding;
        huffmanEncoder* offsetEncoding;
        huffmanEncoder* codegenEncoding;
        gocpp::error err;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct huffmanBitWriter& value);
    struct huffmanBitWriter* newHuffmanBitWriter(io::Writer w);
    extern huffmanEncoder* huffOffset;
    void init();
    void histogram(gocpp::slice<unsigned char> b, gocpp::slice<int32_t> h);

    namespace rec
    {
        void reset(struct huffmanBitWriter* w, io::Writer writer);
        void flush(struct huffmanBitWriter* w);
        void write(struct huffmanBitWriter* w, gocpp::slice<unsigned char> b);
        void writeBits(struct huffmanBitWriter* w, int32_t b, unsigned int nb);
        void writeBytes(struct huffmanBitWriter* w, gocpp::slice<unsigned char> bytes);
        void generateCodegen(struct huffmanBitWriter* w, int numLiterals, int numOffsets, struct huffmanEncoder* litEnc, struct huffmanEncoder* offEnc);
        std::tuple<int, int> dynamicSize(struct huffmanBitWriter* w, struct huffmanEncoder* litEnc, struct huffmanEncoder* offEnc, int extraBits);
        int fixedSize(struct huffmanBitWriter* w, int extraBits);
        std::tuple<int, bool> storedSize(struct huffmanBitWriter* w, gocpp::slice<unsigned char> in);
        void writeCode(struct huffmanBitWriter* w, struct hcode c);
        void writeDynamicHeader(struct huffmanBitWriter* w, int numLiterals, int numOffsets, int numCodegens, bool isEof);
        void writeStoredHeader(struct huffmanBitWriter* w, int length, bool isEof);
        void writeFixedHeader(struct huffmanBitWriter* w, bool isEof);
        void writeBlock(struct huffmanBitWriter* w, gocpp::slice<golang::flate::token> tokens, bool eof, gocpp::slice<unsigned char> input);
        void writeBlockDynamic(struct huffmanBitWriter* w, gocpp::slice<golang::flate::token> tokens, bool eof, gocpp::slice<unsigned char> input);
        std::tuple<int, int> indexTokens(struct huffmanBitWriter* w, gocpp::slice<golang::flate::token> tokens);
        void writeTokens(struct huffmanBitWriter* w, gocpp::slice<golang::flate::token> tokens, gocpp::slice<hcode> leCodes, gocpp::slice<hcode> oeCodes);
        void writeBlockHuff(struct huffmanBitWriter* w, bool eof, gocpp::slice<unsigned char> input);
    }
}

