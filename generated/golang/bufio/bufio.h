// generated by GoCpp from file '$(ImportDir)/bufio/bufio.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/bufio/bufio.fwd.h"
#include "gocpp/support.h"

#include "golang/io/io.h"

namespace golang::bufio
{
    extern gocpp::error ErrInvalidUnreadByte;
    extern gocpp::error ErrInvalidUnreadRune;
    extern gocpp::error ErrBufferFull;
    extern gocpp::error ErrNegativeCount;
    struct Reader
    {
        gocpp::slice<unsigned char> buf;
        io::Reader rd;
        int r;
        int w;
        gocpp::error err;
        int lastByte;
        int lastRuneSize;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Reader& value);
    Reader* NewReaderSize(io::Reader rd, int size);
    Reader* NewReader(io::Reader rd);
    int Size(struct Reader* b);
    void Reset(struct Reader* b, io::Reader r);
    void reset(struct Reader* b, gocpp::slice<unsigned char> buf, io::Reader r);
    extern gocpp::error errNegativeRead;
    void fill(struct Reader* b);
    gocpp::error readErr(struct Reader* b);
    std::tuple<gocpp::slice<unsigned char>, gocpp::error> Peek(struct Reader* b, int n);
    std::tuple<int, gocpp::error> Discard(struct Reader* b, int n);
    std::tuple<int, gocpp::error> Read(struct Reader* b, gocpp::slice<unsigned char> p);
    std::tuple<unsigned char, gocpp::error> ReadByte(struct Reader* b);
    gocpp::error UnreadByte(struct Reader* b);
    std::tuple<gocpp::rune, int, gocpp::error> ReadRune(struct Reader* b);
    gocpp::error UnreadRune(struct Reader* b);
    int Buffered(struct Reader* b);
    std::tuple<gocpp::slice<unsigned char>, gocpp::error> ReadSlice(struct Reader* b, unsigned char delim);
    std::tuple<gocpp::slice<unsigned char>, bool, gocpp::error> ReadLine(struct Reader* b);
    std::tuple<gocpp::slice<gocpp::slice<unsigned char>>, gocpp::slice<unsigned char>, int, gocpp::error> collectFragments(struct Reader* b, unsigned char delim);
    std::tuple<gocpp::slice<unsigned char>, gocpp::error> ReadBytes(struct Reader* b, unsigned char delim);
    std::tuple<std::string, gocpp::error> ReadString(struct Reader* b, unsigned char delim);
    std::tuple<int64_t, gocpp::error> WriteTo(struct Reader* b, io::Writer w);
    extern gocpp::error errNegativeWrite;
    std::tuple<int64_t, gocpp::error> writeBuf(struct Reader* b, io::Writer w);
    struct Writer
    {
        gocpp::error err;
        gocpp::slice<unsigned char> buf;
        int n;
        io::Writer wr;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Writer& value);
    Writer* NewWriterSize(io::Writer w, int size);
    Writer* NewWriter(io::Writer w);
    int Size(struct Writer* b);
    void Reset(struct Writer* b, io::Writer w);
    gocpp::error Flush(struct Writer* b);
    int Available(struct Writer* b);
    gocpp::slice<unsigned char> AvailableBuffer(struct Writer* b);
    int Buffered(struct Writer* b);
    std::tuple<int, gocpp::error> Write(struct Writer* b, gocpp::slice<unsigned char> p);
    gocpp::error WriteByte(struct Writer* b, unsigned char c);
    std::tuple<int, gocpp::error> WriteRune(struct Writer* b, gocpp::rune r);
    std::tuple<int, gocpp::error> WriteString(struct Writer* b, std::string s);
    std::tuple<int64_t, gocpp::error> ReadFrom(struct Writer* b, io::Reader r);
    struct ReadWriter
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct ReadWriter& value);
    ReadWriter* NewReadWriter(Reader* r, Writer* w);
}

