// generated by GoCpp from file '$(ImportDir)/image/geom.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/geom.fwd.h"
#include "gocpp/support.h"

#include "golang/image/color/color.h"

namespace golang::image
{
    struct Point
    {
        int X;
        int Y;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Point& value);
    struct Point Pt(int X, int Y);
    struct Rectangle
    {
        Point Min;
        Point Max;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Rectangle& value);
    struct Rectangle Rect(int x0, int y0, int x1, int y1);
    int mul3NonNeg(int x, int y, int z);
    int add2NonNeg(int x, int y);

    namespace rec
    {
        std::string String(struct Point p);
        struct Point Add(struct Point p, struct Point q);
        struct Point Sub(struct Point p, struct Point q);
        struct Point Mul(struct Point p, int k);
        struct Point Div(struct Point p, int k);
        bool In(struct Point p, struct Rectangle r);
        struct Point Mod(struct Point p, struct Rectangle r);
        bool Eq(struct Point p, struct Point q);
        std::string String(struct Rectangle r);
        int Dx(struct Rectangle r);
        int Dy(struct Rectangle r);
        struct Point Size(struct Rectangle r);
        struct Rectangle Add(struct Rectangle r, struct Point p);
        struct Rectangle Sub(struct Rectangle r, struct Point p);
        struct Rectangle Inset(struct Rectangle r, int n);
        struct Rectangle Intersect(struct Rectangle r, struct Rectangle s);
        struct Rectangle Union(struct Rectangle r, struct Rectangle s);
        bool Empty(struct Rectangle r);
        bool Eq(struct Rectangle r, struct Rectangle s);
        bool Overlaps(struct Rectangle r, struct Rectangle s);
        bool In(struct Rectangle r, struct Rectangle s);
        struct Rectangle Canon(struct Rectangle r);
        color::Color At(struct Rectangle r, int x, int y);
        color::RGBA64 RGBA64At(struct Rectangle r, int x, int y);
        struct Rectangle Bounds(struct Rectangle r);
        color::Model ColorModel(struct Rectangle r);
    }
}

