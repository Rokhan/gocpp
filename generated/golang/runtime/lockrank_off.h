// generated by GoCpp from file '$(ImportDir)/runtime/lockrank_off.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/lockrank_off.fwd.h"
#include "gocpp/support.h"

// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct lockRankStruct
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct lockRankStruct& value);
    void lockInit(struct mutex* l, lockRank rank);
    lockRank getLockRank(struct mutex* l);
    void lockWithRank(struct mutex* l, lockRank rank);
    void acquireLockRank(lockRank rank);
    void unlockWithRank(struct mutex* l);
    void releaseLockRank(lockRank rank);
    void lockWithRankMayAcquire(struct mutex* l, lockRank rank);
    void assertLockHeld(struct mutex* l);
    void assertRankHeld(lockRank r);
    void worldStopped();
    void worldStarted();
    void assertWorldStopped();
    void assertWorldStoppedOrLockHeld(struct mutex* l);
}

