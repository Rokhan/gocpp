// generated by GoCpp from file '$(ImportDir)/runtime/lockrank_off.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/lockrank_off.h"
#include "gocpp/support.h"

// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    bool staticLockRanking = false;
    
    std::ostream& lockRankStruct::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const lockRankStruct& value)
    {
        return value.PrintTo(os);
    }

    void lockInit(mutex* l, lockRank rank)
    {
    }

    lockRank getLockRank(mutex* l)
    {
        return 0;
    }

    void lockWithRank(mutex* l, lockRank rank)
    {
        lock2(l);
    }

    void acquireLockRank(lockRank rank)
    {
    }

    void unlockWithRank(mutex* l)
    {
        unlock2(l);
    }

    void releaseLockRank(lockRank rank)
    {
    }

    void lockWithRankMayAcquire(mutex* l, lockRank rank)
    {
    }

    void assertLockHeld(mutex* l)
    {
    }

    void assertRankHeld(lockRank r)
    {
    }

    void worldStopped()
    {
    }

    void worldStarted()
    {
    }

    void assertWorldStopped()
    {
    }

    void assertWorldStoppedOrLockHeld(mutex* l)
    {
    }

}

