// generated by GoCpp from file '$(ImportDir)/slices/sort.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/slices/sort.h"
#include "gocpp/support.h"

#include "golang/cmp/cmp.h"
#include "golang/math/bits/bits.h"
#include "golang/slices/zsortanyfunc.h"
#include "golang/slices/zsortordered.h"

namespace golang::slices
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace bits::rec;
        using namespace cmp::rec;
        using namespace slices::rec;
    }


    template<typename S, typename E>
    void Sort(S x)
    {
        auto n = len(x);
        pdqsortOrdered(x, 0, n, bits::Len((unsigned int)(n)));
    }


    template<typename S, typename E>
    void SortFunc(S x, std::function<int (E a, E b)> cmp)
    {
        auto n = len(x);
        pdqsortCmpFunc(x, 0, n, bits::Len((unsigned int)(n)), cmp);
    }


    template<typename S, typename E>
    void SortStableFunc(S x, std::function<int (E a, E b)> cmp)
    {
        stableCmpFunc(x, len(x), cmp);
    }


    template<typename S, typename E>
    bool IsSorted(S x)
    {
        for(auto i = len(x) - 1; i > 0; i--)
        {
            if(cmp::Less(x[i], x[i - 1]))
            {
                return false;
            }
        }
        return true;
    }


    template<typename S, typename E>
    bool IsSortedFunc(S x, std::function<int (E a, E b)> cmp)
    {
        for(auto i = len(x) - 1; i > 0; i--)
        {
            if(cmp(x[i], x[i - 1]) < 0)
            {
                return false;
            }
        }
        return true;
    }


    template<typename S, typename E>
    E Min(S x)
    {
        if(len(x) < 1)
        {
            gocpp::panic("slices.Min: empty list");
        }
        auto m = x[0];
        for(auto i = 1; i < len(x); i++)
        {
            m = min(m, x[i]);
        }
        return m;
    }


    template<typename S, typename E>
    E MinFunc(S x, std::function<int (E a, E b)> cmp)
    {
        if(len(x) < 1)
        {
            gocpp::panic("slices.MinFunc: empty list");
        }
        auto m = x[0];
        for(auto i = 1; i < len(x); i++)
        {
            if(cmp(x[i], m) < 0)
            {
                m = x[i];
            }
        }
        return m;
    }


    template<typename S, typename E>
    E Max(S x)
    {
        if(len(x) < 1)
        {
            gocpp::panic("slices.Max: empty list");
        }
        auto m = x[0];
        for(auto i = 1; i < len(x); i++)
        {
            m = max(m, x[i]);
        }
        return m;
    }


    template<typename S, typename E>
    E MaxFunc(S x, std::function<int (E a, E b)> cmp)
    {
        if(len(x) < 1)
        {
            gocpp::panic("slices.MaxFunc: empty list");
        }
        auto m = x[0];
        for(auto i = 1; i < len(x); i++)
        {
            if(cmp(x[i], m) > 0)
            {
                m = x[i];
            }
        }
        return m;
    }


    template<typename S, typename E>
    std::tuple<int, bool> BinarySearch(S x, E target)
    {
        auto n = len(x);
        auto [i, j] = std::tuple{0, n};
        for(; i < j; )
        {
            auto h = int((unsigned int)(i + j) >> 1);
            if(cmp::Less(x[h], target))
            {
                i = h + 1;
            }
            else
            {
                j = h;
            }
        }
        return {i, i < n && (x[i] == target || (isNaN(x[i]) && isNaN(target)))};
    }


    template<typename S, typename T, typename E>
    std::tuple<int, bool> BinarySearchFunc(S x, T target, std::function<int (E, T)> cmp)
    {
        auto n = len(x);
        auto [i, j] = std::tuple{0, n};
        for(; i < j; )
        {
            auto h = int((unsigned int)(i + j) >> 1);
            if(cmp(x[h], target) < 0)
            {
                i = h + 1;
            }
            else
            {
                j = h;
            }
        }
        return {i, i < n && cmp(x[i], target) == 0};
    }

    // // hint for pdqsort when choosing the pivot
    uint64_t rec::Next(golang::slices::xorshift* r)
    {
        *r ^= *r << 13;
        *r ^= *r >> 17;
        *r ^= *r << 5;
        return uint64_t(*r);
    }

    unsigned int nextPowerOfTwo(int length)
    {
        return 1 << bits::Len((unsigned int)(length));
    }


    template<typename T>
    bool isNaN(T x)
    {
        return x != x;
    }

}

