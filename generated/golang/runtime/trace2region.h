// generated by GoCpp from file '$(ImportDir)/runtime/trace2region.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2region.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/malloc.h"

namespace golang::runtime
{
    struct traceRegionAlloc
    {
        traceRegionAllocBlock* head;
        uintptr_t off;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceRegionAlloc& value);
    struct traceRegionAllocBlock
    {
        sys::NotInHeap _1;
        traceRegionAllocBlock* next;
        gocpp::array<unsigned char, (64 << 10) - goarch::PtrSize> data;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceRegionAllocBlock& value);

    namespace rec
    {
        struct notInHeap* alloc(struct traceRegionAlloc* a, uintptr_t n);
        void drop(struct traceRegionAlloc* a);
    }
}

