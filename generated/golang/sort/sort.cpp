// generated by GoCpp from file '$(ImportDir)/sort/sort.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sort/sort.h"
#include "gocpp/support.h"

#include "golang/math/bits/bits.h"
#include "golang/sort/sort_impl_go121.h"
#include "golang/sort/zsortinterface.h"

namespace golang::sort
{
    
    template<typename T>
    Interface::Interface(T& ref)
    {
        value.reset(new InterfaceImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    Interface::Interface(const T& ref)
    {
        value.reset(new InterfaceImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    Interface::Interface(T* ptr)
    {
        value.reset(new InterfaceImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& Interface::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    int Interface::InterfaceImpl<T, StoreT>::vLen()
    {
        return Len(gocpp::PtrRecv<T, false>(value.get()));
    }
    template<typename T, typename StoreT>
    bool Interface::InterfaceImpl<T, StoreT>::vLess(int i, int j)
    {
        return Less(gocpp::PtrRecv<T, false>(value.get()));
    }
    template<typename T, typename StoreT>
    void Interface::InterfaceImpl<T, StoreT>::vSwap(int i, int j)
    {
        return Swap(gocpp::PtrRecv<T, false>(value.get()));
    }

    int Len(const gocpp::PtrRecv<Interface, false>& self)
    {
        return self.ptr->value->vLen();
    }

    int Len(const gocpp::ObjRecv<Interface>& self)
    {
        return self.obj.value->vLen();
    }

    bool Less(const gocpp::PtrRecv<Interface, false>& self, int i, int j)
    {
        return self.ptr->value->vLess(int i, int j);
    }

    bool Less(const gocpp::ObjRecv<Interface>& self, int i, int j)
    {
        return self.obj.value->vLess(int i, int j);
    }

    void Swap(const gocpp::PtrRecv<Interface, false>& self, int i, int j)
    {
        return self.ptr->value->vSwap(int i, int j);
    }

    void Swap(const gocpp::ObjRecv<Interface>& self, int i, int j)
    {
        return self.obj.value->vSwap(int i, int j);
    }

    std::ostream& operator<<(std::ostream& os, const struct Interface& value)
    {
        return value.PrintTo(os);
    }

    void Sort(Interface data)
    {
        auto n = Len(gocpp::recv(data));
        if(n <= 1)
        {
            return;
        }
        auto limit = Len(gocpp::recv(bits), (unsigned int)(n));
        pdqsort(data, 0, n, limit);
    }

    sortedHint unknownHint = 0;
    sort.sortedHint increasingHint = 1;
    sort.sortedHint decreasingHint = 2;
    uint64_t Next(xorshift* r)
    {
        *r ^= *r << 13;
        *r ^= *r >> 17;
        *r ^= *r << 5;
        return uint64_t(*r);
    }

    unsigned int nextPowerOfTwo(int length)
    {
        auto shift = (unsigned int)(Len(gocpp::recv(bits), (unsigned int)(length)));
        return (unsigned int)(1 << shift);
    }

    
    std::ostream& lessSwap::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Less;
        os << " " << Swap;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct lessSwap& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& reverse::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct reverse& value)
    {
        return value.PrintTo(os);
    }

    bool Less(struct reverse r, int i, int j)
    {
        return Less(gocpp::recv(r.Interface), j, i);
    }

    Interface Reverse(Interface data)
    {
        return new reverse {data};
    }

    bool IsSorted(Interface data)
    {
        auto n = Len(gocpp::recv(data));
        for(auto i = n - 1; i > 0; i--)
        {
            if(Less(gocpp::recv(data), i, i - 1))
            {
                return false;
            }
        }
        return true;
    }

    int Len(IntSlice x)
    {
        return len(x);
    }

    bool Less(IntSlice x, int i, int j)
    {
        return x[i] < x[j];
    }

    void Swap(IntSlice x, int i, int j)
    {
        std::tie(x[i], x[j]) = std::tuple{x[j], x[i]};
    }

    void Sort(IntSlice x)
    {
        Sort(x);
    }

    int Len(Float64Slice x)
    {
        return len(x);
    }

    bool Less(Float64Slice x, int i, int j)
    {
        return x[i] < x[j] || (isNaN(x[i]) && ! isNaN(x[j]));
    }

    void Swap(Float64Slice x, int i, int j)
    {
        std::tie(x[i], x[j]) = std::tuple{x[j], x[i]};
    }

    bool isNaN(double f)
    {
        return f != f;
    }

    void Sort(Float64Slice x)
    {
        Sort(x);
    }

    int Len(StringSlice x)
    {
        return len(x);
    }

    bool Less(StringSlice x, int i, int j)
    {
        return x[i] < x[j];
    }

    void Swap(StringSlice x, int i, int j)
    {
        std::tie(x[i], x[j]) = std::tuple{x[j], x[i]};
    }

    void Sort(StringSlice x)
    {
        Sort(x);
    }

    void Ints(gocpp::slice<int> x)
    {
        intsImpl(x);
    }

    void Float64s(gocpp::slice<double> x)
    {
        float64sImpl(x);
    }

    void Strings(gocpp::slice<std::string> x)
    {
        stringsImpl(x);
    }

    bool IntsAreSorted(gocpp::slice<int> x)
    {
        return intsAreSortedImpl(x);
    }

    bool Float64sAreSorted(gocpp::slice<double> x)
    {
        return float64sAreSortedImpl(x);
    }

    bool StringsAreSorted(gocpp::slice<std::string> x)
    {
        return stringsAreSortedImpl(x);
    }

    void Stable(Interface data)
    {
        stable(data, Len(gocpp::recv(data)));
    }

}

