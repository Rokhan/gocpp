// generated by GoCpp from file '$(ImportDir)/runtime/mranges.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mranges.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/print.h"
#include "golang/runtime/slice.h"
#include "golang/runtime/stack.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    struct addrRange
    {
        offAddr base;
        offAddr limit;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const addrRange& value);
    addrRange makeAddrRange(uintptr_t base, uintptr_t limit);
    uintptr_t size(addrRange a);
    bool contains(addrRange a, uintptr_t addr);
    addrRange subtract(addrRange a, addrRange b);
    std::tuple<uintptr_t, bool> takeFromFront(addrRange* a, uintptr_t len, uint8_t align);
    std::tuple<uintptr_t, bool> takeFromBack(addrRange* a, uintptr_t len, uint8_t align);
    addrRange removeGreaterEqual(addrRange a, uintptr_t addr);
    extern offAddr minOffAddr;
    extern offAddr maxOffAddr;
    struct offAddr
    {
        uintptr_t a;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const offAddr& value);
    offAddr add(offAddr l, uintptr_t bytes);
    offAddr sub(offAddr l, uintptr_t bytes);
    uintptr_t diff(offAddr l1, offAddr l2);
    bool lessThan(offAddr l1, offAddr l2);
    bool lessEqual(offAddr l1, offAddr l2);
    bool equal(offAddr l1, offAddr l2);
    uintptr_t addr(offAddr l);
    struct atomicOffAddr
    {
        atomic::Int64 a;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const atomicOffAddr& value);
    void Clear(atomicOffAddr* b);
    void StoreMin(atomicOffAddr* b, uintptr_t addr);
    void StoreUnmark(atomicOffAddr* b, uintptr_t markedAddr, uintptr_t newAddr);
    void StoreMarked(atomicOffAddr* b, uintptr_t addr);
    std::tuple<uintptr_t, bool> Load(atomicOffAddr* b);
    struct addrRanges
    {
        gocpp::slice<addrRange> ranges;
        uintptr_t totalBytes;
        sysMemStat* sysStat;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const addrRanges& value);
    void init(addrRanges* a, sysMemStat* sysStat);
    int findSucc(addrRanges* a, uintptr_t addr);
    std::tuple<uintptr_t, bool> findAddrGreaterEqual(addrRanges* a, uintptr_t addr);
    bool contains(addrRanges* a, uintptr_t addr);
    void add(addrRanges* a, addrRange r);
    addrRange removeLast(addrRanges* a, uintptr_t nBytes);
    void removeGreaterEqual(addrRanges* a, uintptr_t addr);
    void cloneInto(addrRanges* a, addrRanges* b);
}

