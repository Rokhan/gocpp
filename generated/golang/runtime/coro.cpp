// generated by GoCpp from file '$(ImportDir)/runtime/coro.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/coro.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/stubs.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using atomic::rec::CompareAndSwap;
    }

    // A coro represents extra concurrency without extra parallelism,
    // as would be needed for a coroutine implementation.
    // The coro does not represent a specific coroutine, only the ability
    // to do coroutine-style control transfers.
    // It can be thought of as like a special channel that always has
    // a goroutine blocked on it. If another goroutine calls coroswitch(c),
    // the caller becomes the goroutine blocked in c, and the goroutine
    // formerly blocked in c starts running.
    // These switches continue until a call to coroexit(c),
    // which ends the use of the coro by releasing the blocked
    // goroutine in c and exiting the current goroutine.
    //
    // Coros are heap allocated and garbage collected, so that user code
    // can hold a pointer to a coro without causing potential dangling
    // pointer errors.
    
    template<typename T> requires gocpp::GoStruct<T>
    coro::operator T()
    {
        T result;
        result.gp = this->gp;
        result.f = this->f;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool coro::operator==(const T& ref) const
    {
        if (gp != ref.gp) return false;
        if (f != ref.f) return false;
        return true;
    }

    std::ostream& coro::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << gp;
        os << " " << f;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct coro& value)
    {
        return value.PrintTo(os);
    }

    // newcoro creates a new coro containing a
    // goroutine blocked waiting to run f
    // and returns that coro.
    struct coro* newcoro(std::function<void (struct coro* _1)> f)
    {
        auto c = new(coro);
        c->f = f;
        auto pc = getcallerpc();
        auto gp = getg();
        systemstack([=]() mutable -> void
        {
            auto start = corostart;
            auto startfv = *(funcval**)(unsafe::Pointer(& start));
            gp = newproc1(startfv, gp, pc);
        });
        gp->coroarg = c;
        gp->waitreason = waitReasonCoroutine;
        casgstatus(gp, _Grunnable, _Gwaiting);
        rec::set(gocpp::recv(c->gp), gp);
        return c;
    }

    // corostart is the entry func for a new coroutine.
    // It runs the coroutine user function f passed to corostart
    // and then calls coroexit to remove the extra concurrency.
    void corostart()
    {
        auto gp = getg();
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        rec::f(gocpp::recv(c), c);
        coroexit(c);
    }

    // coroexit is like coroswitch but closes the coro
    // and exits the current goroutine
    void coroexit(struct coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        gp->coroexit = true;
        mcall(coroswitch_m);
    }

    // coroswitch switches to the goroutine blocked on c
    // and then blocks the current goroutine on c.
    void coroswitch(struct coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        mcall(coroswitch_m);
    }

    // coroswitch_m is the implementation of coroswitch
    // that runs on the m stack.
    //
    // Note: Coroutine switches are expected to happen at
    // an order of magnitude (or more) higher frequency
    // than regular goroutine switches, so this path is heavily
    // optimized to remove unnecessary work.
    // The fast path here is three CAS: the one at the top on gp.atomicstatus,
    // the one in the middle to choose the next g,
    // and the one at the bottom on gnext.atomicstatus.
    // It is important not to add more atomic operations or other
    // expensive operations to the fast path.
    void coroswitch_m(struct g* gp)
    {
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        auto exit = gp->coroexit;
        gp->coroexit = false;
        auto mp = gp->m;
        if(exit)
        {
            gdestroy(gp);
            gp = nullptr;
        }
        else
        {
            gp->waitreason = waitReasonCoroutine;
            if(! rec::CompareAndSwap(gocpp::recv(gp->atomicstatus), _Grunning, _Gwaiting))
            {
                casgstatus(gp, _Grunning, _Gwaiting);
            }
            setMNoWB(& gp->m, nullptr);
        }
        // The goroutine stored in c is the one to run next.
        // Swap it with ourselves.
        g* gnext = {};
        for(; ; )
        {
            auto next = c->gp;
            if(rec::ptr(gocpp::recv(next)) == nullptr)
            {
                go_throw("coroswitch on exited coro"s);
            }
            runtime::guintptr self = {};
            rec::set(gocpp::recv(self), gp);
            if(rec::cas(gocpp::recv(c->gp), next, self))
            {
                gnext = rec::ptr(gocpp::recv(next));
                break;
            }
        }
        setGNoWB(& mp->curg, gnext);
        setMNoWB(& gnext->m, mp);
        if(! rec::CompareAndSwap(gocpp::recv(gnext->atomicstatus), _Gwaiting, _Grunning))
        {
            casgstatus(gnext, _Gwaiting, _Grunnable);
            casgstatus(gnext, _Grunnable, _Grunning);
        }
        gogo(& gnext->sched);
    }

}

