// generated by GoCpp from file '$(ImportDir)/runtime/mgcwork.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mgcwork.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    void init();
    struct gcWork
    {
        workbuf* wbuf1;
        workbuf* wbuf2;
        uint64_t bytesMarked;
        int64_t heapScanWork;
        bool flushedWork;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct gcWork& value);
    void init(struct gcWork* w);
    void put(struct gcWork* w, uintptr_t obj);
    bool putFast(struct gcWork* w, uintptr_t obj);
    void putBatch(struct gcWork* w, gocpp::slice<uintptr_t> obj);
    uintptr_t tryGet(struct gcWork* w);
    uintptr_t tryGetFast(struct gcWork* w);
    void dispose(struct gcWork* w);
    void balance(struct gcWork* w);
    bool empty(struct gcWork* w);
    struct workbufhdr
    {
        lfnode node;
        int nobj;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct workbufhdr& value);
    struct workbuf
    {
        sys::NotInHeap _;
        /* gocpp::array<uintptr_t, (_WorkbufSize - gocpp::Sizeof<workbufhdr>()) / goarch::PtrSize> obj; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct workbuf& value);
    void checknonempty(struct workbuf* b);
    void checkempty(struct workbuf* b);
    workbuf* getempty();
    void putempty(workbuf* b);
    void putfull(workbuf* b);
    workbuf* trygetfull();
    workbuf* handoff(workbuf* b);
    void prepareFreeWorkbufs();
    bool freeSomeWbufs(bool preemptible);
}

