// generated by GoCpp from file '$(ImportDir)/runtime/mpagealloc.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const long logPallocChunkPages = 9;
    const long summaryLevelBits = 3;
    using chunkIdx = unsigned int;
    struct gocpp_id_1;
    using pallocSum = uint64_t;
    const int pallocChunkPages = 1 << logPallocChunkPages;
}
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/malloc.fwd.h"
#include "golang/runtime/mgcscavenge.fwd.h"
#include "golang/runtime/mpagealloc_64bit.fwd.h"
#include "golang/runtime/mpallocbits.fwd.h"
#include "golang/runtime/mranges.fwd.h"
#include "golang/runtime/mstats.fwd.h"
#include "golang/runtime/runtime2.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::runtime
{
    const int logPallocChunkBytes = logPallocChunkPages + pageShift;
    struct pageAlloc;
    /*const uintptr_t pallocSumBytes = gocpp::Sizeof<pallocSum>() [known mising deps] */;
    const int logMaxPackedValue = logPallocChunkPages + (summaryLevels - 1) * summaryLevelBits;
    const int pallocChunkBytes = pallocChunkPages * pageSize;
    const int summaryL0Bits = heapAddrBits - logPallocChunkBytes - (summaryLevels - 1) * summaryLevelBits;
    const int pallocChunksL2Bits = heapAddrBits - logPallocChunkBytes - pallocChunksL1Bits;
    const int maxPackedValue = 1 << logMaxPackedValue;
    const pallocSum freeChunkSum = pallocSum(uint64_t(pallocChunkPages) | uint64_t(pallocChunkPages << logMaxPackedValue) | uint64_t(pallocChunkPages << (2 * logMaxPackedValue)));
    const int pallocChunksL1Shift = pallocChunksL2Bits;
}
