// generated by GoCpp from file '$(ImportDir)/runtime/mcentral.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mcentral.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mcache.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct mcentral
    {
        sys::NotInHeap _1;
        golang::runtime::spanClass spanclass;
        /* gocpp::array<spanSet, 2> partial; [Known incomplete type] */
        /* gocpp::array<spanSet, 2> full; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct mcentral& value);

    namespace rec
    {
        void init(struct mcentral* c, golang::runtime::spanClass spc);
        struct spanSet* partialUnswept(struct mcentral* c, uint32_t sweepgen);
        struct spanSet* partialSwept(struct mcentral* c, uint32_t sweepgen);
        struct spanSet* fullUnswept(struct mcentral* c, uint32_t sweepgen);
        struct spanSet* fullSwept(struct mcentral* c, uint32_t sweepgen);
        struct mspan* cacheSpan(struct mcentral* c);
        void uncacheSpan(struct mcentral* c, struct mspan* s);
        struct mspan* grow(struct mcentral* c);
    }
}

