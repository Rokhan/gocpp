// generated by GoCpp from file '$(ImportDir)/internal/poll/fd.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd.fwd.h"
#include "gocpp/support.h"


namespace golang::poll
{
    struct errNetClosing
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct errNetClosing& value);
    std::string Error(struct errNetClosing e);
    bool Timeout(struct errNetClosing e);
    bool Temporary(struct errNetClosing e);
    extern errNetClosing ErrNetClosing;
    extern gocpp::error ErrFileClosing;
    extern gocpp::error ErrNoDeadline;
    struct gocpp::error errClosing(bool isFile);
    extern gocpp::error ErrDeadlineExceeded;
    struct DeadlineExceededError
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct DeadlineExceededError& value);
    std::string Error(struct DeadlineExceededError* e);
    bool Timeout(struct DeadlineExceededError* e);
    bool Temporary(struct DeadlineExceededError* e);
    extern gocpp::error ErrNotPollable;
    void consume(gocpp::slice<gocpp::slice<unsigned char>>* v, int64_t n);
    extern std::function<void (int)> TestHookDidWritev;
}

