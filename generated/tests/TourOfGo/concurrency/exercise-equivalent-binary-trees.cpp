// generated by GoCpp from file 'tests/TourOfGo/concurrency/exercise-equivalent-binary-trees.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/concurrency/exercise-equivalent-binary-trees.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"
#include "golang/golang.org/x/tour/tree/tree.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Walk walks the tree t sending all values
    // from the tree to the channel ch.
    void Walk(tree::Tree* t, gocpp::channel<int> ch)
    {
        gocpp::panic("Not implemented"s);
    }

    // Same determines whether the trees
    // t1 and t2 contain the same values.
    bool Same(tree::Tree* t1, tree::Tree* t2)
    {
        gocpp::panic("Not implemented"s);
    }

    void main()
    {
        tree::Tree tree = {};
        mocklib::Printf("%T"s, tree);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
