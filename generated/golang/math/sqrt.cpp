// generated by GoCpp from file '$(ImportDir)/math/sqrt.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/sqrt.h"
#include "gocpp/support.h"

#include "golang/math/bits.h"
#include "golang/math/unsafe.h"

namespace golang::math
{
    double Sqrt(double x)
    {
        return sqrt(x);
    }

    double sqrt(double x)
    {
        //Go switch emulation
        {
            int conditionId = -1;
            if(x == 0 || IsNaN(x) || IsInf(x, 1)) { conditionId = 0; }
            else if(x < 0) { conditionId = 1; }
            switch(conditionId)
            {
                case 0:
                    return x;
                    break;
                case 1:
                    return NaN();
                    break;
            }
        }
        auto ix = Float64bits(x);
        auto exp = int((ix >> shift) & mask);
        if(exp == 0)
        {
            for(; ix & (1 << shift) == 0; )
            {
                ix <<= 1;
                exp--;
            }
            exp++;
        }
        exp -= bias;
        ix &^= mask << shift;
        ix |= 1 << shift;
        if(exp & 1 == 1)
        {
            ix <<= 1;
        }
        exp >>= 1;
        ix <<= 1;
        uint64_t q = {};
        uint64_t s = {};
        auto r = uint64_t(1 << (shift + 1));
        for(; r != 0; )
        {
            auto t = s + r;
            if(t <= ix)
            {
                s = t + r;
                ix -= t;
                q += r;
            }
            ix <<= 1;
            r >>= 1;
        }
        if(ix != 0)
        {
            q += q & 1;
        }
        ix = (q >> 1) + (uint64_t(exp - 1 + bias) << shift);
        return Float64frombits(ix);
    }

}

