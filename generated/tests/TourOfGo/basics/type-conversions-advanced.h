// generated by GoCpp from file 'tests/TourOfGo/basics/type-conversions-advanced.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/type-conversions-advanced.fwd.h"
#include "gocpp/support.h"


namespace golang::main
{
    void toto();
    int totoInt();
    struct III : gocpp::Interface
    {
        III(){}
        III(III& i) = default;
        III(const III& i) = default;
        III& operator=(III& i) = default;
        III& operator=(const III& i) = default;

        template<typename T>
        III(T& ref);

        template<typename T>
        III(const T& ref);

        template<typename T>
        III(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IIII
        {
            virtual void vM() = 0;
        };

        template<typename T, typename StoreT>
        struct IIIImpl : IIII
        {
            explicit IIIImpl(T* ptr)
            {
                value.reset(ptr);
            }

            void vM() override;

            StoreT value;
        };

        std::shared_ptr<IIII> value;
    };

    void M(const gocpp::PtrRecv<III, false>& self);
    void M(const gocpp::ObjRecv<III>& self);

    std::ostream& operator<<(std::ostream& os, const struct III& value);
    struct T
    {

        using isGoStruct = void;

        template<typename U> requires gocpp::GoStruct<U>
        operator U();

        template<typename U> requires gocpp::GoStruct<U>
        bool operator==(const U& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct T& value);
    void M(T*);
    struct Vertex
    {
        double Lat;
        double Long;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Vertex& value);
    void main();
}

