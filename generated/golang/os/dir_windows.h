// generated by GoCpp from file '$(ImportDir)/os/dir_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/dir_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/os/types_windows.h"
// #include "golang/sync/cond.h"  [Ignored, known errors]
#include "golang/sync/mutex.h"
#include "golang/sync/pool.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    struct dirInfo
    {
        gocpp::slice<unsigned char>* buf;
        int bufp;
        uint32_t vol;
        uint32_t go_class;
        std::string path;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dirInfo& value);
    extern sync::Pool dirBufPool;
    void close(struct dirInfo* d);
    extern bool allowReadDirFileID;
    std::tuple<gocpp::slice<std::string>, gocpp::slice<DirEntry>, gocpp::slice<FileInfo>, struct gocpp::error> readdir(struct File* file, int n, readdirMode mode);
    struct dirEntry
    {
        fileStat* fs;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dirEntry& value);
    std::string Name(struct dirEntry de);
    bool IsDir(struct dirEntry de);
    FileMode Type(struct dirEntry de);
    std::tuple<struct FileInfo, struct gocpp::error> Info(struct dirEntry de);
    std::string String(struct dirEntry de);
}

