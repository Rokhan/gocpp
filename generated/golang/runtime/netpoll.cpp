// generated by GoCpp from file '$(ImportDir)/runtime/netpoll.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/netpoll.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lock_sema.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/netpoll_windows.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/stubs.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/tagptr_64bit.h"
#include "golang/runtime/time.h"
#include "golang/runtime/time_nofake.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/runtime/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using atomic::rec::Add;
        using atomic::rec::CompareAndSwap;
        using atomic::rec::Load;
        using atomic::rec::Store;
        using atomic::rec::Swap;
    }

    // Error codes returned by runtime_pollReset and runtime_pollWait.
    // These must match the values in internal/poll/fd_poll_runtime.go.
    // pollDesc contains 2 binary semaphores, rg and wg, to park reader and writer
    // goroutines respectively. The semaphore can be in the following states:
    //
    //	pdReady - io readiness notification is pending;
    //	          a goroutine consumes the notification by changing the state to pdNil.
    //	pdWait - a goroutine prepares to park on the semaphore, but not yet parked;
    //	         the goroutine commits to park by changing the state to G pointer,
    //	         or, alternatively, concurrent io notification changes the state to pdReady,
    //	         or, alternatively, concurrent timeout/close changes the state to pdNil.
    //	G pointer - the goroutine is blocked on the semaphore;
    //	            io notification or timeout/close changes the state to pdReady or pdNil respectively
    //	            and unparks the goroutine.
    //	pdNil - none of the above.
    // Network poller descriptor.
    //
    // No heap pointers.
    
    template<typename T> requires gocpp::GoStruct<T>
    pollDesc::operator T()
    {
        T result;
        result._1 = this->_1;
        result.link = this->link;
        result.fd = this->fd;
        result.fdseq = this->fdseq;
        result.atomicInfo = this->atomicInfo;
        result.rg = this->rg;
        result.wg = this->wg;
        result.lock = this->lock;
        result.closing = this->closing;
        result.user = this->user;
        result.rseq = this->rseq;
        result.rt = this->rt;
        result.rd = this->rd;
        result.wseq = this->wseq;
        result.wt = this->wt;
        result.wd = this->wd;
        result.self = this->self;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool pollDesc::operator==(const T& ref) const
    {
        if (_1 != ref._1) return false;
        if (link != ref.link) return false;
        if (fd != ref.fd) return false;
        if (fdseq != ref.fdseq) return false;
        if (atomicInfo != ref.atomicInfo) return false;
        if (rg != ref.rg) return false;
        if (wg != ref.wg) return false;
        if (lock != ref.lock) return false;
        if (closing != ref.closing) return false;
        if (user != ref.user) return false;
        if (rseq != ref.rseq) return false;
        if (rt != ref.rt) return false;
        if (rd != ref.rd) return false;
        if (wseq != ref.wseq) return false;
        if (wt != ref.wt) return false;
        if (wd != ref.wd) return false;
        if (self != ref.self) return false;
        return true;
    }

    std::ostream& pollDesc::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _1;
        os << " " << link;
        os << " " << fd;
        os << " " << fdseq;
        os << " " << atomicInfo;
        os << " " << rg;
        os << " " << wg;
        os << " " << lock;
        os << " " << closing;
        os << " " << user;
        os << " " << rseq;
        os << " " << rt;
        os << " " << rd;
        os << " " << wseq;
        os << " " << wt;
        os << " " << wd;
        os << " " << self;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct pollDesc& value)
    {
        return value.PrintTo(os);
    }

    // pollInfo is the bits needed by netpollcheckerr, stored atomically,
    // mostly duplicating state that is manipulated under lock in pollDesc.
    // The one exception is the pollEventErr bit, which is maintained only
    // in the pollInfo.
    bool rec::closing(golang::runtime::pollInfo i)
    {
        return i & pollClosing != 0;
    }

    bool rec::eventErr(golang::runtime::pollInfo i)
    {
        return i & pollEventErr != 0;
    }

    bool rec::expiredReadDeadline(golang::runtime::pollInfo i)
    {
        return i & pollExpiredReadDeadline != 0;
    }

    bool rec::expiredWriteDeadline(golang::runtime::pollInfo i)
    {
        return i & pollExpiredWriteDeadline != 0;
    }

    // info returns the pollInfo corresponding to pd.
    runtime::pollInfo rec::info(struct pollDesc* pd)
    {
        return pollInfo(rec::Load(gocpp::recv(pd->atomicInfo)));
    }

    // publishInfo updates pd.atomicInfo (returned by pd.info)
    // using the other values in pd.
    // It must be called while holding pd.lock,
    // and it must be called after changing anything
    // that might affect the info bits.
    // In practice this means after changing closing
    // or changing rd or wd from < 0 to >= 0.
    void rec::publishInfo(struct pollDesc* pd)
    {
        uint32_t info = {};
        if(pd->closing)
        {
            info |= pollClosing;
        }
        if(pd->rd < 0)
        {
            info |= pollExpiredReadDeadline;
        }
        if(pd->wd < 0)
        {
            info |= pollExpiredWriteDeadline;
        }
        info |= uint32_t(rec::Load(gocpp::recv(pd->fdseq)) & pollFDSeqMask) << pollFDSeq;
        auto x = rec::Load(gocpp::recv(pd->atomicInfo));
        for(; ! rec::CompareAndSwap(gocpp::recv(pd->atomicInfo), x, (x & pollEventErr) | info); )
        {
            x = rec::Load(gocpp::recv(pd->atomicInfo));
        }
    }

    // setEventErr sets the result of pd.info().eventErr() to b.
    // We only change the error bit if seq == 0 or if seq matches pollFDSeq
    // (issue #59545).
    void rec::setEventErr(struct pollDesc* pd, bool b, uintptr_t seq)
    {
        auto mSeq = uint32_t(seq & pollFDSeqMask);
        auto x = rec::Load(gocpp::recv(pd->atomicInfo));
        auto xSeq = (x >> pollFDSeq) & pollFDSeqMask;
        if(seq != 0 && xSeq != mSeq)
        {
            return;
        }
        for(; (x & pollEventErr != 0) != b && ! rec::CompareAndSwap(gocpp::recv(pd->atomicInfo), x, x ^ pollEventErr); )
        {
            x = rec::Load(gocpp::recv(pd->atomicInfo));
            auto xSeq = (x >> pollFDSeq) & pollFDSeqMask;
            if(seq != 0 && xSeq != mSeq)
            {
                return;
            }
        }
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    pollCache::operator T()
    {
        T result;
        result.lock = this->lock;
        result.first = this->first;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool pollCache::operator==(const T& ref) const
    {
        if (lock != ref.lock) return false;
        if (first != ref.first) return false;
        return true;
    }

    std::ostream& pollCache::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << lock;
        os << " " << first;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct pollCache& value)
    {
        return value.PrintTo(os);
    }

    mutex netpollInitLock;
    atomic::Uint32 netpollInited;
    pollCache pollcache;
    atomic::Uint32 netpollWaiters;
    //go:linkname poll_runtime_pollServerInit internal/poll.runtime_pollServerInit
    void poll_runtime_pollServerInit()
    {
        netpollGenericInit();
    }

    void netpollGenericInit()
    {
        if(rec::Load(gocpp::recv(netpollInited)) == 0)
        {
            lockInit(& netpollInitLock, lockRankNetpollInit);
            lock(& netpollInitLock);
            if(rec::Load(gocpp::recv(netpollInited)) == 0)
            {
                netpollinit();
                rec::Store(gocpp::recv(netpollInited), 1);
            }
            unlock(& netpollInitLock);
        }
    }

    bool netpollinited()
    {
        return rec::Load(gocpp::recv(netpollInited)) != 0;
    }

    // poll_runtime_isPollServerDescriptor reports whether fd is a
    // descriptor being used by netpoll.
    bool poll_runtime_isPollServerDescriptor(uintptr_t fd)
    {
        return netpollIsPollDescriptor(fd);
    }

    //go:linkname poll_runtime_pollOpen internal/poll.runtime_pollOpen
    std::tuple<struct pollDesc*, int> poll_runtime_pollOpen(uintptr_t fd)
    {
        auto pd = rec::alloc(gocpp::recv(pollcache));
        lock(& pd->lock);
        auto wg = rec::Load(gocpp::recv(pd->wg));
        if(wg != pdNil && wg != pdReady)
        {
            go_throw("runtime: blocked write on free polldesc"s);
        }
        auto rg = rec::Load(gocpp::recv(pd->rg));
        if(rg != pdNil && rg != pdReady)
        {
            go_throw("runtime: blocked read on free polldesc"s);
        }
        pd->fd = fd;
        if(rec::Load(gocpp::recv(pd->fdseq)) == 0)
        {
            rec::Store(gocpp::recv(pd->fdseq), 1);
        }
        pd->closing = false;
        rec::setEventErr(gocpp::recv(pd), false, 0);
        pd->rseq++;
        rec::Store(gocpp::recv(pd->rg), pdNil);
        pd->rd = 0;
        pd->wseq++;
        rec::Store(gocpp::recv(pd->wg), pdNil);
        pd->wd = 0;
        pd->self = pd;
        rec::publishInfo(gocpp::recv(pd));
        unlock(& pd->lock);
        auto errno = netpollopen(fd, pd);
        if(errno != 0)
        {
            rec::free(gocpp::recv(pollcache), pd);
            return {nullptr, int(errno)};
        }
        return {pd, 0};
    }

    //go:linkname poll_runtime_pollClose internal/poll.runtime_pollClose
    void poll_runtime_pollClose(struct pollDesc* pd)
    {
        if(! pd->closing)
        {
            go_throw("runtime: close polldesc w/o unblock"s);
        }
        auto wg = rec::Load(gocpp::recv(pd->wg));
        if(wg != pdNil && wg != pdReady)
        {
            go_throw("runtime: blocked write on closing polldesc"s);
        }
        auto rg = rec::Load(gocpp::recv(pd->rg));
        if(rg != pdNil && rg != pdReady)
        {
            go_throw("runtime: blocked read on closing polldesc"s);
        }
        netpollclose(pd->fd);
        rec::free(gocpp::recv(pollcache), pd);
    }

    void rec::free(struct pollCache* c, struct pollDesc* pd)
    {
        lock(& pd->lock);
        auto fdseq = rec::Load(gocpp::recv(pd->fdseq));
        fdseq = (fdseq + 1) & ((1 << taggedPointerBits) - 1);
        rec::Store(gocpp::recv(pd->fdseq), fdseq);
        rec::publishInfo(gocpp::recv(pd));
        unlock(& pd->lock);
        lock(& c->lock);
        pd->link = c->first;
        c->first = pd;
        unlock(& c->lock);
    }

    // poll_runtime_pollReset, which is internal/poll.runtime_pollReset,
    // prepares a descriptor for polling in mode, which is 'r' or 'w'.
    // This returns an error code; the codes are defined above.
    //
    //go:linkname poll_runtime_pollReset internal/poll.runtime_pollReset
    int poll_runtime_pollReset(struct pollDesc* pd, int mode)
    {
        auto errcode = netpollcheckerr(pd, int32_t(mode));
        if(errcode != pollNoError)
        {
            return errcode;
        }
        if(mode == 'r')
        {
            rec::Store(gocpp::recv(pd->rg), pdNil);
        }
        else
        if(mode == 'w')
        {
            rec::Store(gocpp::recv(pd->wg), pdNil);
        }
        return pollNoError;
    }

    // poll_runtime_pollWait, which is internal/poll.runtime_pollWait,
    // waits for a descriptor to be ready for reading or writing,
    // according to mode, which is 'r' or 'w'.
    // This returns an error code; the codes are defined above.
    //
    //go:linkname poll_runtime_pollWait internal/poll.runtime_pollWait
    int poll_runtime_pollWait(struct pollDesc* pd, int mode)
    {
        auto errcode = netpollcheckerr(pd, int32_t(mode));
        if(errcode != pollNoError)
        {
            return errcode;
        }
        if(GOOS == "solaris"s || GOOS == "illumos"s || GOOS == "aix"s || GOOS == "wasip1"s)
        {
            netpollarm(pd, mode);
        }
        for(; ! netpollblock(pd, int32_t(mode), false); )
        {
            errcode = netpollcheckerr(pd, int32_t(mode));
            if(errcode != pollNoError)
            {
                return errcode;
            }
        }
        return pollNoError;
    }

    //go:linkname poll_runtime_pollWaitCanceled internal/poll.runtime_pollWaitCanceled
    void poll_runtime_pollWaitCanceled(struct pollDesc* pd, int mode)
    {
        for(; ! netpollblock(pd, int32_t(mode), true); )
        {
        }
    }

    //go:linkname poll_runtime_pollSetDeadline internal/poll.runtime_pollSetDeadline
    void poll_runtime_pollSetDeadline(struct pollDesc* pd, int64_t d, int mode)
    {
        lock(& pd->lock);
        if(pd->closing)
        {
            unlock(& pd->lock);
            return;
        }
        auto [rd0, wd0] = std::tuple{pd->rd, pd->wd};
        auto combo0 = rd0 > 0 && rd0 == wd0;
        if(d > 0)
        {
            d += nanotime();
            if(d <= 0)
            {
                d = (1 << 63) - 1;
            }
        }
        if(mode == 'r' || mode == 'r' + 'w')
        {
            pd->rd = d;
        }
        if(mode == 'w' || mode == 'r' + 'w')
        {
            pd->wd = d;
        }
        rec::publishInfo(gocpp::recv(pd));
        auto combo = pd->rd > 0 && pd->rd == pd->wd;
        auto rtf = netpollReadDeadline;
        if(combo)
        {
            rtf = netpollDeadline;
        }
        if(pd->rt.f == nullptr)
        {
            if(pd->rd > 0)
            {
                pd->rt.f = rtf;
                pd->rt.arg = rec::makeArg(gocpp::recv(pd));
                pd->rt.seq = pd->rseq;
                resettimer(& pd->rt, pd->rd);
            }
        }
        else
        if(pd->rd != rd0 || combo != combo0)
        {
            pd->rseq++;
            if(pd->rd > 0)
            {
                modtimer(& pd->rt, pd->rd, 0, rtf, rec::makeArg(gocpp::recv(pd)), pd->rseq);
            }
            else
            {
                deltimer(& pd->rt);
                pd->rt.f = nullptr;
            }
        }
        if(pd->wt.f == nullptr)
        {
            if(pd->wd > 0 && ! combo)
            {
                pd->wt.f = netpollWriteDeadline;
                pd->wt.arg = rec::makeArg(gocpp::recv(pd));
                pd->wt.seq = pd->wseq;
                resettimer(& pd->wt, pd->wd);
            }
        }
        else
        if(pd->wd != wd0 || combo != combo0)
        {
            pd->wseq++;
            if(pd->wd > 0 && ! combo)
            {
                modtimer(& pd->wt, pd->wd, 0, netpollWriteDeadline, rec::makeArg(gocpp::recv(pd)), pd->wseq);
            }
            else
            {
                deltimer(& pd->wt);
                pd->wt.f = nullptr;
            }
        }
        auto delta = int32_t(0);
        g* rg = {};
        g* wg = {};
        if(pd->rd < 0)
        {
            rg = netpollunblock(pd, 'r', false, & delta);
        }
        if(pd->wd < 0)
        {
            wg = netpollunblock(pd, 'w', false, & delta);
        }
        unlock(& pd->lock);
        if(rg != nullptr)
        {
            netpollgoready(rg, 3);
        }
        if(wg != nullptr)
        {
            netpollgoready(wg, 3);
        }
        netpollAdjustWaiters(delta);
    }

    //go:linkname poll_runtime_pollUnblock internal/poll.runtime_pollUnblock
    void poll_runtime_pollUnblock(struct pollDesc* pd)
    {
        lock(& pd->lock);
        if(pd->closing)
        {
            go_throw("runtime: unblock on closing polldesc"s);
        }
        pd->closing = true;
        pd->rseq++;
        pd->wseq++;
        g* rg = {};
        g* wg = {};
        rec::publishInfo(gocpp::recv(pd));
        auto delta = int32_t(0);
        rg = netpollunblock(pd, 'r', false, & delta);
        wg = netpollunblock(pd, 'w', false, & delta);
        if(pd->rt.f != nullptr)
        {
            deltimer(& pd->rt);
            pd->rt.f = nullptr;
        }
        if(pd->wt.f != nullptr)
        {
            deltimer(& pd->wt);
            pd->wt.f = nullptr;
        }
        unlock(& pd->lock);
        if(rg != nullptr)
        {
            netpollgoready(rg, 3);
        }
        if(wg != nullptr)
        {
            netpollgoready(wg, 3);
        }
        netpollAdjustWaiters(delta);
    }

    // netpollready is called by the platform-specific netpoll function.
    // It declares that the fd associated with pd is ready for I/O.
    // The toRun argument is used to build a list of goroutines to return
    // from netpoll. The mode argument is 'r', 'w', or 'r'+'w' to indicate
    // whether the fd is ready for reading or writing or both.
    //
    // This returns a delta to apply to netpollWaiters.
    //
    // This may run while the world is stopped, so write barriers are not allowed.
    //
    //go:nowritebarrier
    int32_t netpollready(struct gList* toRun, struct pollDesc* pd, int32_t mode)
    {
        auto delta = int32_t(0);
        g* rg = {};
        g* wg = {};
        if(mode == 'r' || mode == 'r' + 'w')
        {
            rg = netpollunblock(pd, 'r', true, & delta);
        }
        if(mode == 'w' || mode == 'r' + 'w')
        {
            wg = netpollunblock(pd, 'w', true, & delta);
        }
        if(rg != nullptr)
        {
            rec::push(gocpp::recv(toRun), rg);
        }
        if(wg != nullptr)
        {
            rec::push(gocpp::recv(toRun), wg);
        }
        return delta;
    }

    int netpollcheckerr(struct pollDesc* pd, int32_t mode)
    {
        auto info = rec::info(gocpp::recv(pd));
        if(rec::closing(gocpp::recv(info)))
        {
            return pollErrClosing;
        }
        if((mode == 'r' && rec::expiredReadDeadline(gocpp::recv(info))) || (mode == 'w' && rec::expiredWriteDeadline(gocpp::recv(info))))
        {
            return pollErrTimeout;
        }
        if(mode == 'r' && rec::eventErr(gocpp::recv(info)))
        {
            return pollErrNotPollable;
        }
        return pollNoError;
    }

    bool netpollblockcommit(struct g* gp, unsafe::Pointer gpp)
    {
        auto r = atomic::Casuintptr((uintptr_t*)(gpp), pdWait, uintptr_t(unsafe::Pointer(gp)));
        if(r)
        {
            netpollAdjustWaiters(1);
        }
        return r;
    }

    void netpollgoready(struct g* gp, int traceskip)
    {
        goready(gp, traceskip + 1);
    }

    // returns true if IO is ready, or false if timed out or closed
    // waitio - wait only for completed IO, ignore errors
    // Concurrent calls to netpollblock in the same mode are forbidden, as pollDesc
    // can hold only a single waiting goroutine for each mode.
    bool netpollblock(struct pollDesc* pd, int32_t mode, bool waitio)
    {
        auto gpp = & pd->rg;
        if(mode == 'w')
        {
            gpp = & pd->wg;
        }
        for(; ; )
        {
            if(rec::CompareAndSwap(gocpp::recv(gpp), pdReady, pdNil))
            {
                return true;
            }
            if(rec::CompareAndSwap(gocpp::recv(gpp), pdNil, pdWait))
            {
                break;
            }
            if(auto v = rec::Load(gocpp::recv(gpp)); v != pdReady && v != pdNil)
            {
                go_throw("runtime: double wait"s);
            }
        }
        if(waitio || netpollcheckerr(pd, mode) == pollNoError)
        {
            gopark(netpollblockcommit, unsafe::Pointer(gpp), waitReasonIOWait, traceBlockNet, 5);
        }
        auto old = rec::Swap(gocpp::recv(gpp), pdNil);
        if(old > pdWait)
        {
            go_throw("runtime: corrupted polldesc"s);
        }
        return old == pdReady;
    }

    // netpollunblock moves either pd.rg (if mode == 'r') or
    // pd.wg (if mode == 'w') into the pdReady state.
    // This returns any goroutine blocked on pd.{rg,wg}.
    // It adds any adjustment to netpollWaiters to *delta;
    // this adjustment should be applied after the goroutine has
    // been marked ready.
    struct g* netpollunblock(struct pollDesc* pd, int32_t mode, bool ioready, int32_t* delta)
    {
        auto gpp = & pd->rg;
        if(mode == 'w')
        {
            gpp = & pd->wg;
        }
        for(; ; )
        {
            auto old = rec::Load(gocpp::recv(gpp));
            if(old == pdReady)
            {
                return nullptr;
            }
            if(old == pdNil && ! ioready)
            {
                return nullptr;
            }
            auto go_new = pdNil;
            if(ioready)
            {
                go_new = pdReady;
            }
            if(rec::CompareAndSwap(gocpp::recv(gpp), old, go_new))
            {
                if(old == pdWait)
                {
                    old = pdNil;
                }
                else
                if(old != pdNil)
                {
                    *delta -= 1;
                }
                return (g*)(unsafe::Pointer(old));
            }
        }
    }

    void netpolldeadlineimpl(struct pollDesc* pd, uintptr_t seq, bool read, bool write)
    {
        lock(& pd->lock);
        auto currentSeq = pd->rseq;
        if(! read)
        {
            currentSeq = pd->wseq;
        }
        if(seq != currentSeq)
        {
            unlock(& pd->lock);
            return;
        }
        auto delta = int32_t(0);
        g* rg = {};
        if(read)
        {
            if(pd->rd <= 0 || pd->rt.f == nullptr)
            {
                go_throw("runtime: inconsistent read deadline"s);
            }
            pd->rd = - 1;
            rec::publishInfo(gocpp::recv(pd));
            rg = netpollunblock(pd, 'r', false, & delta);
        }
        g* wg = {};
        if(write)
        {
            if(pd->wd <= 0 || pd->wt.f == nullptr && ! read)
            {
                go_throw("runtime: inconsistent write deadline"s);
            }
            pd->wd = - 1;
            rec::publishInfo(gocpp::recv(pd));
            wg = netpollunblock(pd, 'w', false, & delta);
        }
        unlock(& pd->lock);
        if(rg != nullptr)
        {
            netpollgoready(rg, 0);
        }
        if(wg != nullptr)
        {
            netpollgoready(wg, 0);
        }
        netpollAdjustWaiters(delta);
    }

    void netpollDeadline(go_any arg, uintptr_t seq)
    {
        netpolldeadlineimpl(gocpp::getValue<pollDesc*>(arg), seq, true, true);
    }

    void netpollReadDeadline(go_any arg, uintptr_t seq)
    {
        netpolldeadlineimpl(gocpp::getValue<pollDesc*>(arg), seq, true, false);
    }

    void netpollWriteDeadline(go_any arg, uintptr_t seq)
    {
        netpolldeadlineimpl(gocpp::getValue<pollDesc*>(arg), seq, false, true);
    }

    // netpollAnyWaiters reports whether any goroutines are waiting for I/O.
    bool netpollAnyWaiters()
    {
        return rec::Load(gocpp::recv(netpollWaiters)) > 0;
    }

    // netpollAdjustWaiters adds delta to netpollWaiters.
    void netpollAdjustWaiters(int32_t delta)
    {
        if(delta != 0)
        {
            rec::Add(gocpp::recv(netpollWaiters), delta);
        }
    }

    struct pollDesc* rec::alloc(struct pollCache* c)
    {
        lock(& c->lock);
        if(c->first == nullptr)
        {
            auto pdSize = gocpp::Sizeof<pollDesc>();
            auto n = pollBlockSize / pdSize;
            if(n == 0)
            {
                n = 1;
            }
            auto mem = persistentalloc(n * pdSize, 0, & memstats.other_sys);
            for(auto i = uintptr_t(0); i < n; i++)
            {
                auto pd = (pollDesc*)(add(mem, i * pdSize));
                pd->link = c->first;
                c->first = pd;
            }
        }
        auto pd = c->first;
        c->first = pd->link;
        lockInit(& pd->lock, lockRankPollDesc);
        unlock(& c->lock);
        return pd;
    }

    // makeArg converts pd to an interface{}.
    // makeArg does not do any allocation. Normally, such
    // a conversion requires an allocation because pointers to
    // types which embed runtime/internal/sys.NotInHeap (which pollDesc is)
    // must be stored in interfaces indirectly. See issue 42076.
    go_any rec::makeArg(struct pollDesc* pd)
    {
        go_any i;
        auto x = (eface*)(unsafe::Pointer(& i));
        x->_type = pdType;
        x->data = unsafe::Pointer(& pd->self);
        return i;
    }

    go_any pdEface = (pollDesc*)(nullptr);
    runtime::_type* pdType = efaceOf(& pdEface)->_type;
}

