// generated by GoCpp from file 'tests/TourOfGo/flowcontrol/inlined-statements-scope.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/flowcontrol/inlined-statements-scope.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    std::tuple<std::string, bool> dummy()
    {
        return {"dummyStr", true};
    }

    bool okok = false;
    void test_if()
    {
        if(auto [s1, ok] = dummy(); ok)
        {
            mocklib::Println(s1);
        }
        if(auto [s2, ok] = dummy(); ok)
        {
            mocklib::Println(s2);
        }
        if(auto [s3, okok] = dummy(); okok)
        {
            mocklib::Println(s3);
        }
        mocklib::Println(okok);
    }

    void test_for()
    {
        for(auto [s1, ok] = dummy(); ok; )
        {
            mocklib::Println(s1);
            break;
        }
        for(auto [s2, ok] = dummy(); ok; )
        {
            mocklib::Println(s2);
            break;
        }
        for(auto [s3, okok] = dummy(); okok; )
        {
            mocklib::Println(s3);
            break;
        }
        mocklib::Println(okok);
    }

    void test_switch()
    {
        //Go switch emulation
        {
            auto [s1, ok] = dummy();
            auto condition = ok;
            int conditionId = -1;
            if(condition == true) { conditionId = 0; }
            switch(conditionId)
            {
                case 0:
                    mocklib::Println(s1);
                    break;
                default:
                    mocklib::Println("default");
                    break;
            }
        }
        //Go switch emulation
        {
            auto [s2, ok] = dummy();
            auto condition = ok;
            int conditionId = -1;
            if(condition == true) { conditionId = 0; }
            switch(conditionId)
            {
                case 0:
                    mocklib::Println(s2);
                    break;
                default:
                    mocklib::Println("default");
                    break;
            }
        }
        //Go switch emulation
        {
            auto [s3, okok] = dummy();
            auto condition = okok;
            int conditionId = -1;
            if(condition == true) { conditionId = 0; }
            switch(conditionId)
            {
                case 0:
                    mocklib::Println(s3);
                    break;
                default:
                    mocklib::Println("default");
                    break;
            }
        }
        mocklib::Println(okok);
    }

    void main()
    {
        test_if();
        test_for();
        test_switch();
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
