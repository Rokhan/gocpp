// generated by GoCpp from file '$(ImportDir)/runtime/trace2event.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2event.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagecache.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mwbbuf.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/profbuf.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2.h"
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2map.h"  [Ignored, known errors]
// #include "golang/runtime/trace2region.h"  [Ignored, known errors]
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2string.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    
    template<typename T> requires gocpp::GoStruct<T>
    traceEventWriter::operator T()
    {
        T result;
        result.w = this->w;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool traceEventWriter::operator==(const T& ref) const
    {
        if (w != ref.w) return false;
        return true;
    }

    std::ostream& traceEventWriter::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << w;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct traceEventWriter& value)
    {
        return value.PrintTo(os);
    }

    struct traceEventWriter eventWriter(struct traceLocker tl, traceGoStatus goStatus, traceProcStatus procStatus)
    {
        auto w = writer(gocpp::recv(tl));
        if(auto pp = ptr(gocpp::recv(tl.mp->p)); pp != nullptr && ! statusWasTraced(gocpp::recv(pp->trace), tl.gen) && acquireStatus(gocpp::recv(pp->trace), tl.gen))
        {
            w = writeProcStatus(gocpp::recv(w), uint64_t(pp->id), procStatus, pp->trace.inSweep);
        }
        if(auto gp = tl.mp->curg; gp != nullptr && ! statusWasTraced(gocpp::recv(gp->trace), tl.gen) && acquireStatus(gocpp::recv(gp->trace), tl.gen))
        {
            w = writeGoStatus(gocpp::recv(w), uint64_t(gp->goid), int64_t(tl.mp->procid), goStatus, gp->inMarkAssist);
        }
        return traceEventWriter {w};
    }

    void commit(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args)
    {
        e = write(gocpp::recv(e), ev, args);
        end(gocpp::recv(e));
    }

    struct traceEventWriter write(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args)
    {
        e.w = event(gocpp::recv(e.w), ev, args);
        return e;
    }

    void end(struct traceEventWriter e)
    {
        end(gocpp::recv(e.w));
    }

    struct traceWriter event(struct traceWriter w, traceEv ev, gocpp::slice<traceArg> args)
    {
        std::tie(w, gocpp_id_0) = ensure(gocpp::recv(w), 1 + (len(args) + 1) * traceBytesPerNumber);
        auto ts = traceClockNow();
        if(ts <= w.traceBuf->lastTime)
        {
            ts = w.traceBuf->lastTime + 1;
        }
        auto tsDiff = uint64_t(ts - w.traceBuf->lastTime);
        w.traceBuf->lastTime = ts;
        unsigned char(gocpp::recv(w), unsigned char(ev));
        varint(gocpp::recv(w), tsDiff);
        for(auto [gocpp_ignored, arg] : args)
        {
            varint(gocpp::recv(w), uint64_t(arg));
        }
        return w;
    }

    traceArg stack(struct traceLocker tl, int skip)
    {
        return traceArg(traceStack(skip, tl.mp, tl.gen));
    }

    traceArg startPC(struct traceLocker tl, uintptr_t pc)
    {
        return traceArg(put(gocpp::recv(trace.stackTab[tl.gen % 2]), gocpp::slice<uintptr_t> {logicalStackSentinel, startPCForTrace(pc) + sys::PCQuantum}));
    }

    traceArg string(struct traceLocker tl, std::string s)
    {
        return traceArg(put(gocpp::recv(trace.stringTab[tl.gen % 2]), tl.gen, s));
    }

    traceArg uniqueString(struct traceLocker tl, std::string s)
    {
        return traceArg(emit(gocpp::recv(trace.stringTab[tl.gen % 2]), tl.gen, s));
    }

}

