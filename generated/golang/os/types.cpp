// generated by GoCpp from file '$(ImportDir)/os/types.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/types.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_windows.h"
#include "golang/os/types_windows.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    int Getpagesize()
    {
        return syscall::Getpagesize();
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    File::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool File::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& File::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct File& value)
    {
        return value.PrintTo(os);
    }

    std::string Name(struct fileStat* fs)
    {
        return fs->name;
    }

    bool IsDir(struct fileStat* fs)
    {
        return IsDir(gocpp::recv(Mode(gocpp::recv(fs))));
    }

    bool SameFile(struct FileInfo fi1, struct FileInfo fi2)
    {
        auto [fs1, ok1] = gocpp::getValue<fileStat*>(fi1);
        auto [fs2, ok2] = gocpp::getValue<fileStat*>(fi2);
        if(! ok1 || ! ok2)
        {
            return false;
        }
        return sameFile(fs1, fs2);
    }

}

