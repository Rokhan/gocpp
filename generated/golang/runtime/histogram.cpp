// generated by GoCpp from file '$(ImportDir)/runtime/histogram.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/histogram.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/metrics.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace atomic::rec;
        using namespace runtime::rec;
        using namespace sys::rec;
        using namespace unsafe::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    timeHistogram::operator T()
    {
        T result;
        result.counts = this->counts;
        result.underflow = this->underflow;
        result.overflow = this->overflow;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool timeHistogram::operator==(const T& ref) const
    {
        if (counts != ref.counts) return false;
        if (underflow != ref.underflow) return false;
        if (overflow != ref.overflow) return false;
        return true;
    }

    std::ostream& timeHistogram::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << counts;
        os << " " << underflow;
        os << " " << overflow;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct timeHistogram& value)
    {
        return value.PrintTo(os);
    }

    void rec::record(struct timeHistogram* h, int64_t duration)
    {
        if(duration < 0)
        {
            rec::Add(gocpp::recv(h->underflow), 1);
            return;
        }
        unsigned int bucketBit = {};
        unsigned int bucket = {};
        if(auto l = sys::Len64(uint64_t(duration)); l < timeHistMinBucketBits)
        {
            bucketBit = timeHistMinBucketBits;
            bucket = 0;
        }
        else
        {
            bucketBit = (unsigned int)(l);
            bucket = bucketBit - timeHistMinBucketBits + 1;
        }
        if(bucket >= timeHistNumBuckets)
        {
            rec::Add(gocpp::recv(h->overflow), 1);
            return;
        }
        auto subBucket = (unsigned int)(duration >> (bucketBit - 1 - timeHistSubBucketBits)) % timeHistNumSubBuckets;
        rec::Add(gocpp::recv(h->counts[bucket * timeHistNumSubBuckets + subBucket]), 1);
    }

    void rec::write(struct timeHistogram* h, struct metricValue* out)
    {
        auto hist = rec::float64HistOrInit(gocpp::recv(out), timeHistBuckets);
        hist->counts[0] = rec::Load(gocpp::recv(h->underflow));
        for(auto [i, gocpp_ignored] : h->counts)
        {
            hist->counts[i + 1] = rec::Load(gocpp::recv(h->counts[i]));
        }
        hist->counts[len(hist->counts) - 1] = rec::Load(gocpp::recv(h->overflow));
    }

    double float64Inf()
    {
        auto inf = uint64_t(fInf);
        return *(double*)(unsafe::Pointer(& inf));
    }

    double float64NegInf()
    {
        auto inf = uint64_t(fNegInf);
        return *(double*)(unsafe::Pointer(& inf));
    }

    gocpp::slice<double> timeHistogramMetricsBuckets()
    {
        auto b = gocpp::make(gocpp::Tag<gocpp::slice<double>>(), timeHistTotalBuckets + 1);
        b[0] = float64NegInf();
        for(auto j = 0; j < timeHistNumSubBuckets; j++)
        {
            auto bucketNanos = uint64_t(j) << (timeHistMinBucketBits - 1 - timeHistSubBucketBits);
            b[j + 1] = double(bucketNanos) / 1e9;
        }
        for(auto i = timeHistMinBucketBits; i < timeHistMaxBucketBits; i++)
        {
            for(auto j = 0; j < timeHistNumSubBuckets; j++)
            {
                auto bucketNanos = uint64_t(1) << (i - 1);
                bucketNanos |= uint64_t(j) << (i - 1 - timeHistSubBucketBits);
                auto bucketIndex = (i - timeHistMinBucketBits + 1) * timeHistNumSubBuckets + j + 1;
                b[bucketIndex] = double(bucketNanos) / 1e9;
            }
        }
        b[len(b) - 2] = double(uint64_t(1) << (timeHistMaxBucketBits - 1)) / 1e9;
        b[len(b) - 1] = float64Inf();
        return b;
    }

}

