// generated by GoCpp from file '$(ImportDir)/runtime/mpallocbits.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mpallocbits.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/mpagealloc.h"

namespace golang::runtime
{
    unsigned int get(pageBits* b, unsigned int i);
    uint64_t block64(pageBits* b, unsigned int i);
    void set(pageBits* b, unsigned int i);
    void setRange(pageBits* b, unsigned int i, unsigned int n);
    void setAll(pageBits* b);
    void setBlock64(pageBits* b, unsigned int i, uint64_t v);
    void clear(pageBits* b, unsigned int i);
    void clearRange(pageBits* b, unsigned int i, unsigned int n);
    void clearAll(pageBits* b);
    void clearBlock64(pageBits* b, unsigned int i, uint64_t v);
    unsigned int popcntRange(pageBits* b, unsigned int i, unsigned int n);
    pallocSum summarize(pallocBits* b);
    std::tuple<unsigned int, unsigned int> find(pallocBits* b, uintptr_t npages, unsigned int searchIdx);
    unsigned int find1(pallocBits* b, unsigned int searchIdx);
    std::tuple<unsigned int, unsigned int> findSmallN(pallocBits* b, uintptr_t npages, unsigned int searchIdx);
    std::tuple<unsigned int, unsigned int> findLargeN(pallocBits* b, uintptr_t npages, unsigned int searchIdx);
    void allocRange(pallocBits* b, unsigned int i, unsigned int n);
    void allocAll(pallocBits* b);
    void free1(pallocBits* b, unsigned int i);
    void free(pallocBits* b, unsigned int i, unsigned int n);
    void freeAll(pallocBits* b);
    uint64_t pages64(pallocBits* b, unsigned int i);
    void allocPages64(pallocBits* b, unsigned int i, uint64_t alloc);
    unsigned int findBitRange64(uint64_t c, unsigned int n);
    struct pallocData
    {
        pageBits scavenged;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct pallocData& value);
    void allocRange(struct pallocData* m, unsigned int i, unsigned int n);
    void allocAll(struct pallocData* m);
}

