// generated by GoCpp from file '$(ImportDir)/runtime/mcache.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mcache.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/internal/cpu/cpu.h"  [Ignored, known errors]
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mcheckmark.h"
#include "golang/runtime/mfixalloc.h"
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
// #include "golang/runtime/mgcpacer.h"  [Ignored, known errors]
// #include "golang/runtime/mgcscavenge.h"  [Ignored, known errors]
// #include "golang/runtime/mgcsweep.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mpagecache.h"
#include "golang/runtime/mpallocbits.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/mwbbuf.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/sizeclasses.h"
#include "golang/runtime/stack.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    
    std::ostream& mcache::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << nextSample;
        os << " " << scanAlloc;
        os << " " << tiny;
        os << " " << tinyoffset;
        os << " " << tinyAllocs;
        os << " " << alloc;
        os << " " << stackcache;
        os << " " << flushGen;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct mcache& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& gclink::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << next;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct gclink& value)
    {
        return value.PrintTo(os);
    }

    gclink* ptr(gclinkptr p)
    {
        return (gclink*)(unsafe::Pointer(p));
    }

    
    std::ostream& stackfreelist::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << list;
        os << " " << size;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct stackfreelist& value)
    {
        return value.PrintTo(os);
    }

    mspan emptymspan;
    mcache* allocmcache()
    {
        mcache* c = {};
        systemstack([=]() mutable -> void
        {
            lock(& mheap_.lock);
            c = (mcache*)(alloc(gocpp::recv(mheap_.cachealloc)));
            Store(gocpp::recv(c->flushGen), mheap_.sweepgen);
            unlock(& mheap_.lock);
        }
);
        for(auto [i, gocpp_ignored] : c->alloc)
        {
            c->alloc[i] = & emptymspan;
        }
        c->nextSample = nextSample();
        return c;
    }

    void freemcache(mcache* c)
    {
        systemstack([=]() mutable -> void
        {
            releaseAll(gocpp::recv(c));
            stackcache_clear(c);
            lock(& mheap_.lock);
            free(gocpp::recv(mheap_.cachealloc), unsafe::Pointer(c));
            unlock(& mheap_.lock);
        }
);
    }

    mcache* getMCache(m* mp)
    {
        auto pp = ptr(gocpp::recv(mp->p));
        mcache* c = {};
        if(pp == nullptr)
        {
            c = mcache0;
        }
        else
        {
            c = pp->mcache;
        }
        return c;
    }

    void refill(struct mcache* c, spanClass spc)
    {
        auto s = c->alloc[spc];
        if(s->allocCount != s->nelems)
        {
            go_throw("refill of span with free space remaining");
        }
        if(s != & emptymspan)
        {
            if(s->sweepgen != mheap_.sweepgen + 3)
            {
                go_throw("bad sweepgen in refill");
            }
            uncacheSpan(gocpp::recv(mheap_.central[spc].mcentral), s);
            auto stats = acquire(gocpp::recv(memstats.heapStats));
            auto slotsUsed = int64_t(s->allocCount) - int64_t(s->allocCountBeforeCache);
            atomic::Xadd64(& stats->smallAllocCount[sizeclass(gocpp::recv(spc))], slotsUsed);
            if(spc == tinySpanClass)
            {
                atomic::Xadd64(& stats->tinyAllocCount, int64_t(c->tinyAllocs));
                c->tinyAllocs = 0;
            }
            release(gocpp::recv(memstats.heapStats));
            auto bytesAllocated = slotsUsed * int64_t(s->elemsize);
            Add(gocpp::recv(gcController.totalAlloc), bytesAllocated);
            s->allocCountBeforeCache = 0;
        }
        s = cacheSpan(gocpp::recv(mheap_.central[spc].mcentral));
        if(s == nullptr)
        {
            go_throw("out of memory");
        }
        if(s->allocCount == s->nelems)
        {
            go_throw("span has no free space");
        }
        s->sweepgen = mheap_.sweepgen + 3;
        s->allocCountBeforeCache = s->allocCount;
        auto usedBytes = uintptr_t(s->allocCount) * s->elemsize;
        update(gocpp::recv(gcController), int64_t(s->npages * pageSize) - int64_t(usedBytes), int64_t(c->scanAlloc));
        c->scanAlloc = 0;
        c->alloc[spc] = s;
    }

    mspan* allocLarge(struct mcache* c, uintptr_t size, bool noscan)
    {
        if(size + _PageSize < size)
        {
            go_throw("out of memory");
        }
        auto npages = size >> _PageShift;
        if(size & _PageMask != 0)
        {
            npages++;
        }
        deductSweepCredit(npages * _PageSize, npages);
        auto spc = makeSpanClass(0, noscan);
        auto s = alloc(gocpp::recv(mheap_), npages, spc);
        if(s == nullptr)
        {
            go_throw("out of memory");
        }
        auto stats = acquire(gocpp::recv(memstats.heapStats));
        atomic::Xadd64(& stats->largeAlloc, int64_t(npages * pageSize));
        atomic::Xadd64(& stats->largeAllocCount, 1);
        release(gocpp::recv(memstats.heapStats));
        Add(gocpp::recv(gcController.totalAlloc), int64_t(npages * pageSize));
        update(gocpp::recv(gcController), int64_t(s->npages * pageSize), 0);
        push(gocpp::recv(fullSwept(gocpp::recv(mheap_.central[spc].mcentral), mheap_.sweepgen)), s);
        s->limit = base(gocpp::recv(s)) + size;
        initHeapBits(gocpp::recv(s), false);
        return s;
    }

    void releaseAll(struct mcache* c)
    {
        auto scanAlloc = int64_t(c->scanAlloc);
        c->scanAlloc = 0;
        auto sg = mheap_.sweepgen;
        auto dHeapLive = int64_t(0);
        for(auto [i, gocpp_ignored] : c->alloc)
        {
            auto s = c->alloc[i];
            if(s != & emptymspan)
            {
                auto slotsUsed = int64_t(s->allocCount) - int64_t(s->allocCountBeforeCache);
                s->allocCountBeforeCache = 0;
                auto stats = acquire(gocpp::recv(memstats.heapStats));
                atomic::Xadd64(& stats->smallAllocCount[sizeclass(gocpp::recv(spanClass(i)))], slotsUsed);
                release(gocpp::recv(memstats.heapStats));
                Add(gocpp::recv(gcController.totalAlloc), slotsUsed * int64_t(s->elemsize));
                if(s->sweepgen != sg + 1)
                {
                    dHeapLive -= int64_t(s->nelems - s->allocCount) * int64_t(s->elemsize);
                }
                uncacheSpan(gocpp::recv(mheap_.central[i].mcentral), s);
                c->alloc[i] = & emptymspan;
            }
        }
        c->tiny = 0;
        c->tinyoffset = 0;
        auto stats = acquire(gocpp::recv(memstats.heapStats));
        atomic::Xadd64(& stats->tinyAllocCount, int64_t(c->tinyAllocs));
        c->tinyAllocs = 0;
        release(gocpp::recv(memstats.heapStats));
        update(gocpp::recv(gcController), dHeapLive, scanAlloc);
    }

    void prepareForSweep(struct mcache* c)
    {
        auto sg = mheap_.sweepgen;
        auto flushGen = Load(gocpp::recv(c->flushGen));
        if(flushGen == sg)
        {
            return;
        }
        else
        if(flushGen != sg - 2)
        {
            println("bad flushGen", flushGen, "in prepareForSweep; sweepgen", sg);
            go_throw("bad flushGen");
        }
        releaseAll(gocpp::recv(c));
        stackcache_clear(c);
        Store(gocpp::recv(c->flushGen), mheap_.sweepgen);
    }

}

