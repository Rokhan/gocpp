// generated by GoCpp from file '$(ImportDir)/runtime/arena.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/arena.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/cpu/cpu.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap_allocheaders.h"
#include "golang/runtime/mcache.h"
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mcheckmark.h"
#include "golang/runtime/mfixalloc.h"
#include "golang/runtime/mgcscavenge.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mpallocbits.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    unsafe::Pointer arena_newArena();
    go_any arena_arena_New(unsafe::Pointer arena, go_any typ);
    void arena_arena_Slice(unsafe::Pointer arena, go_any slice, int cap);
    void arena_arena_Free(unsafe::Pointer arena);
    go_any arena_heapify(go_any s);
    void init();
    uintptr_t userArenaChunkReserveBytes();
    struct userArena
    {
        mspan* fullList;
        mspan* active;
        gocpp::slice<unsafe::Pointer> refs;
        atomic::Bool defunct;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct userArena& value);
    struct userArena* newUserArena();
    struct liveUserArenaChunk
    {
        mspan* mspan;
        unsafe::Pointer x;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct liveUserArenaChunk& value);
    void userArenaHeapBitsSetSliceType(golang::runtime::_type* typ, int n, unsafe::Pointer ptr, struct mspan* s);
    std::tuple<unsafe::Pointer, struct mspan*> newUserArenaChunk();
    bool inUserArenaChunk(uintptr_t p);
    void freeUserArenaChunk(struct mspan* s, unsafe::Pointer x);
    extern gocpp_id_0 userArenaState;

    namespace rec
    {
        unsafe::Pointer go_new(struct userArena* a, golang::runtime::_type* typ);
        void slice(struct userArena* a, go_any sl, int cap);
        void free(struct userArena* a);
        unsafe::Pointer alloc(struct userArena* a, golang::runtime::_type* typ, int cap);
        struct mspan* refill(struct userArena* a);
        unsafe::Pointer userArenaNextFree(struct mspan* s, golang::runtime::_type* typ, int cap);
        bool isUnusedUserArenaChunk(struct mspan* s);
        void setUserArenaChunkToFault(struct mspan* s);
        struct mspan* allocUserArenaChunk(struct mheap* h);
    }
}

