// generated by GoCpp from file '$(ImportDir)/runtime/traceback.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/traceback.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/plugin.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/stack.h"
#include "golang/runtime/stkframe.h"
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct unwinder
    {
        stkframe frame;
        runtime::guintptr g;
        int cgoCtxt;
        abi::FuncID calleeFuncID;
        runtime::unwindFlags flags;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct unwinder& value);
    int tracebackPCs(struct unwinder* u, int skip, gocpp::slice<uintptr_t> pcBuf);
    void printArgs(struct funcInfo f, unsafe::Pointer argp, uintptr_t pc);
    std::tuple<std::string, std::string, std::string> funcNamePiecesForPrint(std::string name);
    std::string funcNameForPrint(std::string name);
    void printFuncName(std::string name);
    void printcreatedby(struct g* gp);
    void printcreatedby1(struct funcInfo f, uintptr_t pc, uint64_t goid);
    void traceback(uintptr_t pc, uintptr_t sp, uintptr_t lr, struct g* gp);
    void tracebacktrap(uintptr_t pc, uintptr_t sp, uintptr_t lr, struct g* gp);
    void traceback1(uintptr_t pc, uintptr_t sp, uintptr_t lr, struct g* gp, runtime::unwindFlags flags);
    std::tuple<int, int> traceback2(struct unwinder* u, bool showRuntime, int skip, int max);
    void printAncestorTraceback(struct ancestorInfo ancestor);
    void printAncestorTracebackFuncInfo(struct funcInfo f, uintptr_t pc);
    int callers(int skip, gocpp::slice<uintptr_t> pcbuf);
    int gcallers(struct g* gp, int skip, gocpp::slice<uintptr_t> pcbuf);
    bool showframe(struct srcFunc sf, struct g* gp, bool firstFrame, abi::FuncID calleeID);
    bool showfuncinfo(struct srcFunc sf, bool firstFrame, abi::FuncID calleeID);
    bool isExportedRuntime(std::string name);
    bool elideWrapperCalling(abi::FuncID id);
    extern gocpp::array_base<std::string> gStatusStrings;
    void goroutineheader(struct g* gp);
    void tracebackothers(struct g* me);
    void tracebackHexdump(struct stack stk, struct stkframe* frame, uintptr_t bad);
    bool isSystemGoroutine(struct g* gp, bool fixed);
    void SetCgoTraceback(int version, unsafe::Pointer traceback, unsafe::Pointer context, unsafe::Pointer symbolizer);
    struct cgoTracebackArg
    {
        uintptr_t context;
        uintptr_t sigContext;
        uintptr_t* buf;
        uintptr_t max;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoTracebackArg& value);
    struct cgoContextArg
    {
        uintptr_t context;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoContextArg& value);
    struct cgoSymbolizerArg
    {
        uintptr_t pc;
        unsigned char* file;
        uintptr_t lineno;
        unsigned char* funcName;
        uintptr_t entry;
        uintptr_t more;
        uintptr_t data;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoSymbolizerArg& value);
    void printCgoTraceback(cgoCallers* callers);
    bool printOneCgoTraceback(uintptr_t pc, std::function<std::tuple<bool, bool> ()> commitFrame, struct cgoSymbolizerArg* arg);
    void callCgoSymbolizer(struct cgoSymbolizerArg* arg);
    void cgoContextPCs(uintptr_t ctxt, gocpp::slice<uintptr_t> buf);

    namespace rec
    {
        void init(struct unwinder* u, struct g* gp, runtime::unwindFlags flags);
        void initAt(struct unwinder* u, uintptr_t pc0, uintptr_t sp0, uintptr_t lr0, struct g* gp, runtime::unwindFlags flags);
        bool valid(struct unwinder* u);
        void resolveInternal(struct unwinder* u, bool innermost, bool isSyscall);
        void next(struct unwinder* u);
        void finishInternal(struct unwinder* u);
        uintptr_t symPC(struct unwinder* u);
        int cgoCallers(struct unwinder* u, gocpp::slice<uintptr_t> pcBuf);
    }
}

