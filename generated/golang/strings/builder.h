// generated by GoCpp from file '$(ImportDir)/strings/builder.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strings/builder.fwd.h"
#include "gocpp/support.h"


namespace golang::strings
{
    struct Builder
    {
        Builder* addr;
        gocpp::slice<unsigned char> buf;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Builder& value);
    unsafe::Pointer noescape(unsafe::Pointer p);
    void copyCheck(struct Builder* b);
    std::string String(struct Builder* b);
    int Len(struct Builder* b);
    int Cap(struct Builder* b);
    void Reset(struct Builder* b);
    void grow(struct Builder* b, int n);
    void Grow(struct Builder* b, int n);
    std::tuple<int, gocpp::error> Write(struct Builder* b, gocpp::slice<unsigned char> p);
    gocpp::error WriteByte(struct Builder* b, unsigned char c);
    std::tuple<int, gocpp::error> WriteRune(struct Builder* b, gocpp::rune r);
    std::tuple<int, gocpp::error> WriteString(struct Builder* b, std::string s);
}

