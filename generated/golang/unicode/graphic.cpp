// generated by GoCpp from file '$(ImportDir)/unicode/graphic.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/unicode/graphic.h"
#include "gocpp/support.h"

#include "golang/unicode/letter.h"

namespace golang::unicode
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Bit masks for each code point under U+0100, for fast lookup.
    // GraphicRanges defines the set of graphic characters according to Unicode.
    gocpp::slice<RangeTable*> GraphicRanges = gocpp::slice<RangeTable*> {L, M, N, P, S, Zs};
    // PrintRanges defines the set of printable characters according to Go.
    // ASCII space, U+0020, is handled separately.
    gocpp::slice<RangeTable*> PrintRanges = gocpp::slice<RangeTable*> {L, M, N, P, S};
    // IsGraphic reports whether the rune is defined as a Graphic by Unicode.
    // Such characters include letters, marks, numbers, punctuation, symbols, and
    // spaces, from categories [L], [M], [N], [P], [S], [Zs].
    bool IsGraphic(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pg != 0;
        }
        return In(r, GraphicRanges);
    }

    // IsPrint reports whether the rune is defined as printable by Go. Such
    // characters include letters, marks, numbers, punctuation, symbols, and the
    // ASCII space character, from categories [L], [M], [N], [P], [S] and the ASCII space
    // character. This categorization is the same as [IsGraphic] except that the
    // only spacing character is ASCII space, U+0020.
    bool IsPrint(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pp != 0;
        }
        return In(r, PrintRanges);
    }

    // IsOneOf reports whether the rune is a member of one of the ranges.
    // The function "In" provides a nicer signature and should be used in preference to IsOneOf.
    bool IsOneOf(gocpp::slice<RangeTable*> ranges, gocpp::rune r)
    {
        for(auto [gocpp_ignored, inside] : ranges)
        {
            if(Is(inside, r))
            {
                return true;
            }
        }
        return false;
    }

    // In reports whether the rune is a member of one of the ranges.
    bool In(gocpp::rune r, gocpp::slice<RangeTable*> ranges)
    {
        for(auto [gocpp_ignored, inside] : ranges)
        {
            if(Is(inside, r))
            {
                return true;
            }
        }
        return false;
    }

    // IsControl reports whether the rune is a control character.
    // The [C] ([Other]) Unicode category includes more code points
    // such as surrogates; use [Is](C, r) to test for them.
    bool IsControl(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pC != 0;
        }
        return false;
    }

    // IsLetter reports whether the rune is a letter (category [L]).
    bool IsLetter(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & (pLmask) != 0;
        }
        return isExcludingLatin(Letter, r);
    }

    // IsMark reports whether the rune is a mark character (category [M]).
    bool IsMark(gocpp::rune r)
    {
        return isExcludingLatin(Mark, r);
    }

    // IsNumber reports whether the rune is a number (category [N]).
    bool IsNumber(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pN != 0;
        }
        return isExcludingLatin(Number, r);
    }

    // IsPunct reports whether the rune is a Unicode punctuation character
    // (category [P]).
    bool IsPunct(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pP != 0;
        }
        return Is(Punct, r);
    }

    // IsSpace reports whether the rune is a space character as defined
    // by Unicode's White Space property; in the Latin-1 space
    // this is
    //
    //	'\t', '\n', '\v', '\f', '\r', ' ', U+0085 (NEL), U+00A0 (NBSP).
    //
    // Other definitions of spacing characters are set by category
    // Z and property [Pattern_White_Space].
    bool IsSpace(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            //Go switch emulation
            {
                auto condition = r;
                int conditionId = -1;
                if(condition == '\t') { conditionId = 0; }
                else if(condition == '\n') { conditionId = 1; }
                else if(condition == '\v') { conditionId = 2; }
                else if(condition == '\f') { conditionId = 3; }
                else if(condition == '\r') { conditionId = 4; }
                else if(condition == ' ') { conditionId = 5; }
                else if(condition == 0x85) { conditionId = 6; }
                else if(condition == 0xA0) { conditionId = 7; }
                switch(conditionId)
                {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        return true;
                        break;
                }
            }
            return false;
        }
        return isExcludingLatin(White_Space, r);
    }

    // IsSymbol reports whether the rune is a symbolic character.
    bool IsSymbol(gocpp::rune r)
    {
        if(uint32_t(r) <= MaxLatin1)
        {
            return properties[uint8_t(r)] & pS != 0;
        }
        return isExcludingLatin(Symbol, r);
    }

}

