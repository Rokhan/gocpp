// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/registry/value.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/registry/value.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/syscall/windows/registry/key.h"
#include "golang/syscall/syscall_windows.h"

namespace golang::registry
{
    extern syscall::Errno ErrShortBuffer;
    extern syscall::Errno ErrNotExist;
    extern gocpp::error ErrUnexpectedType;
    std::tuple<int, uint32_t, gocpp::error> GetValue(Key k, std::string name, gocpp::slice<unsigned char> buf);
    std::tuple<gocpp::slice<unsigned char>, uint32_t, gocpp::error> getValue(Key k, std::string name, gocpp::slice<unsigned char> buf);
    std::tuple<std::string, uint32_t, gocpp::error> GetStringValue(Key k, std::string name);
    std::tuple<std::string, gocpp::error> GetMUIStringValue(Key k, std::string name);
    std::tuple<std::string, gocpp::error> ExpandString(std::string value);
    std::tuple<gocpp::slice<std::string>, uint32_t, gocpp::error> GetStringsValue(Key k, std::string name);
    std::tuple<uint64_t, uint32_t, gocpp::error> GetIntegerValue(Key k, std::string name);
    std::tuple<gocpp::slice<unsigned char>, uint32_t, gocpp::error> GetBinaryValue(Key k, std::string name);
    gocpp::error setValue(Key k, std::string name, uint32_t valtype, gocpp::slice<unsigned char> data);
    gocpp::error SetDWordValue(Key k, std::string name, uint32_t value);
    gocpp::error SetQWordValue(Key k, std::string name, uint64_t value);
    gocpp::error setStringValue(Key k, std::string name, uint32_t valtype, std::string value);
    gocpp::error SetStringValue(Key k, std::string name, std::string value);
    gocpp::error SetExpandStringValue(Key k, std::string name, std::string value);
    gocpp::error SetStringsValue(Key k, std::string name, gocpp::slice<std::string> value);
    gocpp::error SetBinaryValue(Key k, std::string name, gocpp::slice<unsigned char> value);
    gocpp::error DeleteValue(Key k, std::string name);
    std::tuple<gocpp::slice<std::string>, gocpp::error> ReadValueNames(Key k);
}

