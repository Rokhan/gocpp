// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/memory_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/memory_windows.h"
#include "gocpp/support.h"

namespace golang::windows
{
    
    template<typename T> requires gocpp::GoStruct<T>
    MemoryBasicInformation::operator T()
    {
        T result;
        result.BaseAddress = this->BaseAddress;
        result.AllocationBase = this->AllocationBase;
        result.AllocationProtect = this->AllocationProtect;
        result.PartitionId = this->PartitionId;
        result.RegionSize = this->RegionSize;
        result.State = this->State;
        result.Protect = this->Protect;
        result.Type = this->Type;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool MemoryBasicInformation::operator==(const T& ref) const
    {
        if (BaseAddress != ref.BaseAddress) return false;
        if (AllocationBase != ref.AllocationBase) return false;
        if (AllocationProtect != ref.AllocationProtect) return false;
        if (PartitionId != ref.PartitionId) return false;
        if (RegionSize != ref.RegionSize) return false;
        if (State != ref.State) return false;
        if (Protect != ref.Protect) return false;
        if (Type != ref.Type) return false;
        return true;
    }

    std::ostream& MemoryBasicInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << BaseAddress;
        os << " " << AllocationBase;
        os << " " << AllocationProtect;
        os << " " << PartitionId;
        os << " " << RegionSize;
        os << " " << State;
        os << " " << Protect;
        os << " " << Type;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct MemoryBasicInformation& value)
    {
        return value.PrintTo(os);
    }

}

