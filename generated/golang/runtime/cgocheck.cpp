// generated by GoCpp from file '$(ImportDir)/runtime/cgocheck.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/cgocheck.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/internal/goarch/goarch.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mheap.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/plugin.h"
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/stack.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/runtime/type.h"
// #include "golang/runtime/typekind.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    std::string cgoWriteBarrierFail = "unpinned Go pointer stored into non-Go memory";
    void cgoCheckPtrWrite(unsafe::Pointer* dst, unsafe::Pointer src)
    {
        if(! mainStarted)
        {
            return;
        }
        if(! cgoIsGoPointer(src))
        {
            return;
        }
        if(cgoIsGoPointer(unsafe::Pointer(dst)))
        {
            return;
        }
        auto gp = getg();
        if(gp == gp->m->g0 || gp == gp->m->gsignal)
        {
            return;
        }
        if(gp->m->mallocing != 0)
        {
            return;
        }
        if(isPinned(src))
        {
            return;
        }
        if(inPersistentAlloc(uintptr_t(unsafe::Pointer(dst))))
        {
            return;
        }
        systemstack([=]() mutable -> void
        {
            println("write of unpinned Go pointer", hex(uintptr_t(src)), "to non-Go memory", hex(uintptr_t(unsafe::Pointer(dst))));
            go_throw(cgoWriteBarrierFail);
        });
    }

    void cgoCheckMemmove(struct _type* typ, unsafe::Pointer dst, unsafe::Pointer src)
    {
        cgoCheckMemmove2(typ, dst, src, 0, typ->Size_);
    }

    void cgoCheckMemmove2(struct _type* typ, unsafe::Pointer dst, unsafe::Pointer src, uintptr_t off, uintptr_t size)
    {
        if(typ->PtrBytes == 0)
        {
            return;
        }
        if(! cgoIsGoPointer(src))
        {
            return;
        }
        if(cgoIsGoPointer(dst))
        {
            return;
        }
        cgoCheckTypedBlock(typ, src, off, size);
    }

    void cgoCheckSliceCopy(struct _type* typ, unsafe::Pointer dst, unsafe::Pointer src, int n)
    {
        if(typ->PtrBytes == 0)
        {
            return;
        }
        if(! cgoIsGoPointer(src))
        {
            return;
        }
        if(cgoIsGoPointer(dst))
        {
            return;
        }
        auto p = src;
        for(auto i = 0; i < n; i++)
        {
            cgoCheckTypedBlock(typ, p, 0, typ->Size_);
            p = add(p, typ->Size_);
        }
    }

    void cgoCheckTypedBlock(struct _type* typ, unsafe::Pointer src, uintptr_t off, uintptr_t size)
    {
        if(typ->PtrBytes <= off)
        {
            return;
        }
        if(auto ptrdataSize = typ->PtrBytes - off; size > ptrdataSize)
        {
            size = ptrdataSize;
        }
        if(typ->Kind_ & kindGCProg == 0)
        {
            cgoCheckBits(src, typ->GCData, off, size);
            return;
        }
        for(auto [gocpp_ignored, datap] : activeModules())
        {
            if(cgoInRange(src, datap->data, datap->edata))
            {
                auto doff = uintptr_t(src) - datap->data;
                cgoCheckBits(add(src, - doff), datap->gcdatamask.bytedata, off + doff, size);
                return;
            }
            if(cgoInRange(src, datap->bss, datap->ebss))
            {
                auto boff = uintptr_t(src) - datap->bss;
                cgoCheckBits(add(src, - boff), datap->gcbssmask.bytedata, off + boff, size);
                return;
            }
        }
        auto s = spanOfUnchecked(uintptr_t(src));
        if(get(gocpp::recv(s->state)) == mSpanManual)
        {
            systemstack([=]() mutable -> void
            {
                cgoCheckUsingType(typ, src, off, size);
            });
            return;
        }
        if(goexperiment::AllocHeaders)
        {
            auto tp = typePointersOf(gocpp::recv(s), uintptr_t(src), size);
            for(; ; )
            {
                uintptr_t addr = {};
                if(std::tie(tp, addr) = next(gocpp::recv(tp), uintptr_t(src) + size); addr == 0)
                {
                    break;
                }
                auto v = *(unsafe::Pointer*)(unsafe::Pointer(addr));
                if(cgoIsGoPointer(v) && ! isPinned(v))
                {
                    go_throw(cgoWriteBarrierFail);
                }
            }
        }
        else
        {
            auto hbits = heapBitsForAddr(uintptr_t(src), size);
            for(; ; )
            {
                uintptr_t addr = {};
                if(std::tie(hbits, addr) = next(gocpp::recv(hbits)); addr == 0)
                {
                    break;
                }
                auto v = *(unsafe::Pointer*)(unsafe::Pointer(addr));
                if(cgoIsGoPointer(v) && ! isPinned(v))
                {
                    go_throw(cgoWriteBarrierFail);
                }
            }
        }
    }

    void cgoCheckBits(unsafe::Pointer src, unsigned char* gcbits, uintptr_t off, uintptr_t size)
    {
        auto skipMask = off / goarch::PtrSize / 8;
        auto skipBytes = skipMask * goarch::PtrSize * 8;
        auto ptrmask = addb(gcbits, skipMask);
        src = add(src, skipBytes);
        off -= skipBytes;
        size += off;
        uint32_t bits = {};
        for(auto i = uintptr_t(0); i < size; i += goarch::PtrSize)
        {
            if(i & (goarch::PtrSize * 8 - 1) == 0)
            {
                bits = uint32_t(*ptrmask);
                ptrmask = addb(ptrmask, 1);
            }
            else
            {
                bits >>= 1;
            }
            if(off > 0)
            {
                off -= goarch::PtrSize;
            }
            else
            {
                if(bits & 1 != 0)
                {
                    auto v = *(unsafe::Pointer*)(add(src, i));
                    if(cgoIsGoPointer(v) && ! isPinned(v))
                    {
                        go_throw(cgoWriteBarrierFail);
                    }
                }
            }
        }
    }

    void cgoCheckUsingType(struct _type* typ, unsafe::Pointer src, uintptr_t off, uintptr_t size)
    {
        if(typ->PtrBytes == 0)
        {
            return;
        }
        if(typ->PtrBytes <= off)
        {
            return;
        }
        if(auto ptrdataSize = typ->PtrBytes - off; size > ptrdataSize)
        {
            size = ptrdataSize;
        }
        if(typ->Kind_ & kindGCProg == 0)
        {
            cgoCheckBits(src, typ->GCData, off, size);
            return;
        }
        //Go switch emulation
        {
            auto condition = typ->Kind_ & kindMask;
            int conditionId = -1;
            else if(condition == kindArray) { conditionId = 0; }
            else if(condition == kindStruct) { conditionId = 1; }
            switch(conditionId)
            {
                default:
                    go_throw("can't happen");
                    break;
                case 0:
                    auto at = (arraytype*)(unsafe::Pointer(typ));
                    for(auto i = uintptr_t(0); i < at->Len; i++)
                    {
                        if(off < at->Elem->Size_)
                        {
                            cgoCheckUsingType(at->Elem, src, off, size);
                        }
                        src = add(src, at->Elem->Size_);
                        auto skipped = off;
                        if(skipped > at->Elem->Size_)
                        {
                            skipped = at->Elem->Size_;
                        }
                        auto checked = at->Elem->Size_ - skipped;
                        off -= skipped;
                        if(size <= checked)
                        {
                            return;
                        }
                        size -= checked;
                    }
                    break;
                case 1:
                    auto st = (structtype*)(unsafe::Pointer(typ));
                    for(auto [gocpp_ignored, f] : st->Fields)
                    {
                        if(off < f.Typ->Size_)
                        {
                            cgoCheckUsingType(f.Typ, src, off, size);
                        }
                        src = add(src, f.Typ->Size_);
                        auto skipped = off;
                        if(skipped > f.Typ->Size_)
                        {
                            skipped = f.Typ->Size_;
                        }
                        auto checked = f.Typ->Size_ - skipped;
                        off -= skipped;
                        if(size <= checked)
                        {
                            return;
                        }
                        size -= checked;
                    }
                    break;
            }
        }
    }

}

