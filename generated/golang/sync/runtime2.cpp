// generated by GoCpp from file '$(ImportDir)/sync/runtime2.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/runtime2.h"
#include "gocpp/support.h"

#include "golang/unsafe/unsafe.h"

namespace golang::sync
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Approximation of notifyList in runtime/sema.go. Size and alignment must
    // agree.
    
    template<typename T> requires gocpp::GoStruct<T>
    notifyList::operator T()
    {
        T result;
        result.wait = this->wait;
        result.notify = this->notify;
        result.lock = this->lock;
        result.head = this->head;
        result.tail = this->tail;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool notifyList::operator==(const T& ref) const
    {
        if (wait != ref.wait) return false;
        if (notify != ref.notify) return false;
        if (lock != ref.lock) return false;
        if (head != ref.head) return false;
        if (tail != ref.tail) return false;
        return true;
    }

    std::ostream& notifyList::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << wait;
        os << " " << notify;
        os << " " << lock;
        os << " " << head;
        os << " " << tail;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct notifyList& value)
    {
        return value.PrintTo(os);
    }

}

