// generated by GoCpp from file '$(ImportDir)/time/tick.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/time/tick.h"
#include "gocpp/support.h"

#include "golang/time/sleep.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::time
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace time::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Ticker::operator T()
    {
        T result;
        result.C = this->C;
        result.r = this->r;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Ticker::operator==(const T& ref) const
    {
        if (C != ref.C) return false;
        if (r != ref.r) return false;
        return true;
    }

    std::ostream& Ticker::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << C;
        os << " " << r;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Ticker& value)
    {
        return value.PrintTo(os);
    }

    struct Ticker* NewTicker(golang::time::Duration d)
    {
        if(d <= 0)
        {
            gocpp::panic("non-positive interval for NewTicker");
        }
        auto c = gocpp::make(gocpp::Tag<gocpp::channel<Time>>(), 1);
        auto t = gocpp::InitPtr<Ticker>([](Ticker& x) { x.C = c; x.r = gocpp::Init<runtimeTimer>([](runtimeTimer& x) { x.when = when(d); x.period = int64_t(d); x.f = sendTime; x.arg = c; }); });
        startTimer(& t->r);
        return t;
    }

    void rec::Stop(struct Ticker* t)
    {
        stopTimer(& t->r);
    }

    void rec::Reset(struct Ticker* t, golang::time::Duration d)
    {
        if(d <= 0)
        {
            gocpp::panic("non-positive interval for Ticker.Reset");
        }
        if(t->r.f == nullptr)
        {
            gocpp::panic("time: Reset called on uninitialized Ticker");
        }
        modTimer(& t->r, when(d), int64_t(d), t->r.f, t->r.arg, t->r.seq);
    }

    gocpp::channel<Time> Tick(golang::time::Duration d)
    {
        if(d <= 0)
        {
            return nullptr;
        }
        return NewTicker(d)->C;
    }

}

