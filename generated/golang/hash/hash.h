// generated by GoCpp from file '$(ImportDir)/hash/hash.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/hash.fwd.h"
#include "gocpp/support.h"

#include "golang/io/io.h"

namespace golang::hash
{
    struct Hash : gocpp::Interface
    {
        Hash(){}
        Hash(Hash& i) = default;
        Hash(const Hash& i) = default;
        Hash& operator=(Hash& i) = default;
        Hash& operator=(const Hash& i) = default;

        template<typename T>
        Hash(T& ref);

        template<typename T>
        Hash(const T& ref);

        template<typename T>
        Hash(T* ptr);

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IHash
        {
            virtual gocpp::slice<unsigned char> vSum(gocpp::slice<unsigned char> b) = 0;
            virtual void vReset() = 0;
            virtual int vSize() = 0;
            virtual int vBlockSize() = 0;
        };

        template<typename T, typename StoreT>
        struct HashImpl : IHash
        {
            explicit HashImpl(T* ptr)
            {
                value.reset(ptr);
            }

            gocpp::slice<unsigned char> vSum(gocpp::slice<unsigned char> b) override;

            void vReset() override;

            int vSize() override;

            int vBlockSize() override;

            StoreT value;
        };

        std::shared_ptr<IHash> value;
    };

    gocpp::slice<unsigned char> Sum(const gocpp::PtrRecv<Hash, false>& self, gocpp::slice<unsigned char> b);
    gocpp::slice<unsigned char> Sum(const gocpp::ObjRecv<Hash>& self, gocpp::slice<unsigned char> b);

    void Reset(const gocpp::PtrRecv<Hash, false>& self);
    void Reset(const gocpp::ObjRecv<Hash>& self);

    int Size(const gocpp::PtrRecv<Hash, false>& self);
    int Size(const gocpp::ObjRecv<Hash>& self);

    int BlockSize(const gocpp::PtrRecv<Hash, false>& self);
    int BlockSize(const gocpp::ObjRecv<Hash>& self);

    std::ostream& operator<<(std::ostream& os, const struct Hash& value);
    struct Hash32 : gocpp::Interface
    {
        Hash32(){}
        Hash32(Hash32& i) = default;
        Hash32(const Hash32& i) = default;
        Hash32& operator=(Hash32& i) = default;
        Hash32& operator=(const Hash32& i) = default;

        template<typename T>
        Hash32(T& ref);

        template<typename T>
        Hash32(const T& ref);

        template<typename T>
        Hash32(T* ptr);

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IHash32
        {
            virtual uint32_t vSum32() = 0;
        };

        template<typename T, typename StoreT>
        struct Hash32Impl : IHash32
        {
            explicit Hash32Impl(T* ptr)
            {
                value.reset(ptr);
            }

            uint32_t vSum32() override;

            StoreT value;
        };

        std::shared_ptr<IHash32> value;
    };

    uint32_t Sum32(const gocpp::PtrRecv<Hash32, false>& self);
    uint32_t Sum32(const gocpp::ObjRecv<Hash32>& self);

    std::ostream& operator<<(std::ostream& os, const struct Hash32& value);
    struct Hash64 : gocpp::Interface
    {
        Hash64(){}
        Hash64(Hash64& i) = default;
        Hash64(const Hash64& i) = default;
        Hash64& operator=(Hash64& i) = default;
        Hash64& operator=(const Hash64& i) = default;

        template<typename T>
        Hash64(T& ref);

        template<typename T>
        Hash64(const T& ref);

        template<typename T>
        Hash64(T* ptr);

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IHash64
        {
            virtual uint64_t vSum64() = 0;
        };

        template<typename T, typename StoreT>
        struct Hash64Impl : IHash64
        {
            explicit Hash64Impl(T* ptr)
            {
                value.reset(ptr);
            }

            uint64_t vSum64() override;

            StoreT value;
        };

        std::shared_ptr<IHash64> value;
    };

    uint64_t Sum64(const gocpp::PtrRecv<Hash64, false>& self);
    uint64_t Sum64(const gocpp::ObjRecv<Hash64>& self);

    std::ostream& operator<<(std::ostream& os, const struct Hash64& value);
}

