// generated by GoCpp from file '$(ImportDir)/image/geom.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/geom.fwd.h"
#include "gocpp/support.h"

#include "golang/image/color/color.h"
#include "golang/math/bits/bits.h"
#include "golang/strconv/itoa.h"

namespace golang::image
{
    struct Point
    {
        int X;
        int Y;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const Point& value);
    std::string String(Point p);
    Point Add(Point p, Point q);
    Point Sub(Point p, Point q);
    Point Mul(Point p, int k);
    Point Div(Point p, int k);
    bool In(Point p, Rectangle r);
    Point Mod(Point p, Rectangle r);
    bool Eq(Point p, Point q);
    Point Pt(int X, int Y);
    struct Rectangle
    {
        Point Min;
        Point Max;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const Rectangle& value);
    std::string String(Rectangle r);
    int Dx(Rectangle r);
    int Dy(Rectangle r);
    Point Size(Rectangle r);
    Rectangle Add(Rectangle r, Point p);
    Rectangle Sub(Rectangle r, Point p);
    Rectangle Inset(Rectangle r, int n);
    Rectangle Intersect(Rectangle r, Rectangle s);
    Rectangle Union(Rectangle r, Rectangle s);
    bool Empty(Rectangle r);
    bool Eq(Rectangle r, Rectangle s);
    bool Overlaps(Rectangle r, Rectangle s);
    bool In(Rectangle r, Rectangle s);
    Rectangle Canon(Rectangle r);
    color::Color At(Rectangle r, int x, int y);
    color::RGBA64 RGBA64At(Rectangle r, int x, int y);
    Rectangle Bounds(Rectangle r);
    color::Model ColorModel(Rectangle r);
    Rectangle Rect(int x0, int y0, int x1, int y1);
    int mul3NonNeg(int x, int y, int z);
    int add2NonNeg(int x, int y);
}

