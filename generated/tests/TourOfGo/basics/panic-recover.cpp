// generated by GoCpp from file 'tests/TourOfGo/basics/panic-recover.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/panic-recover.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    void main()
    {
        f();
        mocklib::Println("Returned normally from f.");
        if(auto r = gocpp::recover(); r != nullptr)
        {
            mocklib::Println("R should always be nil, r =", r);
        }
    }

    void f()
    {
        gocpp::Defer defer;
        try
        {
            defer.push_back([=]{ [=]() mutable -> void
            {
                if(auto r = gocpp::recover(); r != nullptr)
                {
                    mocklib::Println("Recovered in f", r);
                }
            }(); });
            defer.push_back([=]{ [=]() mutable -> void
            {
                mocklib::Println("Simple defer in f");
            }(); });
            mocklib::Println("Calling g.");
            g(0);
            mocklib::Println("Returned normally from g.");
        }
        catch(gocpp::GoPanic& gp)
        {
            defer.handlePanic(gp);
        }
    }

    void g(int i)
    {
        gocpp::Defer defer;
        try
        {
            defer.push_back([=]{ mocklib::Println("Defer1 in g", i); });
            if(i > 3)
            {
                mocklib::Println("Panicking!");
                gocpp::panic(mocklib::Sprint(i));
            }
            defer.push_back([=]{ mocklib::Println("Defer2 in g", i); });
            mocklib::Println("Printing in g", i);
            g(i + 1);
        }
        catch(gocpp::GoPanic& gp)
        {
            defer.handlePanic(gp);
        }
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
