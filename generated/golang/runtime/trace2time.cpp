// generated by GoCpp from file '$(ImportDir)/runtime/trace2time.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2time.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/cputicks.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lock_sema.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/profbuf.h"
#include "golang/runtime/runtime.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/stubs.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/time_nofake.h"
#include "golang/runtime/trace2.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"
#include "golang/runtime/trace2map.h"
#include "golang/runtime/trace2region.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2string.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Timestamps in trace are produced through either nanotime or cputicks
    // and divided by traceTimeDiv. nanotime is used everywhere except on
    // platforms where osHasLowResClock is true, because the system clock
    // isn't granular enough to get useful information out of a trace in
    // many cases.
    //
    // This makes absolute values of timestamp diffs smaller, and so they are
    // encoded in fewer bytes.
    //
    // The target resolution in all cases is 64 nanoseconds.
    // This is based on the fact that fundamentally the execution tracer won't emit
    // events more frequently than roughly every 200 ns or so, because that's roughly
    // how long it takes to call through the scheduler.
    // We could be more aggressive and bump this up to 128 ns while still getting
    // useful data, but the extra bit doesn't save us that much and the headroom is
    // nice to have.
    //
    // Hitting this target resolution is easy in the nanotime case: just pick a
    // division of 64. In the cputicks case it's a bit more complex.
    //
    // For x86, on a 3 GHz machine, we'd want to divide by 3*64 to hit our target.
    // To keep the division operation efficient, we round that up to 4*64, or 256.
    // Given what cputicks represents, we use this on all other platforms except
    // for PowerPC.
    // The suggested increment frequency for PowerPC's time base register is
    // 512 MHz according to Power ISA v2.07 section 6.2, so we use 32 on ppc64
    // and ppc64le.
    // traceTime represents a timestamp for the trace.
    // traceClockNow returns a monotonic timestamp. The clock this function gets
    // the timestamp from is specific to tracing, and shouldn't be mixed with other
    // clock sources.
    //
    // nosplit because it's called from exitsyscall, which is nosplit.
    //
    //go:nosplit
    runtime::traceTime traceClockNow()
    {
        if(osHasLowResClock)
        {
            return traceTime(cputicks() / traceTimeDiv);
        }
        return traceTime(nanotime() / traceTimeDiv);
    }

    // traceClockUnitsPerSecond estimates the number of trace clock units per
    // second that elapse.
    uint64_t traceClockUnitsPerSecond()
    {
        if(osHasLowResClock)
        {
            return uint64_t(ticksPerSecond() / traceTimeDiv);
        }
        return uint64_t(1.0 / double(traceTimeDiv) * 1e9);
    }

    // traceFrequency writes a batch with a single EvFrequency event.
    //
    // freq is the number of trace clock units per second.
    void traceFrequency(uintptr_t gen)
    {
        auto w = unsafeTraceWriter(gen, nullptr);
        std::tie(w, gocpp_id_0) = rec::ensure(gocpp::recv(w), 1 + traceBytesPerNumber);
        rec::byte(gocpp::recv(w), (unsigned char)(traceEvFrequency));
        rec::varint(gocpp::recv(w), traceClockUnitsPerSecond());
        systemstack([=]() mutable -> void
        {
            lock(& trace.lock);
            traceBufFlush(w.traceBuf, gen);
            unlock(& trace.lock);
        });
    }

}

