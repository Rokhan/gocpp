// generated by GoCpp from file '$(ImportDir)/runtime/runtime2.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/runtime2.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/internal/goarch/goarch.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/histogram.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lfstack.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagecache.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mwbbuf.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/proc.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/runtime/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    
    template<typename T> requires gocpp::GoStruct<T>
    mutex::operator T()
    {
        T result;
        result.key = this->key;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool mutex::operator==(const T& ref) const
    {
        if (key != ref.key) return false;
        return true;
    }

    std::ostream& mutex::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << key;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct mutex& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    note::operator T()
    {
        T result;
        result.key = this->key;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool note::operator==(const T& ref) const
    {
        if (key != ref.key) return false;
        return true;
    }

    std::ostream& note::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << key;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct note& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    funcval::operator T()
    {
        T result;
        result.fn = this->fn;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool funcval::operator==(const T& ref) const
    {
        if (fn != ref.fn) return false;
        return true;
    }

    std::ostream& funcval::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << fn;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct funcval& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    iface::operator T()
    {
        T result;
        result.tab = this->tab;
        result.data = this->data;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool iface::operator==(const T& ref) const
    {
        if (tab != ref.tab) return false;
        if (data != ref.data) return false;
        return true;
    }

    std::ostream& iface::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << tab;
        os << " " << data;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct iface& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    eface::operator T()
    {
        T result;
        result._type = this->_type;
        result.data = this->data;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool eface::operator==(const T& ref) const
    {
        if (_type != ref._type) return false;
        if (data != ref.data) return false;
        return true;
    }

    std::ostream& eface::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _type;
        os << " " << data;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct eface& value)
    {
        return value.PrintTo(os);
    }

    struct eface* efaceOf(go_any* ep)
    {
        return (eface*)(unsafe::Pointer(ep));
    }

    struct g* ptr(guintptr gp)
    {
        return (g*)(unsafe::Pointer(gp));
    }

    void set(guintptr* gp, struct g* g)
    {
        *gp = guintptr(unsafe::Pointer(g));
    }

    bool cas(guintptr* gp, guintptr old, guintptr go_new)
    {
        return atomic::Casuintptr((uintptr_t*)(unsafe::Pointer(gp)), uintptr_t(old), uintptr_t(go_new));
    }

    guintptr guintptr(struct g* gp)
    {
        return guintptr(unsafe::Pointer(gp));
    }

    void setGNoWB(struct g** gp, struct g* go_new)
    {
        set(gocpp::recv((guintptr*)(unsafe::Pointer(gp))), go_new);
    }

    struct p* ptr(puintptr pp)
    {
        return (p*)(unsafe::Pointer(pp));
    }

    void set(puintptr* pp, struct p* p)
    {
        *pp = puintptr(unsafe::Pointer(p));
    }

    struct m* ptr(muintptr mp)
    {
        return (m*)(unsafe::Pointer(mp));
    }

    void set(muintptr* mp, struct m* m)
    {
        *mp = muintptr(unsafe::Pointer(m));
    }

    void setMNoWB(struct m** mp, struct m* go_new)
    {
        set(gocpp::recv((muintptr*)(unsafe::Pointer(mp))), go_new);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    gobuf::operator T()
    {
        T result;
        result.sp = this->sp;
        result.pc = this->pc;
        result.g = this->g;
        result.ctxt = this->ctxt;
        result.ret = this->ret;
        result.lr = this->lr;
        result.bp = this->bp;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool gobuf::operator==(const T& ref) const
    {
        if (sp != ref.sp) return false;
        if (pc != ref.pc) return false;
        if (g != ref.g) return false;
        if (ctxt != ref.ctxt) return false;
        if (ret != ref.ret) return false;
        if (lr != ref.lr) return false;
        if (bp != ref.bp) return false;
        return true;
    }

    std::ostream& gobuf::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << sp;
        os << " " << pc;
        os << " " << g;
        os << " " << ctxt;
        os << " " << ret;
        os << " " << lr;
        os << " " << bp;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct gobuf& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    sudog::operator T()
    {
        T result;
        result.g = this->g;
        result.next = this->next;
        result.prev = this->prev;
        result.elem = this->elem;
        result.acquiretime = this->acquiretime;
        result.releasetime = this->releasetime;
        result.ticket = this->ticket;
        result.isSelect = this->isSelect;
        result.success = this->success;
        result.waiters = this->waiters;
        result.parent = this->parent;
        result.waitlink = this->waitlink;
        result.waittail = this->waittail;
        result.c = this->c;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool sudog::operator==(const T& ref) const
    {
        if (g != ref.g) return false;
        if (next != ref.next) return false;
        if (prev != ref.prev) return false;
        if (elem != ref.elem) return false;
        if (acquiretime != ref.acquiretime) return false;
        if (releasetime != ref.releasetime) return false;
        if (ticket != ref.ticket) return false;
        if (isSelect != ref.isSelect) return false;
        if (success != ref.success) return false;
        if (waiters != ref.waiters) return false;
        if (parent != ref.parent) return false;
        if (waitlink != ref.waitlink) return false;
        if (waittail != ref.waittail) return false;
        if (c != ref.c) return false;
        return true;
    }

    std::ostream& sudog::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << g;
        os << " " << next;
        os << " " << prev;
        os << " " << elem;
        os << " " << acquiretime;
        os << " " << releasetime;
        os << " " << ticket;
        os << " " << isSelect;
        os << " " << success;
        os << " " << waiters;
        os << " " << parent;
        os << " " << waitlink;
        os << " " << waittail;
        os << " " << c;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct sudog& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    libcall::operator T()
    {
        T result;
        result.fn = this->fn;
        result.n = this->n;
        result.args = this->args;
        result.r1 = this->r1;
        result.r2 = this->r2;
        result.err = this->err;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool libcall::operator==(const T& ref) const
    {
        if (fn != ref.fn) return false;
        if (n != ref.n) return false;
        if (args != ref.args) return false;
        if (r1 != ref.r1) return false;
        if (r2 != ref.r2) return false;
        if (err != ref.err) return false;
        return true;
    }

    std::ostream& libcall::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << fn;
        os << " " << n;
        os << " " << args;
        os << " " << r1;
        os << " " << r2;
        os << " " << err;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct libcall& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    stack::operator T()
    {
        T result;
        result.lo = this->lo;
        result.hi = this->hi;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool stack::operator==(const T& ref) const
    {
        if (lo != ref.lo) return false;
        if (hi != ref.hi) return false;
        return true;
    }

    std::ostream& stack::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << lo;
        os << " " << hi;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct stack& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    heldLockInfo::operator T()
    {
        T result;
        result.lockAddr = this->lockAddr;
        result.rank = this->rank;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool heldLockInfo::operator==(const T& ref) const
    {
        if (lockAddr != ref.lockAddr) return false;
        if (rank != ref.rank) return false;
        return true;
    }

    std::ostream& heldLockInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << lockAddr;
        os << " " << rank;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct heldLockInfo& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    g::operator T()
    {
        T result;
        result.stack = this->stack;
        result.stackguard0 = this->stackguard0;
        result.stackguard1 = this->stackguard1;
        result._panic = this->_panic;
        result._defer = this->_defer;
        result.m = this->m;
        result.sched = this->sched;
        result.syscallsp = this->syscallsp;
        result.syscallpc = this->syscallpc;
        result.stktopsp = this->stktopsp;
        result.param = this->param;
        result.atomicstatus = this->atomicstatus;
        result.stackLock = this->stackLock;
        result.goid = this->goid;
        result.schedlink = this->schedlink;
        result.waitsince = this->waitsince;
        result.waitreason = this->waitreason;
        result.preempt = this->preempt;
        result.preemptStop = this->preemptStop;
        result.preemptShrink = this->preemptShrink;
        result.asyncSafePoint = this->asyncSafePoint;
        result.paniconfault = this->paniconfault;
        result.gcscandone = this->gcscandone;
        result.throwsplit = this->throwsplit;
        result.activeStackChans = this->activeStackChans;
        result.parkingOnChan = this->parkingOnChan;
        result.inMarkAssist = this->inMarkAssist;
        result.coroexit = this->coroexit;
        result.raceignore = this->raceignore;
        result.nocgocallback = this->nocgocallback;
        result.tracking = this->tracking;
        result.trackingSeq = this->trackingSeq;
        result.trackingStamp = this->trackingStamp;
        result.runnableTime = this->runnableTime;
        result.lockedm = this->lockedm;
        result.sig = this->sig;
        result.writebuf = this->writebuf;
        result.sigcode0 = this->sigcode0;
        result.sigcode1 = this->sigcode1;
        result.sigpc = this->sigpc;
        result.parentGoid = this->parentGoid;
        result.gopc = this->gopc;
        result.ancestors = this->ancestors;
        result.startpc = this->startpc;
        result.racectx = this->racectx;
        result.waiting = this->waiting;
        result.cgoCtxt = this->cgoCtxt;
        result.labels = this->labels;
        result.timer = this->timer;
        result.selectDone = this->selectDone;
        result.coroarg = this->coroarg;
        result.goroutineProfiled = this->goroutineProfiled;
        result.trace = this->trace;
        result.gcAssistBytes = this->gcAssistBytes;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool g::operator==(const T& ref) const
    {
        if (stack != ref.stack) return false;
        if (stackguard0 != ref.stackguard0) return false;
        if (stackguard1 != ref.stackguard1) return false;
        if (_panic != ref._panic) return false;
        if (_defer != ref._defer) return false;
        if (m != ref.m) return false;
        if (sched != ref.sched) return false;
        if (syscallsp != ref.syscallsp) return false;
        if (syscallpc != ref.syscallpc) return false;
        if (stktopsp != ref.stktopsp) return false;
        if (param != ref.param) return false;
        if (atomicstatus != ref.atomicstatus) return false;
        if (stackLock != ref.stackLock) return false;
        if (goid != ref.goid) return false;
        if (schedlink != ref.schedlink) return false;
        if (waitsince != ref.waitsince) return false;
        if (waitreason != ref.waitreason) return false;
        if (preempt != ref.preempt) return false;
        if (preemptStop != ref.preemptStop) return false;
        if (preemptShrink != ref.preemptShrink) return false;
        if (asyncSafePoint != ref.asyncSafePoint) return false;
        if (paniconfault != ref.paniconfault) return false;
        if (gcscandone != ref.gcscandone) return false;
        if (throwsplit != ref.throwsplit) return false;
        if (activeStackChans != ref.activeStackChans) return false;
        if (parkingOnChan != ref.parkingOnChan) return false;
        if (inMarkAssist != ref.inMarkAssist) return false;
        if (coroexit != ref.coroexit) return false;
        if (raceignore != ref.raceignore) return false;
        if (nocgocallback != ref.nocgocallback) return false;
        if (tracking != ref.tracking) return false;
        if (trackingSeq != ref.trackingSeq) return false;
        if (trackingStamp != ref.trackingStamp) return false;
        if (runnableTime != ref.runnableTime) return false;
        if (lockedm != ref.lockedm) return false;
        if (sig != ref.sig) return false;
        if (writebuf != ref.writebuf) return false;
        if (sigcode0 != ref.sigcode0) return false;
        if (sigcode1 != ref.sigcode1) return false;
        if (sigpc != ref.sigpc) return false;
        if (parentGoid != ref.parentGoid) return false;
        if (gopc != ref.gopc) return false;
        if (ancestors != ref.ancestors) return false;
        if (startpc != ref.startpc) return false;
        if (racectx != ref.racectx) return false;
        if (waiting != ref.waiting) return false;
        if (cgoCtxt != ref.cgoCtxt) return false;
        if (labels != ref.labels) return false;
        if (timer != ref.timer) return false;
        if (selectDone != ref.selectDone) return false;
        if (coroarg != ref.coroarg) return false;
        if (goroutineProfiled != ref.goroutineProfiled) return false;
        if (trace != ref.trace) return false;
        if (gcAssistBytes != ref.gcAssistBytes) return false;
        return true;
    }

    std::ostream& g::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << stack;
        os << " " << stackguard0;
        os << " " << stackguard1;
        os << " " << _panic;
        os << " " << _defer;
        os << " " << m;
        os << " " << sched;
        os << " " << syscallsp;
        os << " " << syscallpc;
        os << " " << stktopsp;
        os << " " << param;
        os << " " << atomicstatus;
        os << " " << stackLock;
        os << " " << goid;
        os << " " << schedlink;
        os << " " << waitsince;
        os << " " << waitreason;
        os << " " << preempt;
        os << " " << preemptStop;
        os << " " << preemptShrink;
        os << " " << asyncSafePoint;
        os << " " << paniconfault;
        os << " " << gcscandone;
        os << " " << throwsplit;
        os << " " << activeStackChans;
        os << " " << parkingOnChan;
        os << " " << inMarkAssist;
        os << " " << coroexit;
        os << " " << raceignore;
        os << " " << nocgocallback;
        os << " " << tracking;
        os << " " << trackingSeq;
        os << " " << trackingStamp;
        os << " " << runnableTime;
        os << " " << lockedm;
        os << " " << sig;
        os << " " << writebuf;
        os << " " << sigcode0;
        os << " " << sigcode1;
        os << " " << sigpc;
        os << " " << parentGoid;
        os << " " << gopc;
        os << " " << ancestors;
        os << " " << startpc;
        os << " " << racectx;
        os << " " << waiting;
        os << " " << cgoCtxt;
        os << " " << labels;
        os << " " << timer;
        os << " " << selectDone;
        os << " " << coroarg;
        os << " " << goroutineProfiled;
        os << " " << trace;
        os << " " << gcAssistBytes;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct g& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    m::operator T()
    {
        T result;
        result.g0 = this->g0;
        result.morebuf = this->morebuf;
        result.divmod = this->divmod;
        result._ = this->_;
        result.procid = this->procid;
        result.gsignal = this->gsignal;
        result.goSigStack = this->goSigStack;
        result.sigmask = this->sigmask;
        result.tls = this->tls;
        result.mstartfn = this->mstartfn;
        result.curg = this->curg;
        result.caughtsig = this->caughtsig;
        result.p = this->p;
        result.nextp = this->nextp;
        result.oldp = this->oldp;
        result.id = this->id;
        result.mallocing = this->mallocing;
        result.throwing = this->throwing;
        result.preemptoff = this->preemptoff;
        result.locks = this->locks;
        result.dying = this->dying;
        result.profilehz = this->profilehz;
        result.spinning = this->spinning;
        result.blocked = this->blocked;
        result.newSigstack = this->newSigstack;
        result.printlock = this->printlock;
        result.incgo = this->incgo;
        result.isextra = this->isextra;
        result.isExtraInC = this->isExtraInC;
        result.isExtraInSig = this->isExtraInSig;
        result.freeWait = this->freeWait;
        result.needextram = this->needextram;
        result.traceback = this->traceback;
        result.ncgocall = this->ncgocall;
        result.ncgo = this->ncgo;
        result.cgoCallersUse = this->cgoCallersUse;
        result.cgoCallers = this->cgoCallers;
        result.park = this->park;
        result.alllink = this->alllink;
        result.schedlink = this->schedlink;
        result.lockedg = this->lockedg;
        result.createstack = this->createstack;
        result.lockedExt = this->lockedExt;
        result.lockedInt = this->lockedInt;
        result.nextwaitm = this->nextwaitm;
        result.mLockProfile = this->mLockProfile;
        result.waitunlockf = this->waitunlockf;
        result.waitlock = this->waitlock;
        result.waitTraceBlockReason = this->waitTraceBlockReason;
        result.waitTraceSkip = this->waitTraceSkip;
        result.syscalltick = this->syscalltick;
        result.freelink = this->freelink;
        result.trace = this->trace;
        result.libcall = this->libcall;
        result.libcallpc = this->libcallpc;
        result.libcallsp = this->libcallsp;
        result.libcallg = this->libcallg;
        result.syscall = this->syscall;
        result.vdsoSP = this->vdsoSP;
        result.vdsoPC = this->vdsoPC;
        result.preemptGen = this->preemptGen;
        result.signalPending = this->signalPending;
        result.pcvalueCache = this->pcvalueCache;
        result.chacha8 = this->chacha8;
        result.cheaprand = this->cheaprand;
        result.locksHeldLen = this->locksHeldLen;
        result.locksHeld = this->locksHeld;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool m::operator==(const T& ref) const
    {
        if (g0 != ref.g0) return false;
        if (morebuf != ref.morebuf) return false;
        if (divmod != ref.divmod) return false;
        if (_ != ref._) return false;
        if (procid != ref.procid) return false;
        if (gsignal != ref.gsignal) return false;
        if (goSigStack != ref.goSigStack) return false;
        if (sigmask != ref.sigmask) return false;
        if (tls != ref.tls) return false;
        if (mstartfn != ref.mstartfn) return false;
        if (curg != ref.curg) return false;
        if (caughtsig != ref.caughtsig) return false;
        if (p != ref.p) return false;
        if (nextp != ref.nextp) return false;
        if (oldp != ref.oldp) return false;
        if (id != ref.id) return false;
        if (mallocing != ref.mallocing) return false;
        if (throwing != ref.throwing) return false;
        if (preemptoff != ref.preemptoff) return false;
        if (locks != ref.locks) return false;
        if (dying != ref.dying) return false;
        if (profilehz != ref.profilehz) return false;
        if (spinning != ref.spinning) return false;
        if (blocked != ref.blocked) return false;
        if (newSigstack != ref.newSigstack) return false;
        if (printlock != ref.printlock) return false;
        if (incgo != ref.incgo) return false;
        if (isextra != ref.isextra) return false;
        if (isExtraInC != ref.isExtraInC) return false;
        if (isExtraInSig != ref.isExtraInSig) return false;
        if (freeWait != ref.freeWait) return false;
        if (needextram != ref.needextram) return false;
        if (traceback != ref.traceback) return false;
        if (ncgocall != ref.ncgocall) return false;
        if (ncgo != ref.ncgo) return false;
        if (cgoCallersUse != ref.cgoCallersUse) return false;
        if (cgoCallers != ref.cgoCallers) return false;
        if (park != ref.park) return false;
        if (alllink != ref.alllink) return false;
        if (schedlink != ref.schedlink) return false;
        if (lockedg != ref.lockedg) return false;
        if (createstack != ref.createstack) return false;
        if (lockedExt != ref.lockedExt) return false;
        if (lockedInt != ref.lockedInt) return false;
        if (nextwaitm != ref.nextwaitm) return false;
        if (mLockProfile != ref.mLockProfile) return false;
        if (waitunlockf != ref.waitunlockf) return false;
        if (waitlock != ref.waitlock) return false;
        if (waitTraceBlockReason != ref.waitTraceBlockReason) return false;
        if (waitTraceSkip != ref.waitTraceSkip) return false;
        if (syscalltick != ref.syscalltick) return false;
        if (freelink != ref.freelink) return false;
        if (trace != ref.trace) return false;
        if (libcall != ref.libcall) return false;
        if (libcallpc != ref.libcallpc) return false;
        if (libcallsp != ref.libcallsp) return false;
        if (libcallg != ref.libcallg) return false;
        if (syscall != ref.syscall) return false;
        if (vdsoSP != ref.vdsoSP) return false;
        if (vdsoPC != ref.vdsoPC) return false;
        if (preemptGen != ref.preemptGen) return false;
        if (signalPending != ref.signalPending) return false;
        if (pcvalueCache != ref.pcvalueCache) return false;
        if (chacha8 != ref.chacha8) return false;
        if (cheaprand != ref.cheaprand) return false;
        if (locksHeldLen != ref.locksHeldLen) return false;
        if (locksHeld != ref.locksHeld) return false;
        return true;
    }

    std::ostream& m::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << g0;
        os << " " << morebuf;
        os << " " << divmod;
        os << " " << _;
        os << " " << procid;
        os << " " << gsignal;
        os << " " << goSigStack;
        os << " " << sigmask;
        os << " " << tls;
        os << " " << mstartfn;
        os << " " << curg;
        os << " " << caughtsig;
        os << " " << p;
        os << " " << nextp;
        os << " " << oldp;
        os << " " << id;
        os << " " << mallocing;
        os << " " << throwing;
        os << " " << preemptoff;
        os << " " << locks;
        os << " " << dying;
        os << " " << profilehz;
        os << " " << spinning;
        os << " " << blocked;
        os << " " << newSigstack;
        os << " " << printlock;
        os << " " << incgo;
        os << " " << isextra;
        os << " " << isExtraInC;
        os << " " << isExtraInSig;
        os << " " << freeWait;
        os << " " << needextram;
        os << " " << traceback;
        os << " " << ncgocall;
        os << " " << ncgo;
        os << " " << cgoCallersUse;
        os << " " << cgoCallers;
        os << " " << park;
        os << " " << alllink;
        os << " " << schedlink;
        os << " " << lockedg;
        os << " " << createstack;
        os << " " << lockedExt;
        os << " " << lockedInt;
        os << " " << nextwaitm;
        os << " " << mLockProfile;
        os << " " << waitunlockf;
        os << " " << waitlock;
        os << " " << waitTraceBlockReason;
        os << " " << waitTraceSkip;
        os << " " << syscalltick;
        os << " " << freelink;
        os << " " << trace;
        os << " " << libcall;
        os << " " << libcallpc;
        os << " " << libcallsp;
        os << " " << libcallg;
        os << " " << syscall;
        os << " " << vdsoSP;
        os << " " << vdsoPC;
        os << " " << preemptGen;
        os << " " << signalPending;
        os << " " << pcvalueCache;
        os << " " << chacha8;
        os << " " << cheaprand;
        os << " " << locksHeldLen;
        os << " " << locksHeld;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct m& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    p::operator T()
    {
        T result;
        result.id = this->id;
        result.status = this->status;
        result.link = this->link;
        result.schedtick = this->schedtick;
        result.syscalltick = this->syscalltick;
        result.sysmontick = this->sysmontick;
        result.m = this->m;
        result.mcache = this->mcache;
        result.pcache = this->pcache;
        result.raceprocctx = this->raceprocctx;
        result.deferpool = this->deferpool;
        result.deferpoolbuf = this->deferpoolbuf;
        result.goidcache = this->goidcache;
        result.goidcacheend = this->goidcacheend;
        result.runqhead = this->runqhead;
        result.runqtail = this->runqtail;
        result.runq = this->runq;
        result.runnext = this->runnext;
        result.gFree = this->gFree;
        result.sudogcache = this->sudogcache;
        result.sudogbuf = this->sudogbuf;
        result.mspancache = this->mspancache;
        result.pinnerCache = this->pinnerCache;
        result.trace = this->trace;
        result.palloc = this->palloc;
        result.timer0When = this->timer0When;
        result.timerModifiedEarliest = this->timerModifiedEarliest;
        result.gcAssistTime = this->gcAssistTime;
        result.gcFractionalMarkTime = this->gcFractionalMarkTime;
        result.limiterEvent = this->limiterEvent;
        result.gcMarkWorkerMode = this->gcMarkWorkerMode;
        result.gcMarkWorkerStartTime = this->gcMarkWorkerStartTime;
        result.gcw = this->gcw;
        result.wbBuf = this->wbBuf;
        result.runSafePointFn = this->runSafePointFn;
        result.statsSeq = this->statsSeq;
        result.timersLock = this->timersLock;
        result.timers = this->timers;
        result.numTimers = this->numTimers;
        result.deletedTimers = this->deletedTimers;
        result.timerRaceCtx = this->timerRaceCtx;
        result.maxStackScanDelta = this->maxStackScanDelta;
        result.scannedStackSize = this->scannedStackSize;
        result.scannedStacks = this->scannedStacks;
        result.preempt = this->preempt;
        result.pageTraceBuf = this->pageTraceBuf;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool p::operator==(const T& ref) const
    {
        if (id != ref.id) return false;
        if (status != ref.status) return false;
        if (link != ref.link) return false;
        if (schedtick != ref.schedtick) return false;
        if (syscalltick != ref.syscalltick) return false;
        if (sysmontick != ref.sysmontick) return false;
        if (m != ref.m) return false;
        if (mcache != ref.mcache) return false;
        if (pcache != ref.pcache) return false;
        if (raceprocctx != ref.raceprocctx) return false;
        if (deferpool != ref.deferpool) return false;
        if (deferpoolbuf != ref.deferpoolbuf) return false;
        if (goidcache != ref.goidcache) return false;
        if (goidcacheend != ref.goidcacheend) return false;
        if (runqhead != ref.runqhead) return false;
        if (runqtail != ref.runqtail) return false;
        if (runq != ref.runq) return false;
        if (runnext != ref.runnext) return false;
        if (gFree != ref.gFree) return false;
        if (sudogcache != ref.sudogcache) return false;
        if (sudogbuf != ref.sudogbuf) return false;
        if (mspancache != ref.mspancache) return false;
        if (pinnerCache != ref.pinnerCache) return false;
        if (trace != ref.trace) return false;
        if (palloc != ref.palloc) return false;
        if (timer0When != ref.timer0When) return false;
        if (timerModifiedEarliest != ref.timerModifiedEarliest) return false;
        if (gcAssistTime != ref.gcAssistTime) return false;
        if (gcFractionalMarkTime != ref.gcFractionalMarkTime) return false;
        if (limiterEvent != ref.limiterEvent) return false;
        if (gcMarkWorkerMode != ref.gcMarkWorkerMode) return false;
        if (gcMarkWorkerStartTime != ref.gcMarkWorkerStartTime) return false;
        if (gcw != ref.gcw) return false;
        if (wbBuf != ref.wbBuf) return false;
        if (runSafePointFn != ref.runSafePointFn) return false;
        if (statsSeq != ref.statsSeq) return false;
        if (timersLock != ref.timersLock) return false;
        if (timers != ref.timers) return false;
        if (numTimers != ref.numTimers) return false;
        if (deletedTimers != ref.deletedTimers) return false;
        if (timerRaceCtx != ref.timerRaceCtx) return false;
        if (maxStackScanDelta != ref.maxStackScanDelta) return false;
        if (scannedStackSize != ref.scannedStackSize) return false;
        if (scannedStacks != ref.scannedStacks) return false;
        if (preempt != ref.preempt) return false;
        if (pageTraceBuf != ref.pageTraceBuf) return false;
        return true;
    }

    std::ostream& p::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << id;
        os << " " << status;
        os << " " << link;
        os << " " << schedtick;
        os << " " << syscalltick;
        os << " " << sysmontick;
        os << " " << m;
        os << " " << mcache;
        os << " " << pcache;
        os << " " << raceprocctx;
        os << " " << deferpool;
        os << " " << deferpoolbuf;
        os << " " << goidcache;
        os << " " << goidcacheend;
        os << " " << runqhead;
        os << " " << runqtail;
        os << " " << runq;
        os << " " << runnext;
        os << " " << gFree;
        os << " " << sudogcache;
        os << " " << sudogbuf;
        os << " " << mspancache;
        os << " " << pinnerCache;
        os << " " << trace;
        os << " " << palloc;
        os << " " << timer0When;
        os << " " << timerModifiedEarliest;
        os << " " << gcAssistTime;
        os << " " << gcFractionalMarkTime;
        os << " " << limiterEvent;
        os << " " << gcMarkWorkerMode;
        os << " " << gcMarkWorkerStartTime;
        os << " " << gcw;
        os << " " << wbBuf;
        os << " " << runSafePointFn;
        os << " " << statsSeq;
        os << " " << timersLock;
        os << " " << timers;
        os << " " << numTimers;
        os << " " << deletedTimers;
        os << " " << timerRaceCtx;
        os << " " << maxStackScanDelta;
        os << " " << scannedStackSize;
        os << " " << scannedStacks;
        os << " " << preempt;
        os << " " << pageTraceBuf;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct p& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    schedt::operator T()
    {
        T result;
        result.goidgen = this->goidgen;
        result.lastpoll = this->lastpoll;
        result.pollUntil = this->pollUntil;
        result.lock = this->lock;
        result.midle = this->midle;
        result.nmidle = this->nmidle;
        result.nmidlelocked = this->nmidlelocked;
        result.mnext = this->mnext;
        result.maxmcount = this->maxmcount;
        result.nmsys = this->nmsys;
        result.nmfreed = this->nmfreed;
        result.ngsys = this->ngsys;
        result.pidle = this->pidle;
        result.npidle = this->npidle;
        result.nmspinning = this->nmspinning;
        result.needspinning = this->needspinning;
        result.runq = this->runq;
        result.runqsize = this->runqsize;
        result.disable = this->disable;
        result.gFree = this->gFree;
        result.sudoglock = this->sudoglock;
        result.sudogcache = this->sudogcache;
        result.deferlock = this->deferlock;
        result.deferpool = this->deferpool;
        result.freem = this->freem;
        result.gcwaiting = this->gcwaiting;
        result.stopwait = this->stopwait;
        result.stopnote = this->stopnote;
        result.sysmonwait = this->sysmonwait;
        result.sysmonnote = this->sysmonnote;
        result.safePointFn = this->safePointFn;
        result.safePointWait = this->safePointWait;
        result.safePointNote = this->safePointNote;
        result.profilehz = this->profilehz;
        result.procresizetime = this->procresizetime;
        result.totaltime = this->totaltime;
        result.sysmonlock = this->sysmonlock;
        result.timeToRun = this->timeToRun;
        result.idleTime = this->idleTime;
        result.totalMutexWaitTime = this->totalMutexWaitTime;
        result.stwStoppingTimeGC = this->stwStoppingTimeGC;
        result.stwStoppingTimeOther = this->stwStoppingTimeOther;
        result.stwTotalTimeGC = this->stwTotalTimeGC;
        result.stwTotalTimeOther = this->stwTotalTimeOther;
        result.totalRuntimeLockWaitTime = this->totalRuntimeLockWaitTime;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool schedt::operator==(const T& ref) const
    {
        if (goidgen != ref.goidgen) return false;
        if (lastpoll != ref.lastpoll) return false;
        if (pollUntil != ref.pollUntil) return false;
        if (lock != ref.lock) return false;
        if (midle != ref.midle) return false;
        if (nmidle != ref.nmidle) return false;
        if (nmidlelocked != ref.nmidlelocked) return false;
        if (mnext != ref.mnext) return false;
        if (maxmcount != ref.maxmcount) return false;
        if (nmsys != ref.nmsys) return false;
        if (nmfreed != ref.nmfreed) return false;
        if (ngsys != ref.ngsys) return false;
        if (pidle != ref.pidle) return false;
        if (npidle != ref.npidle) return false;
        if (nmspinning != ref.nmspinning) return false;
        if (needspinning != ref.needspinning) return false;
        if (runq != ref.runq) return false;
        if (runqsize != ref.runqsize) return false;
        if (disable != ref.disable) return false;
        if (gFree != ref.gFree) return false;
        if (sudoglock != ref.sudoglock) return false;
        if (sudogcache != ref.sudogcache) return false;
        if (deferlock != ref.deferlock) return false;
        if (deferpool != ref.deferpool) return false;
        if (freem != ref.freem) return false;
        if (gcwaiting != ref.gcwaiting) return false;
        if (stopwait != ref.stopwait) return false;
        if (stopnote != ref.stopnote) return false;
        if (sysmonwait != ref.sysmonwait) return false;
        if (sysmonnote != ref.sysmonnote) return false;
        if (safePointFn != ref.safePointFn) return false;
        if (safePointWait != ref.safePointWait) return false;
        if (safePointNote != ref.safePointNote) return false;
        if (profilehz != ref.profilehz) return false;
        if (procresizetime != ref.procresizetime) return false;
        if (totaltime != ref.totaltime) return false;
        if (sysmonlock != ref.sysmonlock) return false;
        if (timeToRun != ref.timeToRun) return false;
        if (idleTime != ref.idleTime) return false;
        if (totalMutexWaitTime != ref.totalMutexWaitTime) return false;
        if (stwStoppingTimeGC != ref.stwStoppingTimeGC) return false;
        if (stwStoppingTimeOther != ref.stwStoppingTimeOther) return false;
        if (stwTotalTimeGC != ref.stwTotalTimeGC) return false;
        if (stwTotalTimeOther != ref.stwTotalTimeOther) return false;
        if (totalRuntimeLockWaitTime != ref.totalRuntimeLockWaitTime) return false;
        return true;
    }

    std::ostream& schedt::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << goidgen;
        os << " " << lastpoll;
        os << " " << pollUntil;
        os << " " << lock;
        os << " " << midle;
        os << " " << nmidle;
        os << " " << nmidlelocked;
        os << " " << mnext;
        os << " " << maxmcount;
        os << " " << nmsys;
        os << " " << nmfreed;
        os << " " << ngsys;
        os << " " << pidle;
        os << " " << npidle;
        os << " " << nmspinning;
        os << " " << needspinning;
        os << " " << runq;
        os << " " << runqsize;
        os << " " << disable;
        os << " " << gFree;
        os << " " << sudoglock;
        os << " " << sudogcache;
        os << " " << deferlock;
        os << " " << deferpool;
        os << " " << freem;
        os << " " << gcwaiting;
        os << " " << stopwait;
        os << " " << stopnote;
        os << " " << sysmonwait;
        os << " " << sysmonnote;
        os << " " << safePointFn;
        os << " " << safePointWait;
        os << " " << safePointNote;
        os << " " << profilehz;
        os << " " << procresizetime;
        os << " " << totaltime;
        os << " " << sysmonlock;
        os << " " << timeToRun;
        os << " " << idleTime;
        os << " " << totalMutexWaitTime;
        os << " " << stwStoppingTimeGC;
        os << " " << stwStoppingTimeOther;
        os << " " << stwTotalTimeGC;
        os << " " << stwTotalTimeOther;
        os << " " << totalRuntimeLockWaitTime;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct schedt& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    _func::operator T()
    {
        T result;
        result.entryOff = this->entryOff;
        result.nameOff = this->nameOff;
        result.args = this->args;
        result.deferreturn = this->deferreturn;
        result.pcsp = this->pcsp;
        result.pcfile = this->pcfile;
        result.pcln = this->pcln;
        result.npcdata = this->npcdata;
        result.cuOffset = this->cuOffset;
        result.startLine = this->startLine;
        result.funcID = this->funcID;
        result.flag = this->flag;
        result._ = this->_;
        result.nfuncdata = this->nfuncdata;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool _func::operator==(const T& ref) const
    {
        if (entryOff != ref.entryOff) return false;
        if (nameOff != ref.nameOff) return false;
        if (args != ref.args) return false;
        if (deferreturn != ref.deferreturn) return false;
        if (pcsp != ref.pcsp) return false;
        if (pcfile != ref.pcfile) return false;
        if (pcln != ref.pcln) return false;
        if (npcdata != ref.npcdata) return false;
        if (cuOffset != ref.cuOffset) return false;
        if (startLine != ref.startLine) return false;
        if (funcID != ref.funcID) return false;
        if (flag != ref.flag) return false;
        if (_ != ref._) return false;
        if (nfuncdata != ref.nfuncdata) return false;
        return true;
    }

    std::ostream& _func::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << entryOff;
        os << " " << nameOff;
        os << " " << args;
        os << " " << deferreturn;
        os << " " << pcsp;
        os << " " << pcfile;
        os << " " << pcln;
        os << " " << npcdata;
        os << " " << cuOffset;
        os << " " << startLine;
        os << " " << funcID;
        os << " " << flag;
        os << " " << _;
        os << " " << nfuncdata;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _func& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    funcinl::operator T()
    {
        T result;
        result.ones = this->ones;
        result.entry = this->entry;
        result.name = this->name;
        result.file = this->file;
        result.line = this->line;
        result.startLine = this->startLine;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool funcinl::operator==(const T& ref) const
    {
        if (ones != ref.ones) return false;
        if (entry != ref.entry) return false;
        if (name != ref.name) return false;
        if (file != ref.file) return false;
        if (line != ref.line) return false;
        if (startLine != ref.startLine) return false;
        return true;
    }

    std::ostream& funcinl::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << ones;
        os << " " << entry;
        os << " " << name;
        os << " " << file;
        os << " " << line;
        os << " " << startLine;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct funcinl& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    itab::operator T()
    {
        T result;
        result.inter = this->inter;
        result._type = this->_type;
        result.hash = this->hash;
        result._ = this->_;
        result.fun = this->fun;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool itab::operator==(const T& ref) const
    {
        if (inter != ref.inter) return false;
        if (_type != ref._type) return false;
        if (hash != ref.hash) return false;
        if (_ != ref._) return false;
        if (fun != ref.fun) return false;
        return true;
    }

    std::ostream& itab::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << inter;
        os << " " << _type;
        os << " " << hash;
        os << " " << _;
        os << " " << fun;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct itab& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    lfnode::operator T()
    {
        T result;
        result.next = this->next;
        result.pushcnt = this->pushcnt;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool lfnode::operator==(const T& ref) const
    {
        if (next != ref.next) return false;
        if (pushcnt != ref.pushcnt) return false;
        return true;
    }

    std::ostream& lfnode::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << next;
        os << " " << pushcnt;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct lfnode& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    forcegcstate::operator T()
    {
        T result;
        result.lock = this->lock;
        result.g = this->g;
        result.idle = this->idle;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool forcegcstate::operator==(const T& ref) const
    {
        if (lock != ref.lock) return false;
        if (g != ref.g) return false;
        if (idle != ref.idle) return false;
        return true;
    }

    std::ostream& forcegcstate::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << lock;
        os << " " << g;
        os << " " << idle;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct forcegcstate& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    _defer::operator T()
    {
        T result;
        result.heap = this->heap;
        result.rangefunc = this->rangefunc;
        result.sp = this->sp;
        result.pc = this->pc;
        result.fn = this->fn;
        result.link = this->link;
        result.head = this->head;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool _defer::operator==(const T& ref) const
    {
        if (heap != ref.heap) return false;
        if (rangefunc != ref.rangefunc) return false;
        if (sp != ref.sp) return false;
        if (pc != ref.pc) return false;
        if (fn != ref.fn) return false;
        if (link != ref.link) return false;
        if (head != ref.head) return false;
        return true;
    }

    std::ostream& _defer::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << heap;
        os << " " << rangefunc;
        os << " " << sp;
        os << " " << pc;
        os << " " << fn;
        os << " " << link;
        os << " " << head;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _defer& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    _panic::operator T()
    {
        T result;
        result.argp = this->argp;
        result.arg = this->arg;
        result.link = this->link;
        result.startPC = this->startPC;
        result.startSP = this->startSP;
        result.sp = this->sp;
        result.lr = this->lr;
        result.fp = this->fp;
        result.retpc = this->retpc;
        result.deferBitsPtr = this->deferBitsPtr;
        result.slotsPtr = this->slotsPtr;
        result.recovered = this->recovered;
        result.goexit = this->goexit;
        result.deferreturn = this->deferreturn;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool _panic::operator==(const T& ref) const
    {
        if (argp != ref.argp) return false;
        if (arg != ref.arg) return false;
        if (link != ref.link) return false;
        if (startPC != ref.startPC) return false;
        if (startSP != ref.startSP) return false;
        if (sp != ref.sp) return false;
        if (lr != ref.lr) return false;
        if (fp != ref.fp) return false;
        if (retpc != ref.retpc) return false;
        if (deferBitsPtr != ref.deferBitsPtr) return false;
        if (slotsPtr != ref.slotsPtr) return false;
        if (recovered != ref.recovered) return false;
        if (goexit != ref.goexit) return false;
        if (deferreturn != ref.deferreturn) return false;
        return true;
    }

    std::ostream& _panic::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << argp;
        os << " " << arg;
        os << " " << link;
        os << " " << startPC;
        os << " " << startSP;
        os << " " << sp;
        os << " " << lr;
        os << " " << fp;
        os << " " << retpc;
        os << " " << deferBitsPtr;
        os << " " << slotsPtr;
        os << " " << recovered;
        os << " " << goexit;
        os << " " << deferreturn;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _panic& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    savedOpenDeferState::operator T()
    {
        T result;
        result.retpc = this->retpc;
        result.deferBitsOffset = this->deferBitsOffset;
        result.slotsOffset = this->slotsOffset;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool savedOpenDeferState::operator==(const T& ref) const
    {
        if (retpc != ref.retpc) return false;
        if (deferBitsOffset != ref.deferBitsOffset) return false;
        if (slotsOffset != ref.slotsOffset) return false;
        return true;
    }

    std::ostream& savedOpenDeferState::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << retpc;
        os << " " << deferBitsOffset;
        os << " " << slotsOffset;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct savedOpenDeferState& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    ancestorInfo::operator T()
    {
        T result;
        result.pcs = this->pcs;
        result.goid = this->goid;
        result.gopc = this->gopc;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool ancestorInfo::operator==(const T& ref) const
    {
        if (pcs != ref.pcs) return false;
        if (goid != ref.goid) return false;
        if (gopc != ref.gopc) return false;
        return true;
    }

    std::ostream& ancestorInfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << pcs;
        os << " " << goid;
        os << " " << gopc;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct ancestorInfo& value)
    {
        return value.PrintTo(os);
    }

    gocpp::array_base<std::string> waitReasonStrings = gocpp::Init<gocpp::array_base<std::string>>([](gocpp::array_base<std::string>& x) { x.waitReasonZero = ""; x.waitReasonGCAssistMarking = "GC assist marking"; x.waitReasonIOWait = "IO wait"; x.waitReasonChanReceiveNilChan = "chan receive (nil chan)"; x.waitReasonChanSendNilChan = "chan send (nil chan)"; x.waitReasonDumpingHeap = "dumping heap"; x.waitReasonGarbageCollection = "garbage collection"; x.waitReasonGarbageCollectionScan = "garbage collection scan"; x.waitReasonPanicWait = "panicwait"; x.waitReasonSelect = "select"; x.waitReasonSelectNoCases = "select (no cases)"; x.waitReasonGCAssistWait = "GC assist wait"; x.waitReasonGCSweepWait = "GC sweep wait"; x.waitReasonGCScavengeWait = "GC scavenge wait"; x.waitReasonChanReceive = "chan receive"; x.waitReasonChanSend = "chan send"; x.waitReasonFinalizerWait = "finalizer wait"; x.waitReasonForceGCIdle = "force gc (idle)"; x.waitReasonSemacquire = "semacquire"; x.waitReasonSleep = "sleep"; x.waitReasonSyncCondWait = "sync.Cond.Wait"; x.waitReasonSyncMutexLock = "sync.Mutex.Lock"; x.waitReasonSyncRWMutexRLock = "sync.RWMutex.RLock"; x.waitReasonSyncRWMutexLock = "sync.RWMutex.Lock"; x.waitReasonTraceReaderBlocked = "trace reader (blocked)"; x.waitReasonWaitForGCCycle = "wait for GC cycle"; x.waitReasonGCWorkerIdle = "GC worker (idle)"; x.waitReasonGCWorkerActive = "GC worker (active)"; x.waitReasonPreempted = "preempted"; x.waitReasonDebugCall = "debug call"; x.waitReasonGCMarkTermination = "GC mark termination"; x.waitReasonStoppingTheWorld = "stopping the world"; x.waitReasonFlushProcCaches = "flushing proc caches"; x.waitReasonTraceGoroutineStatus = "trace goroutine status"; x.waitReasonTraceProcStatus = "trace proc status"; x.waitReasonPageTraceFlush = "page trace flush"; x.waitReasonCoroutine = "coroutine"; });
    std::string String(waitReason w)
    {
        if(w < 0 || w >= waitReason(len(waitReasonStrings)))
        {
            return "unknown wait reason";
        }
        return waitReasonStrings[w];
    }

    bool isMutexWait(waitReason w)
    {
        return w == waitReasonSyncMutexLock || w == waitReasonSyncRWMutexRLock || w == waitReasonSyncRWMutexLock;
    }

    m* allm;
    int32_t gomaxprocs;
    int32_t ncpu;
    forcegcstate forcegc;
    schedt sched;
    int32_t newprocs;
    mutex allpLock;
    gocpp::slice<p*> allp;
    pMask idlepMask;
    pMask timerpMask;
    lfstack gcBgMarkWorkerPool;
    int32_t gcBgMarkWorkerCount;
    uint32_t processorVersionInfo;
    bool isIntel;
    uint8_t goarm;
    uint8_t goarmsoftfp;
    bool islibrary;
    bool isarchive;
    bool framepointer_enabled = GOARCH == "amd64" || GOARCH == "arm64";
}

