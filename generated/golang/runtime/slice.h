// generated by GoCpp from file '$(ImportDir)/runtime/slice.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/slice.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/malloc.h"

namespace golang::runtime
{
    struct slice
    {
        unsafe::Pointer array;
        int len;
        int cap;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct slice& value);
    struct notInHeapSlice
    {
        notInHeap* array;
        int len;
        int cap;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct notInHeapSlice& value);
    void panicmakeslicelen();
    void panicmakeslicecap();
    unsafe::Pointer makeslicecopy(_type* et, int tolen, int fromlen, unsafe::Pointer from);
    unsafe::Pointer makeslice(_type* et, int len, int cap);
    unsafe::Pointer makeslice64(_type* et, int64_t len64, int64_t cap64);
    slice growslice(unsafe::Pointer oldPtr, int newLen, int oldCap, int num, _type* et);
    int nextslicecap(int newLen, int oldCap);
    slice reflect_growslice(_type* et, slice old, int num);
    bool isPowerOfTwo(uintptr_t x);
    int slicecopy(unsafe::Pointer toPtr, int toLen, unsafe::Pointer fromPtr, int fromLen, uintptr_t width);
    gocpp::slice<unsigned char> bytealg_MakeNoZero(int len);
}

