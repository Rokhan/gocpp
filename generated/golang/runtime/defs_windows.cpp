// generated by GoCpp from file '$(ImportDir)/runtime/defs_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/defs_windows.h"
#include "gocpp/support.h"

#include "golang/runtime/defs_windows_amd64.h"

namespace golang::runtime
{
    int _PROT_NONE = 0;
    int _PROT_READ = 1;
    int _PROT_WRITE = 2;
    int _PROT_EXEC = 4;
    int _MAP_ANON = 1;
    int _MAP_PRIVATE = 2;
    int _DUPLICATE_SAME_ACCESS = 0x2;
    int _THREAD_PRIORITY_HIGHEST = 0x2;
    int _SIGINT = 0x2;
    int _SIGTERM = 0xF;
    int _CTRL_C_EVENT = 0x0;
    int _CTRL_BREAK_EVENT = 0x1;
    int _CTRL_CLOSE_EVENT = 0x2;
    int _CTRL_LOGOFF_EVENT = 0x5;
    int _CTRL_SHUTDOWN_EVENT = 0x6;
    int _EXCEPTION_ACCESS_VIOLATION = 0xc0000005;
    int _EXCEPTION_IN_PAGE_ERROR = 0xc0000006;
    int _EXCEPTION_BREAKPOINT = 0x80000003;
    int _EXCEPTION_ILLEGAL_INSTRUCTION = 0xc000001d;
    int _EXCEPTION_FLT_DENORMAL_OPERAND = 0xc000008d;
    int _EXCEPTION_FLT_DIVIDE_BY_ZERO = 0xc000008e;
    int _EXCEPTION_FLT_INEXACT_RESULT = 0xc000008f;
    int _EXCEPTION_FLT_OVERFLOW = 0xc0000091;
    int _EXCEPTION_FLT_UNDERFLOW = 0xc0000093;
    int _EXCEPTION_INT_DIVIDE_BY_ZERO = 0xc0000094;
    int _EXCEPTION_INT_OVERFLOW = 0xc0000095;
    int _INFINITE = 0xffffffff;
    int _WAIT_TIMEOUT = 0x102;
    int _EXCEPTION_CONTINUE_EXECUTION = - 0x1;
    int _EXCEPTION_CONTINUE_SEARCH = 0x0;
    int _EXCEPTION_CONTINUE_SEARCH_SEH = 0x1;
    
    std::ostream& systeminfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << anon0;
        os << " " << dwpagesize;
        os << " " << lpminimumapplicationaddress;
        os << " " << lpmaximumapplicationaddress;
        os << " " << dwactiveprocessormask;
        os << " " << dwnumberofprocessors;
        os << " " << dwprocessortype;
        os << " " << dwallocationgranularity;
        os << " " << wprocessorlevel;
        os << " " << wprocessorrevision;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const systeminfo& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& exceptionpointers::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << record;
        os << " " << context;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const exceptionpointers& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& exceptionrecord::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << exceptioncode;
        os << " " << exceptionflags;
        os << " " << exceptionrecord;
        os << " " << exceptionaddress;
        os << " " << numberparameters;
        os << " " << exceptioninformation;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const exceptionrecord& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& overlapped::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << internal;
        os << " " << internalhigh;
        os << " " << anon0;
        os << " " << hevent;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const overlapped& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& memoryBasicInformation::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << baseAddress;
        os << " " << allocationBase;
        os << " " << allocationProtect;
        os << " " << regionSize;
        os << " " << state;
        os << " " << protect;
        os << " " << type_;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const memoryBasicInformation& value)
    {
        return value.PrintTo(os);
    }

}

