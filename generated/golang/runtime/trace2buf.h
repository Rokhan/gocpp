// generated by GoCpp from file '$(ImportDir)/runtime/trace2buf.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2buf.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct traceWriter
    {
        traceLocker traceLocker;
        traceBuf* traceBuf;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceWriter& value);
    struct traceWriter unsafeTraceWriter(uintptr_t gen, struct traceBuf* buf);
    struct traceBufQueue
    {
        traceBuf* head;
        traceBuf* tail;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBufQueue& value);
    struct traceBufHeader
    {
        traceBuf* link;
        golang::runtime::traceTime lastTime;
        int pos;
        int lenPos;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBufHeader& value);
    void traceBufFlush(struct traceBuf* buf, uintptr_t gen);
    struct traceBuf
    {
        sys::NotInHeap _1;
        traceBufHeader traceBufHeader;
        gocpp::array<unsigned char, (64 << 10) - gocpp::Sizeof<runtime::traceBufHeader>()> arr;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBuf& value);

    namespace rec
    {
        struct traceWriter writer(struct traceLocker tl);
        void end(struct traceWriter w);
        std::tuple<struct traceWriter, bool> ensure(struct traceWriter w, int maxSize);
        struct traceWriter flush(struct traceWriter w);
        struct traceWriter refill(struct traceWriter w);
        void push(struct traceBufQueue* q, struct traceBuf* buf);
        struct traceBuf* pop(struct traceBufQueue* q);
        bool empty(struct traceBufQueue* q);
        void byte(struct traceBuf* buf, unsigned char v);
        void varint(struct traceBuf* buf, uint64_t v);
        int varintReserve(struct traceBuf* buf);
        void stringData(struct traceBuf* buf, std::string s);
        bool available(struct traceBuf* buf, int size);
        void varintAt(struct traceBuf* buf, int pos, uint64_t v);
    }
}

