// generated by GoCpp from file '$(ImportDir)/runtime/lock_sema.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/lock_sema.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    bool mutexContended(struct mutex* l);
    void lock(struct mutex* l);
    void lock2(struct mutex* l);
    void unlock(struct mutex* l);
    void unlock2(struct mutex* l);
    void noteclear(struct note* n);
    void notewakeup(struct note* n);
    void notesleep(struct note* n);
    bool notetsleep_internal(struct note* n, int64_t ns, struct g* gp, int64_t deadline);
    bool notetsleep(struct note* n, int64_t ns);
    bool notetsleepg(struct note* n, int64_t ns);
    std::tuple<struct g*, bool> beforeIdle(int64_t, int64_t);
    void checkTimeouts();
}

