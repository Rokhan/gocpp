// generated by GoCpp from file '$(ImportDir)/image/format.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/format.fwd.h"
#include "gocpp/support.h"

#include "golang/image/color/color.h"
#include "golang/image/geom.h"
#include "golang/image/image.h"
#include "golang/io/io.h"
#include "golang/sync/atomic/value.h"
#include "golang/sync/mutex.h"

namespace golang::image
{
    extern std::string ErrFormat;
    struct format
    {
        std::string name;
        std::string magic;
        std::function<std::tuple<Image, std::string> (io::Reader)> decode;
        std::function<std::tuple<Config, std::string> (io::Reader)> decodeConfig;

        using isGoStruct = void;

        template<typename T>
        operator T();

        template<typename T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct format& value);
    void RegisterFormat(std::string name, std::string magic, std::function<std::tuple<Image, std::string> (io::Reader)> decode, std::function<std::tuple<Config, std::string> (io::Reader)> decodeConfig);
    struct reader : gocpp::Interface
    {
        reader(){}
        reader(reader& i) = default;
        reader(const reader& i) = default;
        reader& operator=(reader& i) = default;
        reader& operator=(const reader& i) = default;

        template<typename T>
        reader(T& ref);

        template<typename T>
        reader(const T& ref);

        template<typename T>
        reader(T* ptr);

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct Ireader
        {
            virtual std::tuple<gocpp::slice<unsigned char>, std::string> vPeek(int) = 0;
        };

        template<typename T, typename StoreT>
        struct readerImpl : Ireader
        {
            explicit readerImpl(T* ptr)
            {
                value.reset(ptr);
            }

            std::tuple<gocpp::slice<unsigned char>, std::string> vPeek(int) override;

            StoreT value;
        };

        std::shared_ptr<Ireader> value;
    };

    std::tuple<gocpp::slice<unsigned char>, std::string> Peek(const gocpp::PtrRecv<reader, false>& self, int);
    std::tuple<gocpp::slice<unsigned char>, std::string> Peek(const gocpp::ObjRecv<reader>& self, int);

    std::ostream& operator<<(std::ostream& os, const struct reader& value);
    reader asReader(io::Reader r);
    bool match(std::string magic, gocpp::slice<unsigned char> b);
    format sniff(reader r);
    std::tuple<Image, std::string, std::string> Decode(io::Reader r);
    std::tuple<Config, std::string, std::string> DecodeConfig(io::Reader r);
}

