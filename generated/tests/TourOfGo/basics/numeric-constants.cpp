// generated by GoCpp from file 'tests/TourOfGo/basics/numeric-constants.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/numeric-constants.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Create a huge number by shifting a 1 bit left 100 places.
    // In other words, the binary number that is 1 followed by 100 zeroes.
    // Shift it right again 99 places, so we end up with 1<<1, or 2.
    int needInt(int x)
    {
        return x * 10 + 1;
    }

    double needFloat(double x)
    {
        return x * 0.1;
    }

    void main()
    {
        mocklib::Println(needInt(Small));
        mocklib::Println(needFloat(Small));
        mocklib::Println(needFloat(Big));
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
