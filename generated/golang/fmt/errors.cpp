// generated by GoCpp from file '$(ImportDir)/fmt/errors.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/fmt/errors.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/fmt/format.h"
#include "golang/fmt/print.h"
#include "golang/internal/abi/type.h"
#include "golang/reflect/value.h"
#include "golang/sort/sort.h"

namespace golang::fmt
{
    std::string Errorf(std::string format, gocpp::slice<go_any> a)
    {
        auto p = newPrinter();
        p->wrapErrs = true;
        doPrintf(gocpp::recv(p), format, a);
        auto s = string(p->buf);
        std::string err = {};
        //Go switch emulation
        {
            auto condition = len(p->wrappedErrs);
            int conditionId = -1;
            if(condition == 0) { conditionId = 0; }
            else if(condition == 1) { conditionId = 1; }
            switch(conditionId)
            {
                case 0:
                    err = errors::New(s);
                    break;
                case 1:
                    auto w = gocpp::InitPtr<wrapError>([](wrapError& x) { x.msg = s; });
                    std::tie(w->err, gocpp_id_0) = gocpp::getValue<std::string>(a[p->wrappedErrs[0]]);
                    err = w;
                    break;
                default:
                    if(p->reordered)
                    {
                        sort::Ints(p->wrappedErrs);
                    }
                    gocpp::slice<std::string> errs = {};
                    for(auto [i, argNum] : p->wrappedErrs)
                    {
                        if(i > 0 && p->wrappedErrs[i - 1] == argNum)
                        {
                            continue;
                        }
                        if(auto [e, ok] = gocpp::getValue<std::string>(a[argNum]); ok)
                        {
                            errs = append(errs, e);
                        }
                    }
                    err = new wrapErrors {s, errs};
                    break;
            }
        }
        free(gocpp::recv(p));
        return err;
    }

    
    std::ostream& wrapError::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << msg;
        os << " " << err;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct wrapError& value)
    {
        return value.PrintTo(os);
    }

    std::string Error(struct wrapError* e)
    {
        return e->msg;
    }

    std::string Unwrap(struct wrapError* e)
    {
        return e->err;
    }

    
    std::ostream& wrapErrors::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << msg;
        os << " " << errs;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct wrapErrors& value)
    {
        return value.PrintTo(os);
    }

    std::string Error(struct wrapErrors* e)
    {
        return e->msg;
    }

    gocpp::slice<std::string> Unwrap(struct wrapErrors* e)
    {
        return e->errs;
    }

}

