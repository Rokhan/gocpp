// generated by GoCpp from file '$(ImportDir)/runtime/mbitmap_allocheaders.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mbitmap_allocheaders.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/mheap.h"
#include "golang/internal/abi/type.h"
#include "golang/runtime/mbitmap.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/type.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/traceback.h"
#include "golang/runtime/typekind.h"
#include "golang/runtime/stkframe.h"
#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/mfinal.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/panic.h"
#include "golang/unsafe/unsafe.h"
#include "golang/runtime/stack.h"
#include "golang/runtime/print.h"
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/mwbbuf.h"
// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/rand.h"
#include "golang/runtime/slice.h"

namespace golang::runtime
{
    extern int mallocHeaderSize;
    extern int minSizeForMallocHeader;
    bool heapBitsInSpan(uintptr_t userSize);
    struct heapArenaPtrScalar
    {

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const heapArenaPtrScalar& value);
    struct typePointers
    {
        uintptr_t elem;
        uintptr_t addr;
        uintptr_t mask;
        _type* typ;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const typePointers& value);
    typePointers typePointersOf(mspan* span, uintptr_t addr, uintptr_t size);
    typePointers typePointersOfUnchecked(mspan* span, uintptr_t addr);
    typePointers typePointersOfType(mspan* span, abi::Type* typ, uintptr_t addr);
    std::tuple<typePointers, uintptr_t> nextFast(typePointers tp);
    std::tuple<typePointers, uintptr_t> next(typePointers tp, uintptr_t limit);
    typePointers fastForward(typePointers tp, uintptr_t n, uintptr_t limit);
    uintptr_t objBase(mspan* span, uintptr_t addr);
    void bulkBarrierPreWrite(uintptr_t dst, uintptr_t src, uintptr_t size, abi::Type* typ);
    void bulkBarrierPreWriteSrcOnly(uintptr_t dst, uintptr_t src, uintptr_t size, abi::Type* typ);
    void initHeapBits(mspan* s, bool forceClear);
    uintptr_t bswapIfBigEndian(uintptr_t x);
    struct writeUserArenaHeapBits
    {
        uintptr_t offset;
        uintptr_t mask;
        uintptr_t valid;
        uintptr_t low;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const writeUserArenaHeapBits& value);
    writeUserArenaHeapBits writeUserArenaHeapBits(mspan* s, uintptr_t addr);
    writeUserArenaHeapBits write(writeUserArenaHeapBits h, mspan* s, uintptr_t bits, uintptr_t valid);
    writeUserArenaHeapBits pad(writeUserArenaHeapBits h, mspan* s, uintptr_t size);
    void flush(writeUserArenaHeapBits h, mspan* s, uintptr_t addr, uintptr_t size);
    gocpp::slice<uintptr_t> heapBits(mspan* span);
    gocpp::slice<uintptr_t> heapBitsSlice(uintptr_t spanBase, uintptr_t spanSize);
    uintptr_t heapBitsSmallForAddr(mspan* span, uintptr_t addr);
    uintptr_t writeHeapBitsSmall(mspan* span, uintptr_t x, uintptr_t dataSize, _type* typ);
    void heapBitsSetType(uintptr_t x, uintptr_t size, uintptr_t dataSize, _type* typ);
    uintptr_t heapSetType(uintptr_t x, uintptr_t dataSize, _type* typ, _type** header, mspan* span);
    void doubleCheckHeapPointers(uintptr_t x, uintptr_t dataSize, _type* typ, _type** header, mspan* span);
    void doubleCheckHeapPointersInterior(uintptr_t x, uintptr_t interior, uintptr_t size, uintptr_t dataSize, _type* typ, _type** header, mspan* span);
    void doubleCheckTypePointersOfType(mspan* s, _type* typ, uintptr_t addr, uintptr_t size);
    void dumpTypePointers(typePointers tp);
    gocpp::slice<unsigned char> getgcmask(any ep);
    void userArenaHeapBitsSetType(_type* typ, unsafe::Pointer ptr, mspan* s);
    void writeHeapBitsForAddr();
    struct heapBits
    {

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const heapBits& value);
    heapBits heapBitsForAddr(uintptr_t addr, uintptr_t size);
    std::tuple<heapBits, uintptr_t> next(heapBits h);
    std::tuple<heapBits, uintptr_t> nextFast(heapBits h);
}

