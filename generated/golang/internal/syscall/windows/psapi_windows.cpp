// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/psapi_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/psapi_windows.h"
#include "gocpp/support.h"

namespace golang::windows
{
    
    template<typename T> requires gocpp::GoStruct<T>
    PROCESS_MEMORY_COUNTERS::operator T()
    {
        T result;
        result.CB = this->CB;
        result.PageFaultCount = this->PageFaultCount;
        result.PeakWorkingSetSize = this->PeakWorkingSetSize;
        result.WorkingSetSize = this->WorkingSetSize;
        result.QuotaPeakPagedPoolUsage = this->QuotaPeakPagedPoolUsage;
        result.QuotaPagedPoolUsage = this->QuotaPagedPoolUsage;
        result.QuotaPeakNonPagedPoolUsage = this->QuotaPeakNonPagedPoolUsage;
        result.QuotaNonPagedPoolUsage = this->QuotaNonPagedPoolUsage;
        result.PagefileUsage = this->PagefileUsage;
        result.PeakPagefileUsage = this->PeakPagefileUsage;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool PROCESS_MEMORY_COUNTERS::operator==(const T& ref) const
    {
        if (CB != ref.CB) return false;
        if (PageFaultCount != ref.PageFaultCount) return false;
        if (PeakWorkingSetSize != ref.PeakWorkingSetSize) return false;
        if (WorkingSetSize != ref.WorkingSetSize) return false;
        if (QuotaPeakPagedPoolUsage != ref.QuotaPeakPagedPoolUsage) return false;
        if (QuotaPagedPoolUsage != ref.QuotaPagedPoolUsage) return false;
        if (QuotaPeakNonPagedPoolUsage != ref.QuotaPeakNonPagedPoolUsage) return false;
        if (QuotaNonPagedPoolUsage != ref.QuotaNonPagedPoolUsage) return false;
        if (PagefileUsage != ref.PagefileUsage) return false;
        if (PeakPagefileUsage != ref.PeakPagefileUsage) return false;
        return true;
    }

    std::ostream& PROCESS_MEMORY_COUNTERS::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << CB;
        os << " " << PageFaultCount;
        os << " " << PeakWorkingSetSize;
        os << " " << WorkingSetSize;
        os << " " << QuotaPeakPagedPoolUsage;
        os << " " << QuotaPagedPoolUsage;
        os << " " << QuotaPeakNonPagedPoolUsage;
        os << " " << QuotaNonPagedPoolUsage;
        os << " " << PagefileUsage;
        os << " " << PeakPagefileUsage;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct PROCESS_MEMORY_COUNTERS& value)
    {
        return value.PrintTo(os);
    }

}

