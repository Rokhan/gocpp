// generated by GoCpp from file '$(ImportDir)/internal/testlog/log.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/testlog/log.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/value.h"

namespace golang::testlog
{
    struct Interface : gocpp::Interface
    {
        Interface(){}
        Interface(Interface& i) = default;
        Interface(const Interface& i) = default;
        Interface& operator=(Interface& i) = default;
        Interface& operator=(const Interface& i) = default;

        template<typename T>
        Interface(T& ref);

        template<typename T>
        Interface(const T& ref);

        template<typename T>
        Interface(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IInterface
        {
            virtual void vGetenv(std::string key) = 0;
            virtual void vStat(std::string file) = 0;
            virtual void vOpen(std::string file) = 0;
            virtual void vChdir(std::string dir) = 0;
        };

        template<typename T, typename StoreT>
        struct InterfaceImpl : IInterface
        {
            explicit InterfaceImpl(T* ptr)
            {
                value.reset(ptr);
            }

            void vGetenv(std::string key) override;

            void vStat(std::string file) override;

            void vOpen(std::string file) override;

            void vChdir(std::string dir) override;

            StoreT value;
        };

        std::shared_ptr<IInterface> value;
    };

    namespace rec
    {
        void Getenv(const gocpp::PtrRecv<Interface, false>& self, std::string key);
        void Getenv(const gocpp::ObjRecv<Interface>& self, std::string key);

        void Stat(const gocpp::PtrRecv<Interface, false>& self, std::string file);
        void Stat(const gocpp::ObjRecv<Interface>& self, std::string file);

        void Open(const gocpp::PtrRecv<Interface, false>& self, std::string file);
        void Open(const gocpp::ObjRecv<Interface>& self, std::string file);

        void Chdir(const gocpp::PtrRecv<Interface, false>& self, std::string dir);
        void Chdir(const gocpp::ObjRecv<Interface>& self, std::string dir);
    }

    std::ostream& operator<<(std::ostream& os, const struct Interface& value);
    void SetLogger(struct Interface impl);
    struct Interface Logger();
    void Getenv(std::string name);
    void Open(std::string name);
    void Stat(std::string name);

    namespace rec
    {
    }
}

