// generated by GoCpp from file '$(ImportDir)/runtime/mwbbuf.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mwbbuf.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
#include "golang/runtime/mgcmark.h"
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    extern bool testSmallBuf;
    struct wbBuf
    {
        uintptr_t next;
        uintptr_t end;
        gocpp::array<uintptr_t, wbBufEntries> buf;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct wbBuf& value);
    extern int wbBufEntries;
    extern int wbMaxEntriesPerCall;
    void reset(struct wbBuf* b);
    void discard(struct wbBuf* b);
    bool empty(struct wbBuf* b);
    gocpp::array<uintptr_t, 1>* get1(struct wbBuf* b);
    gocpp::array<uintptr_t, 2>* get2(struct wbBuf* b);
    void wbBufFlush();
    void wbBufFlush1(p* pp);
}

