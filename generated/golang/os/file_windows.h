// generated by GoCpp from file '$(ImportDir)/os/file_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/file_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir_windows.h"
#include "golang/os/types.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::os
{
    struct file
    {
        poll::FD pfd;
        std::string name;
        dirInfo* dirinfo;
        bool appendMode;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct file& value);
    struct File* newFile(syscall::Handle h, std::string name, std::string kind);
    struct File* newConsoleFile(syscall::Handle h, std::string name);
    struct File* NewFile(uintptr_t fd, std::string name);
    void epipecheck(struct File* file, struct gocpp::error e);
    extern std::string DevNull;
    std::tuple<struct File*, struct gocpp::error> openFileNolog(std::string name, int flag, golang::os::FileMode perm);
    struct gocpp::error Truncate(std::string name, int64_t size);
    struct gocpp::error Remove(std::string name);
    struct gocpp::error rename(std::string oldname, std::string newname);
    std::tuple<struct File*, struct File*, struct gocpp::error> Pipe();
    extern sync::Once useGetTempPath2Once;
    extern bool useGetTempPath2;
    std::string tempDir();
    struct gocpp::error Link(std::string oldname, std::string newname);
    struct gocpp::error Symlink(std::string oldname, std::string newname);
    std::tuple<syscall::Handle, struct gocpp::error> openSymlink(std::string path);
    std::tuple<std::string, struct gocpp::error> normaliseLinkPath(std::string path);
    std::tuple<std::string, struct gocpp::error> readReparseLink(std::string path);
    std::tuple<std::string, struct gocpp::error> readlink(std::string name);

    namespace rec
    {
        uintptr_t Fd(struct File* file);
        struct gocpp::error close(os::file* file);
        std::tuple<int64_t, struct gocpp::error> seek(struct File* f, int64_t offset, int whence);
    }
}

