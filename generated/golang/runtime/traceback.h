// generated by GoCpp from file '$(ImportDir)/runtime/traceback.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/traceback.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/bytealg/indexbyte_native.h"
#include "golang/internal/goarch/goarch.h"
// #include "golang/runtime/alg.h"  [Ignored, known errors]
#include "golang/runtime/asan0.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/extern.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/mfinal.h"
#include "golang/runtime/msan0.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
// #include "golang/runtime/runtime1.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
#include "golang/runtime/stkframe.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/symtabinl.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    struct unwinder
    {
        stkframe frame;
        guintptr g;
        int cgoCtxt;
        abi::FuncID calleeFuncID;
        unwindFlags flags;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct unwinder& value);
    void init(struct unwinder* u, g* gp, unwindFlags flags);
    void initAt(struct unwinder* u, uintptr_t pc0, uintptr_t sp0, uintptr_t lr0, g* gp, unwindFlags flags);
    bool valid(struct unwinder* u);
    void resolveInternal(struct unwinder* u, bool innermost, bool isSyscall);
    void next(struct unwinder* u);
    void finishInternal(struct unwinder* u);
    uintptr_t symPC(struct unwinder* u);
    int cgoCallers(struct unwinder* u, gocpp::slice<uintptr_t> pcBuf);
    int tracebackPCs(unwinder* u, int skip, gocpp::slice<uintptr_t> pcBuf);
    void printArgs(funcInfo f, unsafe::Pointer argp, uintptr_t pc);
    std::tuple<std::string, std::string, std::string> funcNamePiecesForPrint(std::string name);
    std::string funcNameForPrint(std::string name);
    void printFuncName(std::string name);
    void printcreatedby(g* gp);
    void printcreatedby1(funcInfo f, uintptr_t pc, uint64_t goid);
    void traceback(uintptr_t pc, uintptr_t sp, uintptr_t lr, g* gp);
    void tracebacktrap(uintptr_t pc, uintptr_t sp, uintptr_t lr, g* gp);
    void traceback1(uintptr_t pc, uintptr_t sp, uintptr_t lr, g* gp, unwindFlags flags);
    std::tuple<int, int> traceback2(unwinder* u, bool showRuntime, int skip, int max);
    void printAncestorTraceback(ancestorInfo ancestor);
    void printAncestorTracebackFuncInfo(funcInfo f, uintptr_t pc);
    int callers(int skip, gocpp::slice<uintptr_t> pcbuf);
    int gcallers(g* gp, int skip, gocpp::slice<uintptr_t> pcbuf);
    bool showframe(srcFunc sf, g* gp, bool firstFrame, abi::FuncID calleeID);
    bool showfuncinfo(srcFunc sf, bool firstFrame, abi::FuncID calleeID);
    bool isExportedRuntime(std::string name);
    bool elideWrapperCalling(abi::FuncID id);
    extern gocpp::array_base<std::string> gStatusStrings;
    void goroutineheader(g* gp);
    void tracebackothers(g* me);
    void tracebackHexdump(stack stk, stkframe* frame, uintptr_t bad);
    bool isSystemGoroutine(g* gp, bool fixed);
    void SetCgoTraceback(int version, unsafe::Pointer traceback, unsafe::Pointer context, unsafe::Pointer symbolizer);
    struct cgoTracebackArg
    {
        uintptr_t context;
        uintptr_t sigContext;
        uintptr_t* buf;
        uintptr_t max;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoTracebackArg& value);
    struct cgoContextArg
    {
        uintptr_t context;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoContextArg& value);
    struct cgoSymbolizerArg
    {
        uintptr_t pc;
        unsigned char* file;
        uintptr_t lineno;
        unsigned char* funcName;
        uintptr_t entry;
        uintptr_t more;
        uintptr_t data;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cgoSymbolizerArg& value);
    void printCgoTraceback(cgoCallers* callers);
    bool printOneCgoTraceback(uintptr_t pc, std::function<std::tuple<bool, bool> ()> commitFrame, cgoSymbolizerArg* arg);
    void callCgoSymbolizer(cgoSymbolizerArg* arg);
    void cgoContextPCs(uintptr_t ctxt, gocpp::slice<uintptr_t> buf);
}

