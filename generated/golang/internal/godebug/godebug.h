// generated by GoCpp from file '$(ImportDir)/internal/godebug/godebug.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/godebug/godebug.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/bisect/bisect.h"
#include "golang/internal/godebugs/table.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/map.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"

namespace golang::godebug
{
    struct Setting
    {
        std::string name;
        sync::Once once;
        setting* setting;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Setting& value);
    struct setting
    {
        atomic::Pointer<value> value;
        sync::Once nonDefaultOnce;
        atomic::Uint64 nonDefault;
        godebugs::Info* info;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct setting& value);
    struct value
    {
        std::string text;
        bisect::Matcher* bisect;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct value& value);
    struct Setting* New(std::string name);
    extern sync::Map cache;
    struct setting* lookup(std::string name);
    void setUpdate(std::function<void (std::string _1, std::string _2)> update);
    void registerMetric(std::string name, std::function<uint64_t ()> read);
    void setNewIncNonDefault(std::function<std::function<void ()> (std::string _1)> newIncNonDefault);
    void init();
    std::function<void ()> newIncNonDefault(std::string name);
    extern mocklib::Mutex updateMu;
    void update(std::string def, std::string env);
    void parse(gocpp::map<std::string, bool> did, std::string s);
    struct runtimeStderr
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct runtimeStderr& value);
    int32_t write(uintptr_t fd, unsafe::Pointer p, int32_t n);
    extern value empty;
    extern runtimeStderr go_stderr;

    namespace rec
    {
        std::string Name(struct Setting* s);
        bool Undocumented(struct Setting* s);
        std::string String(struct Setting* s);
        void IncNonDefault(struct Setting* s);
        void go_register(struct Setting* s);
        std::string Value(struct Setting* s);
        std::tuple<int, struct gocpp::error> Write(runtimeStderr*, gocpp::slice<unsigned char> b);
    }
}

