// generated by GoCpp from file '$(ImportDir)/fmt/format.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/fmt/format.fwd.h"
#include "gocpp/support.h"

// #include "golang/fmt/print.h"  [Ignored, known errors]
#include "golang/strconv/ftoa.h"
#include "golang/strconv/quote.h"
#include "golang/unicode/utf8/utf8.h"

namespace golang::fmt
{
    extern std::string ldigits;
    extern std::string udigits;
    extern bool go_signed;
    extern bool go_unsigned;
    struct fmtFlags
    {
        bool widPresent;
        bool precPresent;
        bool minus;
        bool plus;
        bool sharp;
        bool space;
        bool zero;
        bool plusV;
        bool sharpV;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fmtFlags& value);
    struct fmt
    {
        buffer* buf;
        int wid;
        int prec;
        gocpp::array<unsigned char, 68> intbuf;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fmt& value);
    void clearflags(struct fmt* f);
    void init(struct fmt* f, buffer* buf);
    void writePadding(struct fmt* f, int n);
    void pad(struct fmt* f, gocpp::slice<unsigned char> b);
    void padString(struct fmt* f, std::string s);
    void fmtBoolean(struct fmt* f, bool v);
    void fmtUnicode(struct fmt* f, uint64_t u);
    void fmtInteger(struct fmt* f, uint64_t u, int base, bool isSigned, gocpp::rune verb, std::string digits);
    std::string truncateString(struct fmt* f, std::string s);
    gocpp::slice<unsigned char> truncate(struct fmt* f, gocpp::slice<unsigned char> b);
    void fmtS(struct fmt* f, std::string s);
    void fmtBs(struct fmt* f, gocpp::slice<unsigned char> b);
    void fmtSbx(struct fmt* f, std::string s, gocpp::slice<unsigned char> b, std::string digits);
    void fmtSx(struct fmt* f, std::string s, std::string digits);
    void fmtBx(struct fmt* f, gocpp::slice<unsigned char> b, std::string digits);
    void fmtQ(struct fmt* f, std::string s);
    void fmtC(struct fmt* f, uint64_t c);
    void fmtQc(struct fmt* f, uint64_t c);
    void fmtFloat(struct fmt* f, double v, int size, gocpp::rune verb, int prec);
}

