// generated by GoCpp from file '$(ImportDir)/runtime/internal/atomic/types.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/internal/atomic/types.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/unsafe/unsafe.h"

namespace golang::atomic
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace atomic::rec;
        using namespace unsafe::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Int32::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Int32::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Int32::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Int32& value)
    {
        return value.PrintTo(os);
    }

    int32_t rec::Load(struct Int32* i)
    {
        return Loadint32(& i->value);
    }

    void rec::Store(struct Int32* i, int32_t value)
    {
        Storeint32(& i->value, value);
    }

    bool rec::CompareAndSwap(struct Int32* i, int32_t old, int32_t go_new)
    {
        return Casint32(& i->value, old, go_new);
    }

    int32_t rec::Swap(struct Int32* i, int32_t go_new)
    {
        return Xchgint32(& i->value, go_new);
    }

    int32_t rec::Add(struct Int32* i, int32_t delta)
    {
        return Xaddint32(& i->value, delta);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Int64::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result._1 = this->_1;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Int64::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (_1 != ref._1) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Int64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << _1;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Int64& value)
    {
        return value.PrintTo(os);
    }

    int64_t rec::Load(struct Int64* i)
    {
        return Loadint64(& i->value);
    }

    void rec::Store(struct Int64* i, int64_t value)
    {
        Storeint64(& i->value, value);
    }

    bool rec::CompareAndSwap(struct Int64* i, int64_t old, int64_t go_new)
    {
        return Casint64(& i->value, old, go_new);
    }

    int64_t rec::Swap(struct Int64* i, int64_t go_new)
    {
        return Xchgint64(& i->value, go_new);
    }

    int64_t rec::Add(struct Int64* i, int64_t delta)
    {
        return Xaddint64(& i->value, delta);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Uint8::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Uint8::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Uint8::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uint8& value)
    {
        return value.PrintTo(os);
    }

    uint8_t rec::Load(struct Uint8* u)
    {
        return Load8(& u->value);
    }

    void rec::Store(struct Uint8* u, uint8_t value)
    {
        Store8(& u->value, value);
    }

    void rec::And(struct Uint8* u, uint8_t value)
    {
        And8(& u->value, value);
    }

    void rec::Or(struct Uint8* u, uint8_t value)
    {
        Or8(& u->value, value);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Bool::operator T()
    {
        T result;
        result.u = this->u;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Bool::operator==(const T& ref) const
    {
        if (u != ref.u) return false;
        return true;
    }

    std::ostream& Bool::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << u;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Bool& value)
    {
        return value.PrintTo(os);
    }

    bool rec::Load(struct Bool* b)
    {
        return rec::Load(gocpp::recv(b->u)) != 0;
    }

    void rec::Store(struct Bool* b, bool value)
    {
        auto s = uint8_t(0);
        if(value)
        {
            s = 1;
        }
        rec::Store(gocpp::recv(b->u), s);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Uint32::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Uint32::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Uint32::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uint32& value)
    {
        return value.PrintTo(os);
    }

    uint32_t rec::Load(struct Uint32* u)
    {
        return Load(& u->value);
    }

    uint32_t rec::LoadAcquire(struct Uint32* u)
    {
        return LoadAcq(& u->value);
    }

    void rec::Store(struct Uint32* u, uint32_t value)
    {
        Store(& u->value, value);
    }

    void rec::StoreRelease(struct Uint32* u, uint32_t value)
    {
        StoreRel(& u->value, value);
    }

    bool rec::CompareAndSwap(struct Uint32* u, uint32_t old, uint32_t go_new)
    {
        return Cas(& u->value, old, go_new);
    }

    bool rec::CompareAndSwapRelease(struct Uint32* u, uint32_t old, uint32_t go_new)
    {
        return CasRel(& u->value, old, go_new);
    }

    uint32_t rec::Swap(struct Uint32* u, uint32_t value)
    {
        return Xchg(& u->value, value);
    }

    void rec::And(struct Uint32* u, uint32_t value)
    {
        And(& u->value, value);
    }

    void rec::Or(struct Uint32* u, uint32_t value)
    {
        Or(& u->value, value);
    }

    uint32_t rec::Add(struct Uint32* u, int32_t delta)
    {
        return Xadd(& u->value, delta);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Uint64::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result._1 = this->_1;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Uint64::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (_1 != ref._1) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Uint64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << _1;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uint64& value)
    {
        return value.PrintTo(os);
    }

    uint64_t rec::Load(struct Uint64* u)
    {
        return Load64(& u->value);
    }

    void rec::Store(struct Uint64* u, uint64_t value)
    {
        Store64(& u->value, value);
    }

    bool rec::CompareAndSwap(struct Uint64* u, uint64_t old, uint64_t go_new)
    {
        return Cas64(& u->value, old, go_new);
    }

    uint64_t rec::Swap(struct Uint64* u, uint64_t value)
    {
        return Xchg64(& u->value, value);
    }

    uint64_t rec::Add(struct Uint64* u, int64_t delta)
    {
        return Xadd64(& u->value, delta);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Uintptr::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Uintptr::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& Uintptr::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Uintptr& value)
    {
        return value.PrintTo(os);
    }

    uintptr_t rec::Load(struct Uintptr* u)
    {
        return Loaduintptr(& u->value);
    }

    uintptr_t rec::LoadAcquire(struct Uintptr* u)
    {
        return LoadAcquintptr(& u->value);
    }

    void rec::Store(struct Uintptr* u, uintptr_t value)
    {
        Storeuintptr(& u->value, value);
    }

    void rec::StoreRelease(struct Uintptr* u, uintptr_t value)
    {
        StoreReluintptr(& u->value, value);
    }

    bool rec::CompareAndSwap(struct Uintptr* u, uintptr_t old, uintptr_t go_new)
    {
        return Casuintptr(& u->value, old, go_new);
    }

    uintptr_t rec::Swap(struct Uintptr* u, uintptr_t value)
    {
        return Xchguintptr(& u->value, value);
    }

    uintptr_t rec::Add(struct Uintptr* u, uintptr_t delta)
    {
        return Xadduintptr(& u->value, delta);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Float64::operator T()
    {
        T result;
        result.u = this->u;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Float64::operator==(const T& ref) const
    {
        if (u != ref.u) return false;
        return true;
    }

    std::ostream& Float64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << u;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Float64& value)
    {
        return value.PrintTo(os);
    }

    double rec::Load(struct Float64* f)
    {
        auto r = rec::Load(gocpp::recv(f->u));
        return *(double*)(unsafe::Pointer(& r));
    }

    void rec::Store(struct Float64* f, double value)
    {
        rec::Store(gocpp::recv(f->u), *(uint64_t*)(unsafe::Pointer(& value)));
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    UnsafePointer::operator T()
    {
        T result;
        result.noCopy = this->noCopy;
        result.value = this->value;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool UnsafePointer::operator==(const T& ref) const
    {
        if (noCopy != ref.noCopy) return false;
        if (value != ref.value) return false;
        return true;
    }

    std::ostream& UnsafePointer::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << noCopy;
        os << " " << value;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct UnsafePointer& value)
    {
        return value.PrintTo(os);
    }

    unsafe::Pointer rec::Load(struct UnsafePointer* u)
    {
        return Loadp(unsafe::Pointer(& u->value));
    }

    void rec::StoreNoWB(struct UnsafePointer* u, unsafe::Pointer value)
    {
        StorepNoWB(unsafe::Pointer(& u->value), value);
    }

    void rec::Store(struct UnsafePointer* u, unsafe::Pointer value)
    {
        storePointer(& u->value, value);
    }

    void storePointer(unsafe::Pointer* ptr, unsafe::Pointer go_new)
    /* convertBlockStmt, nil block */;

    bool rec::CompareAndSwapNoWB(struct UnsafePointer* u, unsafe::Pointer old, unsafe::Pointer go_new)
    {
        return Casp1(& u->value, old, go_new);
    }

    bool rec::CompareAndSwap(struct UnsafePointer* u, unsafe::Pointer old, unsafe::Pointer go_new)
    {
        return casPointer(& u->value, old, go_new);
    }

    bool casPointer(unsafe::Pointer* ptr, unsafe::Pointer old, unsafe::Pointer go_new)
    /* convertBlockStmt, nil block */;

    
    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    Pointer<T>::operator U()
    {
        U result;
        result.u = this->u;
        return result;
    }

    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    bool Pointer<T>::operator==(const U& ref) const
    {
        if (u != ref.u) return false;
        return true;
    }

    template<typename T>
    std::ostream& Pointer<T>::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << u;
        os << '}';
        return os;
    }

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Pointer<T>& value)
    {
        return value.PrintTo(os);
    }


    template<typename T>
    T* rec::Load(golang::atomic::Pointer<T>* p)
    {
        return (T*)(rec::Load(gocpp::recv(p->u)));
    }


    template<typename T>
    void rec::StoreNoWB(golang::atomic::Pointer<T>* p, T* value)
    {
        rec::StoreNoWB(gocpp::recv(p->u), unsafe::Pointer(value));
    }


    template<typename T>
    void rec::Store(golang::atomic::Pointer<T>* p, T* value)
    {
        rec::Store(gocpp::recv(p->u), unsafe::Pointer(value));
    }


    template<typename T>
    bool rec::CompareAndSwapNoWB(golang::atomic::Pointer<T>* p, T* old, T* go_new)
    {
        return rec::CompareAndSwapNoWB(gocpp::recv(p->u), unsafe::Pointer(old), unsafe::Pointer(go_new));
    }


    template<typename T>
    bool rec::CompareAndSwap(golang::atomic::Pointer<T>* p, T* old, T* go_new)
    {
        return rec::CompareAndSwap(gocpp::recv(p->u), unsafe::Pointer(old), unsafe::Pointer(go_new));
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    noCopy::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool noCopy::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& noCopy::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct noCopy& value)
    {
        return value.PrintTo(os);
    }

    void rec::Lock(noCopy*)
    {
    }

    void rec::Unlock(noCopy*)
    {
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    align64::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool align64::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& align64::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct align64& value)
    {
        return value.PrintTo(os);
    }

}

