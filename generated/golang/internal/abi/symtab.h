// generated by GoCpp from file '$(ImportDir)/internal/abi/symtab.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/abi/symtab.fwd.h"
#include "gocpp/support.h"

namespace golang::abi
{
    using FuncFlag = uint8_t;
    extern abi.FuncFlag FuncFlagSPWrite;
    extern abi.FuncFlag FuncFlagAsm;
    using FuncID = uint8_t;
    extern abi.FuncID FuncID_abort;
    extern abi.FuncID FuncID_asmcgocall;
    extern abi.FuncID FuncID_asyncPreempt;
    extern abi.FuncID FuncID_cgocallback;
    extern abi.FuncID FuncID_corostart;
    extern abi.FuncID FuncID_debugCallV2;
    extern abi.FuncID FuncID_gcBgMarkWorker;
    extern abi.FuncID FuncID_goexit;
    extern abi.FuncID FuncID_gogo;
    extern abi.FuncID FuncID_gopanic;
    extern abi.FuncID FuncID_handleAsyncEvent;
    extern abi.FuncID FuncID_mcall;
    extern abi.FuncID FuncID_morestack;
    extern abi.FuncID FuncID_mstart;
    extern abi.FuncID FuncID_panicwrap;
    extern abi.FuncID FuncID_rt0_go;
    extern abi.FuncID FuncID_runfinq;
    extern abi.FuncID FuncID_runtime_main;
    extern abi.FuncID FuncID_sigpanic;
    extern abi.FuncID FuncID_systemstack;
    extern abi.FuncID FuncID_systemstack_switch;
    extern abi.FuncID FuncIDWrapper;
    extern int ArgsSizeUnknown;
    extern int PCDATA_UnsafePoint;
    extern int PCDATA_StackMapIndex;
    extern int PCDATA_InlTreeIndex;
    extern int PCDATA_ArgLiveIndex;
    extern int FUNCDATA_ArgsPointerMaps;
    extern int FUNCDATA_LocalsPointerMaps;
    extern int FUNCDATA_StackObjects;
    extern int FUNCDATA_InlTree;
    extern int FUNCDATA_OpenCodedDeferInfo;
    extern int FUNCDATA_ArgInfo;
    extern int FUNCDATA_ArgLiveInfo;
    extern int FUNCDATA_WrapInfo;
    extern int UnsafePointSafe;
    extern int UnsafePointUnsafe;
    extern int UnsafePointRestart1;
    extern int UnsafePointRestart2;
    extern int UnsafePointRestartAtEntry;
}

