// generated by GoCpp from file '$(ImportDir)/runtime/race0.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/race0.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    void raceReadObjectPC(_type* t, unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void raceWriteObjectPC(_type* t, unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    std::tuple<uintptr_t, uintptr_t> raceinit();
    void racefini();
    uintptr_t raceproccreate();
    void raceprocdestroy(uintptr_t ctx);
    void racemapshadow(unsafe::Pointer addr, uintptr_t size);
    void racewritepc(unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void racereadpc(unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void racereadrangepc(unsafe::Pointer addr, uintptr_t sz, uintptr_t callerpc, uintptr_t pc);
    void racewriterangepc(unsafe::Pointer addr, uintptr_t sz, uintptr_t callerpc, uintptr_t pc);
    void raceacquire(unsafe::Pointer addr);
    void raceacquireg(g* gp, unsafe::Pointer addr);
    void raceacquirectx(uintptr_t racectx, unsafe::Pointer addr);
    void racerelease(unsafe::Pointer addr);
    void racereleaseg(g* gp, unsafe::Pointer addr);
    void racereleaseacquire(unsafe::Pointer addr);
    void racereleaseacquireg(g* gp, unsafe::Pointer addr);
    void racereleasemerge(unsafe::Pointer addr);
    void racereleasemergeg(g* gp, unsafe::Pointer addr);
    void racefingo();
    void racemalloc(unsafe::Pointer p, uintptr_t sz);
    void racefree(unsafe::Pointer p, uintptr_t sz);
    uintptr_t racegostart(uintptr_t pc);
    void racegoend();
    void racectxend(uintptr_t racectx);
}

