// generated by GoCpp from file '$(ImportDir)/runtime/malloc.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/malloc.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/goarch/goarch.h"
#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/internal/goos/zgoos_windows.h"
#include "golang/runtime/asan0.h"
#include "golang/runtime/error.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/fastlog2.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/math/math.h"
#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mbitmap.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mem.h"
#include "golang/runtime/mem_windows.h"
#include "golang/runtime/mfinal.h"
#include "golang/runtime/mfixalloc.h"
#include "golang/runtime/mgc.h"
#include "golang/runtime/mgcmark.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/msan0.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
// #include "golang/runtime/race0.h"  [Ignored, known errors]
// #include "golang/runtime/rand.h"  [Ignored, known errors]
// #include "golang/runtime/runtime1.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
#include "golang/runtime/sizeclasses.h"
#include "golang/runtime/slice.h"
#include "golang/runtime/stack.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/stubs_nonlinux.h"
#include "golang/runtime/tagptr.h"
#include "golang/runtime/tagptr_64bit.h"
#include "golang/runtime/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    void mallocinit();
    std::tuple<unsafe::Pointer, uintptr_t> sysAlloc(struct mheap* h, uintptr_t n, arenaHint** hintList, bool register);
    std::tuple<unsafe::Pointer, uintptr_t> sysReserveAligned(unsafe::Pointer v, uintptr_t size, uintptr_t align);
    void enableMetadataHugePages(struct mheap* h);
    gclinkptr nextFreeFast(mspan* s);
    std::tuple<gclinkptr, mspan*, bool> nextFree(struct mcache* c, spanClass spc);
    unsafe::Pointer mallocgc(uintptr_t size, _type* typ, bool needzero);
    g* deductAssistCredit(uintptr_t size);
    void memclrNoHeapPointersChunked(uintptr_t size, unsafe::Pointer x);
    unsafe::Pointer newobject(_type* typ);
    unsafe::Pointer reflect_unsafe_New(_type* typ);
    unsafe::Pointer reflectlite_unsafe_New(_type* typ);
    unsafe::Pointer newarray(_type* typ, int n);
    unsafe::Pointer reflect_unsafe_NewArray(_type* typ, int n);
    void profilealloc(m* mp, unsafe::Pointer x, uintptr_t size);
    uintptr_t nextSample();
    int32_t fastexprand(int mean);
    uintptr_t nextSampleNoFP();
    struct persistentAlloc
    {
        notInHeap* base;
        uintptr_t off;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct persistentAlloc& value);
    unsafe::Pointer persistentalloc(uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    notInHeap* persistentalloc1(uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    bool inPersistentAlloc(uintptr_t p);
    struct linearAlloc
    {
        uintptr_t next;
        uintptr_t mapped;
        uintptr_t end;
        bool mapMemory;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct linearAlloc& value);
    void init(struct linearAlloc* l, uintptr_t base, uintptr_t size, bool mapMemory);
    unsafe::Pointer alloc(struct linearAlloc* l, uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    struct notInHeap
    {
        sys::NotInHeap _;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct notInHeap& value);
    notInHeap* add(struct notInHeap* p, uintptr_t bytes);
    uintptr_t computeRZlog(uintptr_t userSize);
}

