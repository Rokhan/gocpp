// generated by GoCpp from file '$(ImportDir)/syscall/types_windows.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::syscall
{
    const long O_RDONLY = 0x00000;
    const long O_WRONLY = 0x00001;
    const long O_RDWR = 0x00002;
    const long O_CREAT = 0x00040;
    const long O_EXCL = 0x00080;
    const long O_NOCTTY = 0x00100;
    const long O_TRUNC = 0x00200;
    const long O_NONBLOCK = 0x00800;
    const long O_APPEND = 0x00400;
    const long O_SYNC = 0x01000;
    const long O_ASYNC = 0x02000;
    const long O_CLOEXEC = 0x80000;
    const long GENERIC_READ = 0x80000000;
    const long GENERIC_WRITE = 0x40000000;
    const long GENERIC_EXECUTE = 0x20000000;
    const long GENERIC_ALL = 0x10000000;
    const long FILE_LIST_DIRECTORY = 0x00000001;
    const long FILE_APPEND_DATA = 0x00000004;
    const long FILE_WRITE_ATTRIBUTES = 0x00000100;
    const long FILE_SHARE_READ = 0x00000001;
    const long FILE_SHARE_WRITE = 0x00000002;
    const long FILE_SHARE_DELETE = 0x00000004;
    const long FILE_ATTRIBUTE_READONLY = 0x00000001;
    const long FILE_ATTRIBUTE_HIDDEN = 0x00000002;
    const long FILE_ATTRIBUTE_SYSTEM = 0x00000004;
    const long FILE_ATTRIBUTE_DIRECTORY = 0x00000010;
    const long FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
    const long FILE_ATTRIBUTE_NORMAL = 0x00000080;
    const long FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;
    const long INVALID_FILE_ATTRIBUTES = 0xffffffff;
    const long CREATE_NEW = 1;
    const long CREATE_ALWAYS = 2;
    const long OPEN_EXISTING = 3;
    const long OPEN_ALWAYS = 4;
    const long TRUNCATE_EXISTING = 5;
    const long FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
    const long FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
    const long FILE_FLAG_OVERLAPPED = 0x40000000;
    const long HANDLE_FLAG_INHERIT = 0x00000001;
    const long STARTF_USESTDHANDLES = 0x00000100;
    const long STARTF_USESHOWWINDOW = 0x00000001;
    const long DUPLICATE_CLOSE_SOURCE = 0x00000001;
    const long DUPLICATE_SAME_ACCESS = 0x00000002;
    const long STD_INPUT_HANDLE = - 10;
    const long STD_OUTPUT_HANDLE = - 11;
    const long STD_ERROR_HANDLE = - 12;
    const long FILE_BEGIN = 0;
    const long FILE_CURRENT = 1;
    const long FILE_END = 2;
    const long LANG_ENGLISH = 0x09;
    const long SUBLANG_ENGLISH_US = 0x01;
    const long FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;
    const long FORMAT_MESSAGE_IGNORE_INSERTS = 512;
    const long FORMAT_MESSAGE_FROM_STRING = 1024;
    const long FORMAT_MESSAGE_FROM_HMODULE = 2048;
    const long FORMAT_MESSAGE_FROM_SYSTEM = 4096;
    const long FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;
    const long FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
    const long MAX_PATH = 260;
    const long MAX_LONG_PATH = 32768;
    const long MAX_COMPUTERNAME_LENGTH = 15;
    const long TIME_ZONE_ID_UNKNOWN = 0;
    const long TIME_ZONE_ID_STANDARD = 1;
    const long TIME_ZONE_ID_DAYLIGHT = 2;
    const long IGNORE = 0;
    const long INFINITE = 0xffffffff;
    const long WAIT_TIMEOUT = 258;
    const long WAIT_ABANDONED = 0x00000080;
    const long WAIT_OBJECT_0 = 0x00000000;
    const long WAIT_FAILED = 0xFFFFFFFF;
    const long CREATE_NEW_PROCESS_GROUP = 0x00000200;
    const long CREATE_UNICODE_ENVIRONMENT = 0x00000400;
    const long PROCESS_TERMINATE = 1;
    const long PROCESS_QUERY_INFORMATION = 0x00000400;
    const long SYNCHRONIZE = 0x00100000;
    const long PAGE_READONLY = 0x02;
    const long PAGE_READWRITE = 0x04;
    const long PAGE_WRITECOPY = 0x08;
    const long PAGE_EXECUTE_READ = 0x20;
    const long PAGE_EXECUTE_READWRITE = 0x40;
    const long PAGE_EXECUTE_WRITECOPY = 0x80;
    const long FILE_MAP_COPY = 0x01;
    const long FILE_MAP_WRITE = 0x02;
    const long FILE_MAP_READ = 0x04;
    const long FILE_MAP_EXECUTE = 0x20;
    const long CTRL_C_EVENT = 0;
    const long CTRL_BREAK_EVENT = 1;
    const long CTRL_CLOSE_EVENT = 2;
    const long CTRL_LOGOFF_EVENT = 5;
    const long CTRL_SHUTDOWN_EVENT = 6;
    const long TH32CS_SNAPHEAPLIST = 0x01;
    const long TH32CS_SNAPPROCESS = 0x02;
    const long TH32CS_SNAPTHREAD = 0x04;
    const long TH32CS_SNAPMODULE = 0x08;
    const long TH32CS_SNAPMODULE32 = 0x10;
    const long TH32CS_INHERIT = 0x80000000;
    const int FILE_NOTIFY_CHANGE_FILE_NAME = 1 << 0;
    const int FILE_NOTIFY_CHANGE_DIR_NAME = 1 << 1;
    const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 1 << 2;
    const int FILE_NOTIFY_CHANGE_SIZE = 1 << 3;
    const int FILE_NOTIFY_CHANGE_LAST_WRITE = 1 << 4;
    const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 1 << 5;
    const int FILE_NOTIFY_CHANGE_CREATION = 1 << 6;
    const int FILE_ACTION_ADDED = 0 + 1;
    const int FILE_ACTION_REMOVED = 1 + 1;
    const int FILE_ACTION_MODIFIED = 2 + 1;
    const int FILE_ACTION_RENAMED_OLD_NAME = 3 + 1;
    const int FILE_ACTION_RENAMED_NEW_NAME = 4 + 1;
    const long PROV_RSA_FULL = 1;
    const long PROV_RSA_SIG = 2;
    const long PROV_DSS = 3;
    const long PROV_FORTEZZA = 4;
    const long PROV_MS_EXCHANGE = 5;
    const long PROV_SSL = 6;
    const long PROV_RSA_SCHANNEL = 12;
    const long PROV_DSS_DH = 13;
    const long PROV_EC_ECDSA_SIG = 14;
    const long PROV_EC_ECNRA_SIG = 15;
    const long PROV_EC_ECDSA_FULL = 16;
    const long PROV_EC_ECNRA_FULL = 17;
    const long PROV_DH_SCHANNEL = 18;
    const long PROV_SPYRUS_LYNKS = 20;
    const long PROV_RNG = 21;
    const long PROV_INTEL_SEC = 22;
    const long PROV_REPLACE_OWF = 23;
    const long PROV_RSA_AES = 24;
    const long CRYPT_VERIFYCONTEXT = 0xF0000000;
    const long CRYPT_NEWKEYSET = 0x00000008;
    const long CRYPT_DELETEKEYSET = 0x00000010;
    const long CRYPT_MACHINE_KEYSET = 0x00000020;
    const long CRYPT_SILENT = 0x00000040;
    const long CRYPT_DEFAULT_CONTAINER_OPTIONAL = 0x00000080;
    const long USAGE_MATCH_TYPE_AND = 0;
    const long USAGE_MATCH_TYPE_OR = 1;
    const long X509_ASN_ENCODING = 0x00000001;
    const long PKCS_7_ASN_ENCODING = 0x00010000;
    const long CERT_STORE_PROV_MEMORY = 2;
    const long CERT_STORE_ADD_ALWAYS = 4;
    const long CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 0x00000004;
    const long CERT_TRUST_NO_ERROR = 0x00000000;
    const long CERT_TRUST_IS_NOT_TIME_VALID = 0x00000001;
    const long CERT_TRUST_IS_REVOKED = 0x00000004;
    const long CERT_TRUST_IS_NOT_SIGNATURE_VALID = 0x00000008;
    const long CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 0x00000010;
    const long CERT_TRUST_IS_UNTRUSTED_ROOT = 0x00000020;
    const long CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 0x00000040;
    const long CERT_TRUST_IS_CYCLIC = 0x00000080;
    const long CERT_TRUST_INVALID_EXTENSION = 0x00000100;
    const long CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 0x00000200;
    const long CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 0x00000400;
    const long CERT_TRUST_INVALID_NAME_CONSTRAINTS = 0x00000800;
    const long CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 0x00001000;
    const long CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 0x00002000;
    const long CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 0x00004000;
    const long CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 0x00008000;
    const long CERT_TRUST_IS_OFFLINE_REVOCATION = 0x01000000;
    const long CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 0x02000000;
    const long CERT_TRUST_IS_EXPLICIT_DISTRUST = 0x04000000;
    const long CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 0x08000000;
    const long CERT_CHAIN_POLICY_BASE = 1;
    const long CERT_CHAIN_POLICY_AUTHENTICODE = 2;
    const long CERT_CHAIN_POLICY_AUTHENTICODE_TS = 3;
    const long CERT_CHAIN_POLICY_SSL = 4;
    const long CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5;
    const long CERT_CHAIN_POLICY_NT_AUTH = 6;
    const long CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7;
    const long CERT_CHAIN_POLICY_EV = 8;
    const long CERT_E_EXPIRED = 0x800B0101;
    const long CERT_E_ROLE = 0x800B0103;
    const long CERT_E_PURPOSE = 0x800B0106;
    const long CERT_E_UNTRUSTEDROOT = 0x800B0109;
    const long CERT_E_CN_NO_MATCH = 0x800B010F;
    const long AUTHTYPE_CLIENT = 1;
    const long AUTHTYPE_SERVER = 2;
    struct gocpp_id_0;
    using Pointer = gocpp_id_0*;
    struct Timeval;
    struct SecurityAttributes;
    struct FileNotifyInformation;
    struct Filetime;
    struct Win32finddata;
    struct win32finddata1;
    struct ByHandleFileInformation;
    const long GetFileExInfoStandard = 0;
    const long GetFileExMaxInfoLevel = 1;
    struct Win32FileAttributeData;
    const long SW_HIDE = 0;
    const long SW_NORMAL = 1;
    const long SW_SHOWNORMAL = 1;
    const long SW_SHOWMINIMIZED = 2;
    const long SW_SHOWMAXIMIZED = 3;
    const long SW_MAXIMIZE = 3;
    const long SW_SHOWNOACTIVATE = 4;
    const long SW_SHOW = 5;
    const long SW_MINIMIZE = 6;
    const long SW_SHOWMINNOACTIVE = 7;
    const long SW_SHOWNA = 8;
    const long SW_RESTORE = 9;
    const long SW_SHOWDEFAULT = 10;
    const long SW_FORCEMINIMIZE = 11;
    struct _PROC_THREAD_ATTRIBUTE_LIST;
    const long _PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = 0x00020000;
    const long _PROC_THREAD_ATTRIBUTE_HANDLE_LIST = 0x00020002;
    struct _STARTUPINFOEXW;
    const long _EXTENDED_STARTUPINFO_PRESENT = 0x00080000;
    struct ProcessEntry32;
    struct Systemtime;
    struct Timezoneinformation;
    const long AF_UNSPEC = 0;
    const long AF_UNIX = 1;
    const long AF_INET = 2;
    const long AF_INET6 = 23;
    const long AF_NETBIOS = 17;
    const long SOCK_STREAM = 1;
    const long SOCK_DGRAM = 2;
    const long SOCK_RAW = 3;
    const long SOCK_SEQPACKET = 5;
    const long IPPROTO_IP = 0;
    const long IPPROTO_IPV6 = 0x29;
    const long IPPROTO_TCP = 6;
    const long IPPROTO_UDP = 17;
    const long SOL_SOCKET = 0xffff;
    const long SO_REUSEADDR = 4;
    const long SO_KEEPALIVE = 8;
    const long SO_DONTROUTE = 16;
    const long SO_BROADCAST = 32;
    const long SO_LINGER = 128;
    const long SO_RCVBUF = 0x1002;
    const long SO_SNDBUF = 0x1001;
    const long SO_UPDATE_ACCEPT_CONTEXT = 0x700b;
    const long SO_UPDATE_CONNECT_CONTEXT = 0x7010;
    const long IOC_OUT = 0x40000000;
    const long IOC_IN = 0x80000000;
    const long IOC_VENDOR = 0x18000000;
    const long IOC_WS2 = 0x08000000;
    const long IP_TOS = 0x3;
    const long IP_TTL = 0x4;
    const long IP_MULTICAST_IF = 0x9;
    const long IP_MULTICAST_TTL = 0xa;
    const long IP_MULTICAST_LOOP = 0xb;
    const long IP_ADD_MEMBERSHIP = 0xc;
    const long IP_DROP_MEMBERSHIP = 0xd;
    const long IPV6_V6ONLY = 0x1b;
    const long IPV6_UNICAST_HOPS = 0x4;
    const long IPV6_MULTICAST_IF = 0x9;
    const long IPV6_MULTICAST_HOPS = 0xa;
    const long IPV6_MULTICAST_LOOP = 0xb;
    const long IPV6_JOIN_GROUP = 0xc;
    const long IPV6_LEAVE_GROUP = 0xd;
    const long SOMAXCONN = 0x7fffffff;
    const long TCP_NODELAY = 1;
    const long SHUT_RD = 0;
    const long SHUT_WR = 1;
    const long SHUT_RDWR = 2;
    const long WSADESCRIPTION_LEN = 256;
    const long WSASYS_STATUS_LEN = 128;
    struct WSABuf;
    const long S_IFMT = 0x1f000;
    const long S_IFIFO = 0x1000;
    const long S_IFCHR = 0x2000;
    const long S_IFDIR = 0x4000;
    const long S_IFBLK = 0x6000;
    const long S_IFREG = 0x8000;
    const long S_IFLNK = 0xa000;
    const long S_IFSOCK = 0xc000;
    const long S_ISUID = 0x800;
    const long S_ISGID = 0x400;
    const long S_ISVTX = 0x200;
    const long S_IRUSR = 0x100;
    const long S_IWRITE = 0x80;
    const long S_IWUSR = 0x80;
    const long S_IXUSR = 0x40;
    const long FILE_TYPE_CHAR = 0x0002;
    const long FILE_TYPE_DISK = 0x0001;
    const long FILE_TYPE_PIPE = 0x0003;
    const long FILE_TYPE_REMOTE = 0x8000;
    const long FILE_TYPE_UNKNOWN = 0x0000;
    struct Hostent;
    struct Protoent;
    const long DNS_TYPE_A = 0x0001;
    const long DNS_TYPE_NS = 0x0002;
    const long DNS_TYPE_MD = 0x0003;
    const long DNS_TYPE_MF = 0x0004;
    const long DNS_TYPE_CNAME = 0x0005;
    const long DNS_TYPE_SOA = 0x0006;
    const long DNS_TYPE_MB = 0x0007;
    const long DNS_TYPE_MG = 0x0008;
    const long DNS_TYPE_MR = 0x0009;
    const long DNS_TYPE_NULL = 0x000a;
    const long DNS_TYPE_WKS = 0x000b;
    const long DNS_TYPE_PTR = 0x000c;
    const long DNS_TYPE_HINFO = 0x000d;
    const long DNS_TYPE_MINFO = 0x000e;
    const long DNS_TYPE_MX = 0x000f;
    const long DNS_TYPE_TEXT = 0x0010;
    const long DNS_TYPE_RP = 0x0011;
    const long DNS_TYPE_AFSDB = 0x0012;
    const long DNS_TYPE_X25 = 0x0013;
    const long DNS_TYPE_ISDN = 0x0014;
    const long DNS_TYPE_RT = 0x0015;
    const long DNS_TYPE_NSAP = 0x0016;
    const long DNS_TYPE_NSAPPTR = 0x0017;
    const long DNS_TYPE_SIG = 0x0018;
    const long DNS_TYPE_KEY = 0x0019;
    const long DNS_TYPE_PX = 0x001a;
    const long DNS_TYPE_GPOS = 0x001b;
    const long DNS_TYPE_AAAA = 0x001c;
    const long DNS_TYPE_LOC = 0x001d;
    const long DNS_TYPE_NXT = 0x001e;
    const long DNS_TYPE_EID = 0x001f;
    const long DNS_TYPE_NIMLOC = 0x0020;
    const long DNS_TYPE_SRV = 0x0021;
    const long DNS_TYPE_ATMA = 0x0022;
    const long DNS_TYPE_NAPTR = 0x0023;
    const long DNS_TYPE_KX = 0x0024;
    const long DNS_TYPE_CERT = 0x0025;
    const long DNS_TYPE_A6 = 0x0026;
    const long DNS_TYPE_DNAME = 0x0027;
    const long DNS_TYPE_SINK = 0x0028;
    const long DNS_TYPE_OPT = 0x0029;
    const long DNS_TYPE_DS = 0x002B;
    const long DNS_TYPE_RRSIG = 0x002E;
    const long DNS_TYPE_NSEC = 0x002F;
    const long DNS_TYPE_DNSKEY = 0x0030;
    const long DNS_TYPE_DHCID = 0x0031;
    const long DNS_TYPE_UINFO = 0x0064;
    const long DNS_TYPE_UID = 0x0065;
    const long DNS_TYPE_GID = 0x0066;
    const long DNS_TYPE_UNSPEC = 0x0067;
    const long DNS_TYPE_ADDRS = 0x00f8;
    const long DNS_TYPE_TKEY = 0x00f9;
    const long DNS_TYPE_TSIG = 0x00fa;
    const long DNS_TYPE_IXFR = 0x00fb;
    const long DNS_TYPE_AXFR = 0x00fc;
    const long DNS_TYPE_MAILB = 0x00fd;
    const long DNS_TYPE_MAILA = 0x00fe;
    const long DNS_TYPE_ALL = 0x00ff;
    const long DNS_TYPE_ANY = 0x00ff;
    const long DNS_TYPE_WINS = 0xff01;
    const long DNS_TYPE_WINSR = 0xff02;
    const long DNS_TYPE_NBSTAT = 0xff01;
    const long DNS_INFO_NO_RECORDS = 0x251D;
    const long DnsSectionQuestion = 0x0000;
    const long DnsSectionAnswer = 0x0001;
    const long DnsSectionAuthority = 0x0002;
    const long DnsSectionAdditional = 0x0003;
    struct DNSSRVData;
    struct DNSPTRData;
    struct DNSMXData;
    struct DNSTXTData;
    struct DNSRecord;
    const long TF_DISCONNECT = 1;
    const long TF_REUSE_SOCKET = 2;
    const long TF_WRITE_BEHIND = 4;
    const long TF_USE_DEFAULT_WORKER = 0;
    const long TF_USE_SYSTEM_THREAD = 16;
    const long TF_USE_KERNEL_APC = 32;
    struct TransmitFileBuffers;
    const long IFF_UP = 1;
    const long IFF_BROADCAST = 2;
    const long IFF_LOOPBACK = 4;
    const long IFF_POINTTOPOINT = 8;
    const long IFF_MULTICAST = 16;
    const long SIO_GET_INTERFACE_LIST = 0x4004747F;
    using SockaddrGen = gocpp::array<unsigned char, 24>;
    struct InterfaceInfo;
    struct IpAddressString;
    struct IpAddrString;
    const long MAX_ADAPTER_NAME_LENGTH = 256;
    const long MAX_ADAPTER_DESCRIPTION_LENGTH = 128;
    const long MAX_ADAPTER_ADDRESS_LENGTH = 8;
    struct IpAdapterInfo;
    const long MAXLEN_PHYSADDR = 8;
    const long MAX_INTERFACE_NAME_LEN = 256;
    const long MAXLEN_IFDESCR = 256;
    struct MibIfRow;
    struct CertInfo;
    struct CertChainContext;
    struct CertTrustListInfo;
    struct CertSimpleChain;
    struct CertChainElement;
    struct CertRevocationCrlInfo;
    struct CertRevocationInfo;
    struct CertTrustStatus;
    struct CertUsageMatch;
    struct CertEnhKeyUsage;
    struct CertChainPara;
    struct CertChainPolicyPara;
    struct SSLExtraCertChainPolicyPara;
    struct CertChainPolicyStatus;
    const int HKEY_CLASSES_ROOT = 0x80000000 + 0;
    const int HKEY_CURRENT_USER = 0x80000000 + 1;
    const int HKEY_LOCAL_MACHINE = 0x80000000 + 2;
    const int HKEY_USERS = 0x80000000 + 3;
    const int HKEY_PERFORMANCE_DATA = 0x80000000 + 4;
    const int HKEY_CURRENT_CONFIG = 0x80000000 + 5;
    const int HKEY_DYN_DATA = 0x80000000 + 6;
    const long KEY_QUERY_VALUE = 1;
    const long KEY_SET_VALUE = 2;
    const long KEY_CREATE_SUB_KEY = 4;
    const long KEY_ENUMERATE_SUB_KEYS = 8;
    const long KEY_NOTIFY = 16;
    const long KEY_CREATE_LINK = 32;
    const long KEY_WRITE = 0x20006;
    const long KEY_EXECUTE = 0x20019;
    const long KEY_READ = 0x20019;
    const long KEY_WOW64_64KEY = 0x0100;
    const long KEY_WOW64_32KEY = 0x0200;
    const long KEY_ALL_ACCESS = 0xf003f;
    const int REG_NONE = 0;
    const int REG_SZ = 1;
    const int REG_EXPAND_SZ = 2;
    const int REG_BINARY = 3;
    const int REG_DWORD_LITTLE_ENDIAN = 4;
    const int REG_DWORD_BIG_ENDIAN = 5;
    const int REG_LINK = 6;
    const int REG_MULTI_SZ = 7;
    const int REG_RESOURCE_LIST = 8;
    const int REG_FULL_RESOURCE_DESCRIPTOR = 9;
    const int REG_RESOURCE_REQUIREMENTS_LIST = 10;
    const int REG_QWORD_LITTLE_ENDIAN = 11;
    struct AddrinfoW;
    const long AI_PASSIVE = 1;
    const long AI_CANONNAME = 2;
    const long AI_NUMERICHOST = 4;
    struct GUID;
    const long FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;
    const long FILE_SKIP_SET_EVENT_ON_HANDLE = 2;
    const long WSAPROTOCOL_LEN = 255;
    const long MAX_PROTOCOL_CHAIN = 7;
    const long BASE_PROTOCOL = 1;
    const long LAYERED_PROTOCOL = 0;
    const long XP1_CONNECTIONLESS = 0x00000001;
    const long XP1_GUARANTEED_DELIVERY = 0x00000002;
    const long XP1_GUARANTEED_ORDER = 0x00000004;
    const long XP1_MESSAGE_ORIENTED = 0x00000008;
    const long XP1_PSEUDO_STREAM = 0x00000010;
    const long XP1_GRACEFUL_CLOSE = 0x00000020;
    const long XP1_EXPEDITED_DATA = 0x00000040;
    const long XP1_CONNECT_DATA = 0x00000080;
    const long XP1_DISCONNECT_DATA = 0x00000100;
    const long XP1_SUPPORT_BROADCAST = 0x00000200;
    const long XP1_SUPPORT_MULTIPOINT = 0x00000400;
    const long XP1_MULTIPOINT_CONTROL_PLANE = 0x00000800;
    const long XP1_MULTIPOINT_DATA_PLANE = 0x00001000;
    const long XP1_QOS_SUPPORTED = 0x00002000;
    const long XP1_UNI_SEND = 0x00008000;
    const long XP1_UNI_RECV = 0x00010000;
    const long XP1_IFS_HANDLES = 0x00020000;
    const long XP1_PARTIAL_MESSAGE = 0x00040000;
    const long XP1_SAN_SUPPORT_SDP = 0x00080000;
    const long PFL_MULTIPLE_PROTO_ENTRIES = 0x00000001;
    const long PFL_RECOMMENDED_PROTO_ENTRY = 0x00000002;
    const long PFL_HIDDEN = 0x00000004;
    const long PFL_MATCHES_PROTOCOL_ZERO = 0x00000008;
    const long PFL_NETWORKDIRECT_PROVIDER = 0x00000010;
    struct WSAProtocolInfo;
    struct WSAProtocolChain;
    struct TCPKeepalive;
    struct symbolicLinkReparseBuffer;
    struct mountPointReparseBuffer;
    struct reparseDataBuffer;
    const long FSCTL_GET_REPARSE_POINT = 0x900A8;
    const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16 * 1024;
    const long _IO_REPARSE_TAG_MOUNT_POINT = 0xA0000003;
    const long IO_REPARSE_TAG_SYMLINK = 0xA000000C;
    const long SYMBOLIC_LINK_FLAG_DIRECTORY = 0x1;
    const long _SYMLINK_FLAG_RELATIVE = 1;
    const long UNIX_PATH_MAX = 108;
    const int TH32CS_SNAPALL = TH32CS_SNAPHEAPLIST | TH32CS_SNAPMODULE | TH32CS_SNAPPROCESS | TH32CS_SNAPTHREAD;
    const int IOC_INOUT = IOC_IN | IOC_OUT;
    const int SIO_KEEPALIVE_VALS = IOC_IN | IOC_VENDOR | 4;
    const int SIO_UDP_CONNRESET = IOC_IN | IOC_VENDOR | 12;
    using IpMaskString = IpAddressString;
    const int REG_DWORD = REG_DWORD_LITTLE_ENDIAN;
    const int REG_QWORD = REG_QWORD_LITTLE_ENDIAN;
}
#include "golang/syscall/syscall_windows.fwd.h"

namespace golang::syscall
{
    const syscall::Errno ERROR_FILE_NOT_FOUND = 2;
    const syscall::Errno ERROR_PATH_NOT_FOUND = 3;
    const syscall::Errno ERROR_ACCESS_DENIED = 5;
    const syscall::Errno ERROR_NO_MORE_FILES = 18;
    const syscall::Errno ERROR_HANDLE_EOF = 38;
    const syscall::Errno ERROR_NETNAME_DELETED = 64;
    const syscall::Errno ERROR_FILE_EXISTS = 80;
    const syscall::Errno ERROR_BROKEN_PIPE = 109;
    const syscall::Errno ERROR_BUFFER_OVERFLOW = 111;
    const syscall::Errno ERROR_INSUFFICIENT_BUFFER = 122;
    const syscall::Errno ERROR_MOD_NOT_FOUND = 126;
    const syscall::Errno ERROR_PROC_NOT_FOUND = 127;
    const syscall::Errno ERROR_DIR_NOT_EMPTY = 145;
    const syscall::Errno ERROR_ALREADY_EXISTS = 183;
    const syscall::Errno ERROR_ENVVAR_NOT_FOUND = 203;
    const syscall::Errno ERROR_MORE_DATA = 234;
    const syscall::Errno ERROR_OPERATION_ABORTED = 995;
    const syscall::Errno ERROR_IO_PENDING = 997;
    const syscall::Errno ERROR_NOT_FOUND = 1168;
    const syscall::Errno ERROR_PRIVILEGE_NOT_HELD = 1314;
    const syscall::Errno WSAEACCES = 10013;
    const syscall::Errno WSAECONNABORTED = 10053;
    const syscall::Errno WSAECONNRESET = 10054;
    const Signal go_SIGHUP = Signal(0x1);
    const Signal go_SIGINT = Signal(0x2);
    const Signal go_SIGQUIT = Signal(0x3);
    const Signal go_SIGILL = Signal(0x4);
    const Signal go_SIGTRAP = Signal(0x5);
    const Signal go_SIGABRT = Signal(0x6);
    const Signal go_SIGBUS = Signal(0x7);
    const Signal go_SIGFPE = Signal(0x8);
    const Signal go_SIGKILL = Signal(0x9);
    const Signal go_SIGSEGV = Signal(0xb);
    const Signal go_SIGPIPE = Signal(0xd);
    const Signal go_SIGALRM = Signal(0xe);
    const Signal go_SIGTERM = Signal(0xf);
    struct Overlapped;
    struct StartupInfo;
    struct ProcessInformation;
    struct CertContext;
    const int SIO_GET_EXTENSION_FUNCTION_POINTER = IOC_INOUT | IOC_WS2 | 6;
}
