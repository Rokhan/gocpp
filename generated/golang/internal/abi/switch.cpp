// generated by GoCpp from file '$(ImportDir)/internal/abi/switch.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/abi/switch.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"

namespace golang::abi
{
    
    template<typename T> requires gocpp::GoStruct<T>
    InterfaceSwitch::operator T()
    {
        T result;
        result.Cache = this->Cache;
        result.NCases = this->NCases;
        result.Cases = this->Cases;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool InterfaceSwitch::operator==(const T& ref) const
    {
        if (Cache != ref.Cache) return false;
        if (NCases != ref.NCases) return false;
        if (Cases != ref.Cases) return false;
        return true;
    }

    std::ostream& InterfaceSwitch::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Cache;
        os << " " << NCases;
        os << " " << Cases;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitch& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    InterfaceSwitchCache::operator T()
    {
        T result;
        result.Mask = this->Mask;
        result.Entries = this->Entries;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool InterfaceSwitchCache::operator==(const T& ref) const
    {
        if (Mask != ref.Mask) return false;
        if (Entries != ref.Entries) return false;
        return true;
    }

    std::ostream& InterfaceSwitchCache::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Mask;
        os << " " << Entries;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitchCache& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    InterfaceSwitchCacheEntry::operator T()
    {
        T result;
        result.Typ = this->Typ;
        result.Case = this->Case;
        result.Itab = this->Itab;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool InterfaceSwitchCacheEntry::operator==(const T& ref) const
    {
        if (Typ != ref.Typ) return false;
        if (Case != ref.Case) return false;
        if (Itab != ref.Itab) return false;
        return true;
    }

    std::ostream& InterfaceSwitchCacheEntry::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Typ;
        os << " " << Case;
        os << " " << Itab;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitchCacheEntry& value)
    {
        return value.PrintTo(os);
    }

    bool UseInterfaceSwitchCache(std::string goarch)
    {
        if(! go122InterfaceSwitchCache)
        {
            return false;
        }
        //Go switch emulation
        {
            auto condition = goarch;
            int conditionId = -1;
            if(condition == "amd64") { conditionId = 0; }
            if(condition == "arm64") { conditionId = 1; }
            if(condition == "loong64") { conditionId = 2; }
            if(condition == "mips") { conditionId = 3; }
            if(condition == "mipsle") { conditionId = 4; }
            if(condition == "mips64") { conditionId = 5; }
            if(condition == "mips64le") { conditionId = 6; }
            if(condition == "ppc64") { conditionId = 7; }
            if(condition == "ppc64le") { conditionId = 8; }
            if(condition == "riscv64") { conditionId = 9; }
            if(condition == "s390x") { conditionId = 10; }
            switch(conditionId)
            {
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    return true;
                    break;
                default:
                    return false;
                    break;
            }
        }
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    TypeAssert::operator T()
    {
        T result;
        result.Cache = this->Cache;
        result.Inter = this->Inter;
        result.CanFail = this->CanFail;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TypeAssert::operator==(const T& ref) const
    {
        if (Cache != ref.Cache) return false;
        if (Inter != ref.Inter) return false;
        if (CanFail != ref.CanFail) return false;
        return true;
    }

    std::ostream& TypeAssert::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Cache;
        os << " " << Inter;
        os << " " << CanFail;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TypeAssert& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    TypeAssertCache::operator T()
    {
        T result;
        result.Mask = this->Mask;
        result.Entries = this->Entries;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TypeAssertCache::operator==(const T& ref) const
    {
        if (Mask != ref.Mask) return false;
        if (Entries != ref.Entries) return false;
        return true;
    }

    std::ostream& TypeAssertCache::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Mask;
        os << " " << Entries;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TypeAssertCache& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    TypeAssertCacheEntry::operator T()
    {
        T result;
        result.Typ = this->Typ;
        result.Itab = this->Itab;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TypeAssertCacheEntry::operator==(const T& ref) const
    {
        if (Typ != ref.Typ) return false;
        if (Itab != ref.Itab) return false;
        return true;
    }

    std::ostream& TypeAssertCacheEntry::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Typ;
        os << " " << Itab;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TypeAssertCacheEntry& value)
    {
        return value.PrintTo(os);
    }

}

