// generated by GoCpp from file '$(ImportDir)/runtime/select.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/select.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct scase
    {
        hchan* c;
        unsafe::Pointer elem;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct scase& value);
    extern uintptr_t chansendpc;
    extern uintptr_t chanrecvpc;
    void selectsetpc(uintptr_t* pc);
    void sellock(gocpp::slice<scase> scases, gocpp::slice<uint16_t> lockorder);
    void selunlock(gocpp::slice<scase> scases, gocpp::slice<uint16_t> lockorder);
    bool selparkcommit(struct g* gp, unsafe::Pointer _);
    void block();
    std::tuple<int, bool> selectgo(struct scase* cas0, uint16_t* order0, uintptr_t* pc0, int nsends, int nrecvs, bool block);
    struct runtimeSelect
    {
        golang::runtime::selectDir dir;
        unsafe::Pointer typ;
        hchan* ch;
        unsafe::Pointer val;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct runtimeSelect& value);
    std::tuple<int, bool> reflect_rselect(gocpp::slice<runtimeSelect> cases);

    namespace rec
    {
        uintptr_t sortkey(struct hchan* c);
        void dequeueSudoG(struct waitq* q, struct sudog* sgp);
    }
}

