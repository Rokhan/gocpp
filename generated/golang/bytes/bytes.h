// generated by GoCpp from file '$(ImportDir)/bytes/bytes.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/bytes/bytes.fwd.h"
#include "gocpp/support.h"

#include "golang/unicode/letter.h"

namespace golang::bytes
{
    bool Equal(gocpp::slice<unsigned char> a, gocpp::slice<unsigned char> b);
    int Compare(gocpp::slice<unsigned char> a, gocpp::slice<unsigned char> b);
    gocpp::slice<gocpp::slice<unsigned char>> explode(gocpp::slice<unsigned char> s, int n);
    int Count(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    bool Contains(gocpp::slice<unsigned char> b, gocpp::slice<unsigned char> subslice);
    bool ContainsAny(gocpp::slice<unsigned char> b, std::string chars);
    bool ContainsRune(gocpp::slice<unsigned char> b, gocpp::rune r);
    bool ContainsFunc(gocpp::slice<unsigned char> b, std::function<bool (gocpp::rune)> f);
    int IndexByte(gocpp::slice<unsigned char> b, unsigned char c);
    int indexBytePortable(gocpp::slice<unsigned char> s, unsigned char c);
    int LastIndex(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    int LastIndexByte(gocpp::slice<unsigned char> s, unsigned char c);
    int IndexRune(gocpp::slice<unsigned char> s, gocpp::rune r);
    int IndexAny(gocpp::slice<unsigned char> s, std::string chars);
    int LastIndexAny(gocpp::slice<unsigned char> s, std::string chars);
    gocpp::slice<gocpp::slice<unsigned char>> genSplit(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep, int sepSave, int n);
    gocpp::slice<gocpp::slice<unsigned char>> SplitN(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep, int n);
    gocpp::slice<gocpp::slice<unsigned char>> SplitAfterN(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep, int n);
    gocpp::slice<gocpp::slice<unsigned char>> Split(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    gocpp::slice<gocpp::slice<unsigned char>> SplitAfter(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    extern gocpp::array<uint8_t, 256> asciiSpace;
    gocpp::slice<gocpp::slice<unsigned char>> Fields(gocpp::slice<unsigned char> s);
    gocpp::slice<gocpp::slice<unsigned char>> FieldsFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune)> f);
    gocpp::slice<unsigned char> Join(gocpp::slice<gocpp::slice<unsigned char>> s, gocpp::slice<unsigned char> sep);
    bool HasPrefix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> prefix);
    bool HasSuffix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> suffix);
    gocpp::slice<unsigned char> Map(std::function<gocpp::rune (gocpp::rune r)> mapping, gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> Repeat(gocpp::slice<unsigned char> b, int count);
    gocpp::slice<unsigned char> ToUpper(gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToLower(gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToTitle(gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToUpperSpecial(unicode::SpecialCase c, gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToLowerSpecial(unicode::SpecialCase c, gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToTitleSpecial(unicode::SpecialCase c, gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> ToValidUTF8(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> replacement);
    bool isSeparator(gocpp::rune r);
    gocpp::slice<unsigned char> Title(gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> TrimLeftFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f);
    gocpp::slice<unsigned char> TrimRightFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f);
    gocpp::slice<unsigned char> TrimFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f);
    gocpp::slice<unsigned char> TrimPrefix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> prefix);
    gocpp::slice<unsigned char> TrimSuffix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> suffix);
    int IndexFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f);
    int LastIndexFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f);
    int indexFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f, bool truth);
    int lastIndexFunc(gocpp::slice<unsigned char> s, std::function<bool (gocpp::rune r)> f, bool truth);
    std::tuple<bytes::asciiSet, bool> makeASCIISet(std::string chars);
    bool containsRune(std::string s, gocpp::rune r);
    gocpp::slice<unsigned char> Trim(gocpp::slice<unsigned char> s, std::string cutset);
    gocpp::slice<unsigned char> TrimLeft(gocpp::slice<unsigned char> s, std::string cutset);
    gocpp::slice<unsigned char> trimLeftByte(gocpp::slice<unsigned char> s, unsigned char c);
    gocpp::slice<unsigned char> trimLeftASCII(gocpp::slice<unsigned char> s, golang::bytes::asciiSet* as);
    gocpp::slice<unsigned char> trimLeftUnicode(gocpp::slice<unsigned char> s, std::string cutset);
    gocpp::slice<unsigned char> TrimRight(gocpp::slice<unsigned char> s, std::string cutset);
    gocpp::slice<unsigned char> trimRightByte(gocpp::slice<unsigned char> s, unsigned char c);
    gocpp::slice<unsigned char> trimRightASCII(gocpp::slice<unsigned char> s, golang::bytes::asciiSet* as);
    gocpp::slice<unsigned char> trimRightUnicode(gocpp::slice<unsigned char> s, std::string cutset);
    gocpp::slice<unsigned char> TrimSpace(gocpp::slice<unsigned char> s);
    gocpp::slice<gocpp::rune> Runes(gocpp::slice<unsigned char> s);
    gocpp::slice<unsigned char> Replace(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> old, gocpp::slice<unsigned char> go_new, int n);
    gocpp::slice<unsigned char> ReplaceAll(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> old, gocpp::slice<unsigned char> go_new);
    bool EqualFold(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> t);
    int Index(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    std::tuple<gocpp::slice<unsigned char>, gocpp::slice<unsigned char>, bool> Cut(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> sep);
    gocpp::slice<unsigned char> Clone(gocpp::slice<unsigned char> b);
    std::tuple<gocpp::slice<unsigned char>, bool> CutPrefix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> prefix);
    std::tuple<gocpp::slice<unsigned char>, bool> CutSuffix(gocpp::slice<unsigned char> s, gocpp::slice<unsigned char> suffix);

    namespace rec
    {
        bool contains(golang::bytes::asciiSet* as, unsigned char c);
    }
}

