// generated by GoCpp from file '$(ImportDir)/internal/poll/fd_mutex.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd_mutex.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::poll
{
    struct fdMutex
    {
        uint64_t state;
        uint32_t rsema;
        uint32_t wsema;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fdMutex& value);
    extern std::string overflowMsg;
    bool incref(struct fdMutex* mu);
    bool increfAndClose(struct fdMutex* mu);
    bool decref(struct fdMutex* mu);
    bool rwlock(struct fdMutex* mu, bool read);
    bool rwunlock(struct fdMutex* mu, bool read);
    void runtime_Semacquire(uint32_t* sema);
    void runtime_Semrelease(uint32_t* sema);
    struct gocpp::error incref(struct FD* fd);
    struct gocpp::error decref(struct FD* fd);
    struct gocpp::error readLock(struct FD* fd);
    void readUnlock(struct FD* fd);
    struct gocpp::error writeLock(struct FD* fd);
    void writeUnlock(struct FD* fd);
}

