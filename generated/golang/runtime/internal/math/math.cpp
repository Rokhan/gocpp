// generated by GoCpp from file '$(ImportDir)/runtime/internal/math/math.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/internal/math/math.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]

namespace golang::math
{
    uintptr_t MaxUintptr = ^ uintptr(0);
    std::tuple<uintptr_t, bool> MulUintptr(uintptr_t a, uintptr_t b)
    {
        if(a | b < (1 << (4 * goarch.PtrSize)) || a == 0)
        {
            return {a * b, false};
        }
        auto overflow = b > MaxUintptr / a;
        return {a * b, overflow};
    }

    std::tuple<uint64_t, uint64_t> Mul64(uint64_t x, uint64_t y)
    {
        uint64_t hi;
        uint64_t lo;
        auto mask32 = (1 << 32) - 1;
        auto x0 = x & mask32;
        auto x1 = x >> 32;
        auto y0 = y & mask32;
        auto y1 = y >> 32;
        auto w0 = x0 * y0;
        auto t = x1 * y0 + (w0 >> 32);
        auto w1 = t & mask32;
        auto w2 = t >> 32;
        w1 += x0 * y1;
        hi = x1 * y1 + w2 + (w1 >> 32);
        lo = x * y;
        return {hi, lo};
    }

    std::tuple<uint64_t, uint64_t> Add64(uint64_t x, uint64_t y, uint64_t carry)
    {
        uint64_t sum;
        uint64_t carryOut;
        sum = x + y + carry;
        carryOut = ((x & y) | ((x | y) &^ sum)) >> 63;
        return {sum, carryOut};
    }

}

