// generated by GoCpp from file '$(ImportDir)/unicode/utf16/utf16.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/unicode/utf16/utf16.h"
#include "gocpp/support.h"

namespace golang::utf16
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    bool IsSurrogate(gocpp::rune r)
    {
        return surr1 <= r && r < surr3;
    }

    gocpp::rune DecodeRune(gocpp::rune r1, gocpp::rune r2)
    {
        if(surr1 <= r1 && r1 < surr2 && surr2 <= r2 && r2 < surr3)
        {
            return ((r1 - surr1) << 10) | (r2 - surr2) + surrSelf;
        }
        return replacementChar;
    }

    std::tuple<gocpp::rune, gocpp::rune> EncodeRune(gocpp::rune r)
    {
        gocpp::rune r1;
        gocpp::rune r2;
        if(r < surrSelf || r > maxRune)
        {
            return {replacementChar, replacementChar};
        }
        r -= surrSelf;
        return {surr1 + (r >> 10) & 0x3ff, surr2 + r & 0x3ff};
    }

    gocpp::slice<uint16_t> Encode(gocpp::slice<gocpp::rune> s)
    {
        auto n = len(s);
        for(auto [gocpp_ignored, v] : s)
        {
            if(v >= surrSelf)
            {
                n++;
            }
        }
        auto a = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), n);
        n = 0;
        for(auto [gocpp_ignored, v] : s)
        {
            //Go switch emulation
            {
                int conditionId = -1;
                if(0 <= v && v < surr1) { conditionId = 0; }
                else if(surr3 <= v && v < surrSelf) { conditionId = 1; }
                else if(surrSelf <= v && v <= maxRune) { conditionId = 2; }
                switch(conditionId)
                {
                    case 0:
                    case 1:
                        a[n] = uint16_t(v);
                        n++;
                        break;
                    case 2:
                        auto [r1, r2] = EncodeRune(v);
                        a[n] = uint16_t(r1);
                        a[n + 1] = uint16_t(r2);
                        n += 2;
                        break;
                    default:
                        a[n] = uint16_t(replacementChar);
                        n++;
                        break;
                }
            }
        }
        return a.make_slice(0, n);
    }

    gocpp::slice<uint16_t> AppendRune(gocpp::slice<uint16_t> a, gocpp::rune r)
    {
        //Go switch emulation
        {
            int conditionId = -1;
            if(0 <= r && r < surr1) { conditionId = 0; }
            else if(surr3 <= r && r < surrSelf) { conditionId = 1; }
            else if(surrSelf <= r && r <= maxRune) { conditionId = 2; }
            switch(conditionId)
            {
                case 0:
                case 1:
                    return append(a, uint16_t(r));
                    break;
                case 2:
                    auto [r1, r2] = EncodeRune(r);
                    return append(a, uint16_t(r1), uint16_t(r2));
                    break;
            }
        }
        return append(a, replacementChar);
    }

    gocpp::slice<gocpp::rune> Decode(gocpp::slice<uint16_t> s)
    {
        auto buf = gocpp::make(gocpp::Tag<gocpp::slice<gocpp::rune>>(), 0, 64);
        return decode(s, buf);
    }

    gocpp::slice<gocpp::rune> decode(gocpp::slice<uint16_t> s, gocpp::slice<gocpp::rune> buf)
    {
        for(auto i = 0; i < len(s); i++)
        {
            gocpp::rune ar = {};
            //Go switch emulation
            {
                auto r = s[i];
                int conditionId = -1;
                if(r < surr1) { conditionId = 0; }
                else if(surr3 <= r) { conditionId = 1; }
                else if(surr1 <= r && r < surr2 && i + 1 < len(s) && surr2 <= s[i + 1] && s[i + 1] < surr3) { conditionId = 2; }
                switch(conditionId)
                {
                    case 0:
                    case 1:
                        ar = gocpp::rune(r);
                        break;
                    case 2:
                        ar = DecodeRune(gocpp::rune(r), gocpp::rune(s[i + 1]));
                        i++;
                        break;
                    default:
                        ar = replacementChar;
                        break;
                }
            }
            buf = append(buf, ar);
        }
        return buf;
    }

}

