// generated by GoCpp from file '$(ImportDir)/runtime/mfixalloc.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mfixalloc.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/mstats.h"

namespace golang::runtime
{
    struct fixalloc
    {
        uintptr_t size;
        std::function<void (unsafe::Pointer arg, unsafe::Pointer p)> first;
        unsafe::Pointer arg;
        mlink* list;
        uintptr_t chunk;
        uint32_t nchunk;
        uint32_t nalloc;
        uintptr_t inuse;
        golang::runtime::sysMemStat* stat;
        bool zero;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fixalloc& value);
    struct mlink
    {
        sys::NotInHeap _;
        mlink* next;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct mlink& value);

    namespace rec
    {
        void init(struct fixalloc* f, uintptr_t size, std::function<void (unsafe::Pointer arg, unsafe::Pointer p)> first, unsafe::Pointer arg, golang::runtime::sysMemStat* stat);
        unsafe::Pointer alloc(struct fixalloc* f);
        void free(struct fixalloc* f, unsafe::Pointer p);
    }
}

