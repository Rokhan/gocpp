// generated by GoCpp from file '$(ImportDir)/runtime/symtabinl.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/symtabinl.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]

namespace golang::runtime
{
    struct inlinedCall
    {
        abi::FuncID funcID;
        gocpp::array<unsigned char, 3> _;
        int32_t nameOff;
        int32_t parentPc;
        int32_t startLine;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const inlinedCall& value);
    struct inlineUnwinder
    {
        funcInfo f;
        gocpp::array<inlinedCall, 1 << 20>* inlTree;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const inlineUnwinder& value);
    struct inlineFrame
    {
        uintptr_t pc;
        int32_t index;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const inlineFrame& value);
    std::tuple<inlineUnwinder, inlineFrame> newInlineUnwinder(funcInfo f, uintptr_t pc);
    inlineFrame resolveInternal(inlineUnwinder* u, uintptr_t pc);
    bool valid(inlineFrame uf);
    inlineFrame next(inlineUnwinder* u, inlineFrame uf);
    bool isInlined(inlineUnwinder* u, inlineFrame uf);
    srcFunc srcFunc(inlineUnwinder* u, inlineFrame uf);
    std::tuple<std::string, int> fileLine(inlineUnwinder* u, inlineFrame uf);
}

