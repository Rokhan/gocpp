// generated by GoCpp from file '$(ImportDir)/runtime/trace2time.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2time.h"
#include "gocpp/support.h"

#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/runtime/cputicks.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"

namespace golang::runtime
{
    traceTime traceClockNow()
    {
        if(osHasLowResClock)
        {
            return traceTime(cputicks() / traceTimeDiv);
        }
        return traceTime(nanotime() / traceTimeDiv);
    }

    uint64_t traceClockUnitsPerSecond()
    {
        if(osHasLowResClock)
        {
            return uint64_t(ticksPerSecond() / traceTimeDiv);
        }
        return uint64_t(1.0 / double(traceTimeDiv) * 1e9);
    }

    void traceFrequency(uintptr_t gen)
    {
        auto w = unsafeTraceWriter(gen, nullptr);
        std::tie(w, _) = ensure(gocpp::recv(w), 1 + traceBytesPerNumber);
        unsigned char(gocpp::recv(w), unsigned char(traceEvFrequency));
        varint(gocpp::recv(w), traceClockUnitsPerSecond());
        systemstack([=]() mutable -> void
        {
            lock(& trace.lock);
            traceBufFlush(w.traceBuf, gen);
            unlock(& trace.lock);
        }
);
    }

}

