// generated by GoCpp from file '$(ImportDir)/os/file_posix.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/file_posix.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    uint32_t syscallMode(golang::os::FileMode i);
    struct gocpp::error chmod(std::string name, golang::os::FileMode mode);
    struct gocpp::error Chown(std::string name, int uid, int gid);
    struct gocpp::error Lchown(std::string name, int uid, int gid);
    struct gocpp::error Chtimes(std::string name, mocklib::Date atime, mocklib::Date mtime);
    struct gocpp::error ignoringEINTR(std::function<struct gocpp::error ()> fn);

    namespace rec
    {
        struct gocpp::error Close(struct File* f);
        std::tuple<int, struct gocpp::error> read(struct File* f, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> pread(struct File* f, gocpp::slice<unsigned char> b, int64_t off);
        std::tuple<int, struct gocpp::error> write(struct File* f, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> pwrite(struct File* f, gocpp::slice<unsigned char> b, int64_t off);
        struct gocpp::error chmod(struct File* f, golang::os::FileMode mode);
        struct gocpp::error Chown(struct File* f, int uid, int gid);
        struct gocpp::error Truncate(struct File* f, int64_t size);
        struct gocpp::error Sync(struct File* f);
        struct gocpp::error Chdir(struct File* f);
        struct gocpp::error setDeadline(struct File* f, mocklib::Date t);
        struct gocpp::error setReadDeadline(struct File* f, mocklib::Date t);
        struct gocpp::error setWriteDeadline(struct File* f, mocklib::Date t);
        struct gocpp::error checkValid(struct File* f, std::string op);
    }
}

