// generated by GoCpp from file '$(ImportDir)/sync/once.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/once.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"

namespace golang::sync
{
    
    std::ostream& Once::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << done;
        os << " " << m;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const Once& value)
    {
        return value.PrintTo(os);
    }

    void Do(Once* o, std::function<void ()> f)
    {
        if(Load(gocpp::recv(o->done)) == 0)
        {
            doSlow(gocpp::recv(o), f);
        }
    }

    void doSlow(Once* o, std::function<void ()> f)
    {
        gocpp::Defer defer;
        Lock(gocpp::recv(o->m));
        defer.push_back([=]{ Unlock(gocpp::recv(o->m)); });
        if(Load(gocpp::recv(o->done)) == 0)
        {
            defer.push_back([=]{ Store(gocpp::recv(o->done), 1); });
            f();
        }
    }

}

