// generated by GoCpp from file '$(ImportDir)/runtime/mgcsweep.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mgcsweep.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/runtime/asan0.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mem.h"
// #include "golang/runtime/mgcscavenge.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/msan0.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/mstats.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
// #include "golang/runtime/race0.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    struct sweepdata
    {
        mutex lock;
        g* g;
        bool parked;
        activeSweep active;
        sweepClass centralIndex;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct sweepdata& value);
    sweepClass load(sweepClass* s);
    void update(sweepClass* s, sweepClass sNew);
    void clear(sweepClass* s);
    std::tuple<spanClass, bool> split(sweepClass s);
    mspan* nextSpanForSweep(struct mheap* h);
    struct activeSweep
    {
        atomic::Uint32 state;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct activeSweep& value);
    sweepLocker begin(struct activeSweep* a);
    void end(struct activeSweep* a, sweepLocker sl);
    bool markDrained(struct activeSweep* a);
    uint32_t sweepers(struct activeSweep* a);
    bool isDone(struct activeSweep* a);
    void reset(struct activeSweep* a);
    void finishsweep_m();
    void bgsweep(gocpp::channel<int> c);
    struct sweepLocker
    {
        uint32_t sweepGen;
        bool valid;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct sweepLocker& value);
    struct sweepLocked
    {

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct sweepLocked& value);
    std::tuple<sweepLocked, bool> tryAcquire(struct sweepLocker* l, mspan* s);
    uintptr_t sweepone();
    bool isSweepDone();
    void ensureSwept(struct mspan* s);
    bool sweep(struct sweepLocked* sl, bool preserve);
    void reportZombies(struct mspan* s);
    void deductSweepCredit(uintptr_t spanBytes, uintptr_t callerSweepPages);
    void clobberfree(unsafe::Pointer x, uintptr_t size);
    void gcPaceSweeper(uint64_t trigger);
}

