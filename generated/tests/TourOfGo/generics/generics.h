// generated by GoCpp from file 'tests/TourOfGo/generics/generics.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/generics/generics.fwd.h"
#include "gocpp/support.h"


namespace golang::main
{
    
    template<typename T>
    std::tuple<uint32_t, uint32_t> HashStr(T sep);
    template<typename T> 
    struct Wrapper
    {
        T value;

        using isGoStruct = void;

        template<typename U> requires gocpp::GoStruct<U>
        operator U();

        template<typename U> requires gocpp::GoStruct<U>
        bool operator==(const U& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Wrapper<T>& value);
    
    template<typename T>
    T Or(gocpp::slice<T> vals);
    
    template<typename T, typename... Args>
    T Or(Args... vals)
    {
        return Or(gocpp::ToSlice<T>(vals...));
    }
    
    template<typename T, typename... Args>
    T Or(T value, Args... vals)
    {
        return Or(gocpp::ToSlice<T>(value, vals...));
    }
    
    template<typename T>
    T Dummy1(std::string dummy, gocpp::slice<T> vals);
    
    template<typename T, typename... Args>
    T Dummy1(std::string dummy, Args... vals)
    {
        return Dummy1(dummy, gocpp::ToSlice<T>(vals...));
    }
    
    template<typename T, typename... Args>
    T Dummy1(std::string dummy, T value, Args... vals)
    {
        return Dummy1(dummy, gocpp::ToSlice<T>(value, vals...));
    }
    
    template<typename T, typename U>
    U OneOrDefault(gocpp::map<T, U> dummy);
    
    template<typename T>
    bool RemoveOne(gocpp::channel<T> dummy);
    
    template<typename T>
    int UnusedGenericParameter();
    
    template<typename T>
    T Zero();
    
    template<template<typename> class  S, typename E>
    S<E> Grow(S<E> s, int n);
    template<typename T> 
    struct Pointer
    {

        using isGoStruct = void;

        template<typename U> requires gocpp::GoStruct<U>
        operator U();

        template<typename U> requires gocpp::GoStruct<U>
        bool operator==(const U& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Pointer<T>& value);
    struct entry
    {
        golang::main::Pointer<go_any> p;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct entry& value);
    struct entry* newEntry(go_any i);
    void main();

    namespace rec
    {
        
        template<typename T>
        T Get(golang::main::Wrapper<T>* p);
        
        template<typename T>
        void Store(golang::main::Pointer<T>* x, T* val);
    }
}

