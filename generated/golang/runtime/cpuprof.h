// generated by GoCpp from file '$(ImportDir)/runtime/cpuprof.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/cpuprof.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/profbuf.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct cpuProfile
    {
        /* mutex lock; [Known incomplete type] */
        bool on;
        profBuf* log;
        gocpp::array<uintptr_t, 1000> extra;
        int numExtra;
        uint64_t lostExtra;
        uint64_t lostAtomic;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cpuProfile& value);
    void SetCPUProfileRate(int hz);
    void add(struct cpuProfile* p, unsafe::Pointer* tagPtr, gocpp::slice<uintptr_t> stk);
    void addNonGo(struct cpuProfile* p, gocpp::slice<uintptr_t> stk);
    void addExtra(struct cpuProfile* p);
    gocpp::slice<unsigned char> CPUProfile();
    int64_t runtime_pprof_runtime_cyclesPerSecond();
    std::tuple<gocpp::slice<uint64_t>, gocpp::slice<unsafe::Pointer>, bool> runtime_pprof_readProfile();
}

