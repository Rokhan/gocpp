// generated by GoCpp from file 'tests/TourOfGo/concurrency/select.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/concurrency/select.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    void fibonacci(gocpp::channel<int> c, gocpp::channel<int> quit)
    {
        auto [x, y] = std::tuple{0, 1};
        for(; ; )
        {
            //Go select emulation
            {
                int conditionId = -1;
                if(c.trySend(x)) { conditionId = 0; }
                else if(auto [gocpp_ignored , ok] = quit.tryRecv(); ok) { conditionId = 1; }
                switch(conditionId)
                {
                    case 0:
                        std::tie(x, y) = std::tuple{y, x + y};
                        break;
                    case 1:
                        mocklib::Println("quit"s);
                        return;
                        break;
                }
            }
            std::this_thread::yield();
        }
    }

    struct gocpp_id_0
        {

            using isGoStruct = void;

            template<typename T> requires gocpp::GoStruct<T>
            operator T()
            {
                T result;
                return result;
            }

            template<typename T> requires gocpp::GoStruct<T>
            bool operator==(const T& ref) const
            {
                return true;
            }

            std::ostream& PrintTo(std::ostream& os) const
            {
                os << '{';
                os << '}';
                return os;
            }
        };

        std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
        {
            return value.PrintTo(os);
        }


    struct gocpp_id_1
            {

                using isGoStruct = void;

                template<typename T> requires gocpp::GoStruct<T>
                operator T()
                {
                    T result;
                    return result;
                }

                template<typename T> requires gocpp::GoStruct<T>
                bool operator==(const T& ref) const
                {
                    return true;
                }

                std::ostream& PrintTo(std::ostream& os) const
                {
                    os << '{';
                    os << '}';
                    return os;
                }
            };

            std::ostream& operator<<(std::ostream& os, const struct gocpp_id_1& value)
            {
                return value.PrintTo(os);
            }


    void testInlinedType()
    {
        gocpp::channel<gocpp_id_0> wakeup = {};
        //Go select emulation
        {
            int conditionId = -1;
            if(wakeup.trySend(gocpp_id_1 {})) { conditionId = 0; }
            switch(conditionId)
            {
                case 0:
                    break;
                default:
                    break;
            }
        }
        std::this_thread::yield();
    }

    void main()
    {
        auto c = gocpp::make(gocpp::Tag<gocpp::channel<int>>());
        auto quit = gocpp::make(gocpp::Tag<gocpp::channel<int>>());
        gocpp::go([&]{ [=]() mutable -> void
        {
            for(auto i = 0; i < 10; i++)
            {
                mocklib::Println(c.recv());
            }
            quit.send(0);
        }(); });
        fibonacci(c, quit);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
