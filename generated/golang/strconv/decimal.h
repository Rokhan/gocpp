// generated by GoCpp from file '$(ImportDir)/strconv/decimal.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strconv/decimal.fwd.h"
#include "gocpp/support.h"

namespace golang::strconv
{
    struct decimal
    {
        gocpp::array<unsigned char, 800> d;
        int nd;
        int dp;
        bool neg;
        bool trunc;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct decimal& value);
    std::string String(struct decimal* a);
    int digitZero(gocpp::slice<unsigned char> dst);
    void trim(decimal* a);
    void Assign(struct decimal* a, uint64_t v);
    void rightShift(decimal* a, unsigned int k);
    struct leftCheat
    {
        int delta;
        std::string cutoff;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct leftCheat& value);
    extern gocpp::slice<leftCheat> leftcheats;
    bool prefixIsLessThan(gocpp::slice<unsigned char> b, std::string s);
    void leftShift(decimal* a, unsigned int k);
    void Shift(struct decimal* a, int k);
    bool shouldRoundUp(decimal* a, int nd);
    void Round(struct decimal* a, int nd);
    void RoundDown(struct decimal* a, int nd);
    void RoundUp(struct decimal* a, int nd);
    uint64_t RoundedInteger(struct decimal* a);
}

