// generated by GoCpp from file '$(ImportDir)/internal/poll/fd_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::poll
{
    void checkSetFileCompletionNotificationModes();
    void init();
    struct operation
    {
        syscall::Overlapped o;
        uintptr_t runtimeCtx;
        int32_t mode;
        int32_t errno;
        uint32_t qty;
        FD* fd;
        syscall::WSABuf buf;
        windows::WSAMsg msg;
        syscall::Sockaddr sa;
        syscall::RawSockaddrAny* rsa;
        int32_t rsan;
        syscall::Handle handle;
        uint32_t flags;
        gocpp::slice<syscall::WSABuf> bufs;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct operation& value);
    std::tuple<int, struct gocpp::error> execIO(struct operation* o, std::function<struct gocpp::error (struct operation* o)> submit);
    struct FD
    {
        fdMutex fdmu;
        syscall::Handle Sysfd;
        operation rop;
        operation wop;
        pollDesc pd;
        mocklib::Mutex l;
        gocpp::slice<unsigned char> lastbits;
        gocpp::slice<uint16_t> readuint16;
        gocpp::slice<unsigned char> readbyte;
        int readbyteOffset;
        uint32_t csema;
        bool skipSyncNotif;
        bool IsStream;
        bool ZeroReadIsEOF;
        bool isFile;
        poll::fileKind kind;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct FD& value);
    extern std::function<gocpp::error (syscall::Handle, *uint16, uint32_t, *uint32, *byte)> ReadConsole;
    int32_t sockaddrInet4ToRaw(struct syscall::RawSockaddrAny* rsa, struct syscall::SockaddrInet4* sa);
    int32_t sockaddrInet6ToRaw(struct syscall::RawSockaddrAny* rsa, struct syscall::SockaddrInet6* sa);
    void rawToSockaddrInet4(struct syscall::RawSockaddrAny* rsa, struct syscall::SockaddrInet4* sa);
    void rawToSockaddrInet6(struct syscall::RawSockaddrAny* rsa, struct syscall::SockaddrInet6* sa);
    std::tuple<int32_t, struct gocpp::error> sockaddrToRaw(struct syscall::RawSockaddrAny* rsa, struct syscall::Sockaddr sa);

    namespace rec
    {
        void InitBuf(struct operation* o, gocpp::slice<unsigned char> buf);
        void InitBufs(struct operation* o, gocpp::slice<gocpp::slice<unsigned char>>* buf);
        void ClearBufs(struct operation* o);
        void InitMsg(struct operation* o, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob);
        std::tuple<std::string, struct gocpp::error> Init(struct FD* fd, std::string net, bool pollable);
        struct gocpp::error destroy(struct FD* fd);
        struct gocpp::error Close(struct FD* fd);
        std::tuple<int, struct gocpp::error> Read(struct FD* fd, gocpp::slice<unsigned char> buf);
        std::tuple<int, struct gocpp::error> readConsole(struct FD* fd, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> Pread(struct FD* fd, gocpp::slice<unsigned char> b, int64_t off);
        std::tuple<int, struct syscall::Sockaddr, struct gocpp::error> ReadFrom(struct FD* fd, gocpp::slice<unsigned char> buf);
        std::tuple<int, struct gocpp::error> ReadFromInet4(struct FD* fd, gocpp::slice<unsigned char> buf, struct syscall::SockaddrInet4* sa4);
        std::tuple<int, struct gocpp::error> ReadFromInet6(struct FD* fd, gocpp::slice<unsigned char> buf, struct syscall::SockaddrInet6* sa6);
        std::tuple<int, struct gocpp::error> Write(struct FD* fd, gocpp::slice<unsigned char> buf);
        std::tuple<int, struct gocpp::error> writeConsole(struct FD* fd, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> Pwrite(struct FD* fd, gocpp::slice<unsigned char> buf, int64_t off);
        std::tuple<int64_t, struct gocpp::error> Writev(struct FD* fd, gocpp::slice<gocpp::slice<unsigned char>>* buf);
        std::tuple<int, struct gocpp::error> WriteTo(struct FD* fd, gocpp::slice<unsigned char> buf, struct syscall::Sockaddr sa);
        std::tuple<int, struct gocpp::error> WriteToInet4(struct FD* fd, gocpp::slice<unsigned char> buf, struct syscall::SockaddrInet4* sa4);
        std::tuple<int, struct gocpp::error> WriteToInet6(struct FD* fd, gocpp::slice<unsigned char> buf, struct syscall::SockaddrInet6* sa6);
        struct gocpp::error ConnectEx(struct FD* fd, struct syscall::Sockaddr ra);
        std::tuple<std::string, struct gocpp::error> acceptOne(struct FD* fd, syscall::Handle s, gocpp::slice<syscall::RawSockaddrAny> rawsa, struct operation* o);
        std::tuple<syscall::Handle, gocpp::slice<syscall::RawSockaddrAny>, uint32_t, std::string, struct gocpp::error> Accept(struct FD* fd, std::function<std::tuple<syscall::Handle, struct gocpp::error> ()> sysSocket);
        std::tuple<int64_t, struct gocpp::error> Seek(struct FD* fd, int64_t offset, int whence);
        struct gocpp::error Fchmod(struct FD* fd, uint32_t mode);
        struct gocpp::error Fchdir(struct FD* fd);
        std::tuple<uint32_t, struct gocpp::error> GetFileType(struct FD* fd);
        struct gocpp::error GetFileInformationByHandle(struct FD* fd, struct syscall::ByHandleFileInformation* data);
        struct gocpp::error RawRead(struct FD* fd, std::function<bool (uintptr_t)> f);
        struct gocpp::error RawWrite(struct FD* fd, std::function<bool (uintptr_t)> f);
        std::tuple<int, int, int, struct syscall::Sockaddr, struct gocpp::error> ReadMsg(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, int flags);
        std::tuple<int, int, int, struct gocpp::error> ReadMsgInet4(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, int flags, struct syscall::SockaddrInet4* sa4);
        std::tuple<int, int, int, struct gocpp::error> ReadMsgInet6(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, int flags, struct syscall::SockaddrInet6* sa6);
        std::tuple<int, int, struct gocpp::error> WriteMsg(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, struct syscall::Sockaddr sa);
        std::tuple<int, int, struct gocpp::error> WriteMsgInet4(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, struct syscall::SockaddrInet4* sa);
        std::tuple<int, int, struct gocpp::error> WriteMsgInet6(struct FD* fd, gocpp::slice<unsigned char> p, gocpp::slice<unsigned char> oob, struct syscall::SockaddrInet6* sa);
    }
}

