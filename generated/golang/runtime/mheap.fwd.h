// generated by GoCpp from file '$(ImportDir)/runtime/mheap.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const long minPhysPageSize = 4096;
    const int maxPhysPageSize = 512 << 10;
    const long pagesPerReclaimerChunk = 512;
    using mSpanState = uint8_t;
    using spanClass = uint8_t;
    using arenaIdx = unsigned int;
    using spanAllocType = uint8_t;
    const long _KindSpecialFinalizer = 1;
    const long _KindSpecialProfile = 2;
    const long _KindSpecialReachable = 3;
    const long _KindSpecialPinCounter = 4;
    struct specialReachable;
    struct specialPinCounter;
    struct specialsIter;
    const uintptr_t gcBitsChunkBytes = uintptr_t(64 << 10);
    struct gcBitsHeader;
    struct gocpp_id_3;
    const mSpanState mSpanDead = 0;
    const mSpanState mSpanInUse = 1;
    const mSpanState mSpanManual = 2;
    const spanAllocType spanAllocHeap = 0;
    const spanAllocType spanAllocStack = 1;
    const spanAllocType spanAllocPtrScalarBits = 2;
    const spanAllocType spanAllocWorkBuf = 3;
}
// #include "golang/internal/cpu/cpu.fwd.h" [Ignored, known errors]
#include "golang/internal/cpu/cpu_x86.fwd.h"
#include "golang/runtime/extern.fwd.h"
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/internal/sys/nih.fwd.h"
#include "golang/runtime/malloc.fwd.h"
// #include "golang/runtime/mbitmap_allocheaders.fwd.h" [Ignored, known errors]
// #include "golang/runtime/mcache.fwd.h" [Ignored, known errors]
#include "golang/runtime/mcentral.fwd.h"
#include "golang/runtime/mcheckmark.fwd.h"
#include "golang/runtime/mfixalloc.fwd.h"
#include "golang/runtime/mpagealloc.fwd.h"
#include "golang/runtime/mprof.fwd.h"
#include "golang/runtime/mranges.fwd.h"
#include "golang/runtime/runtime2.fwd.h"
#include "golang/runtime/sizeclasses.fwd.h"
#include "golang/runtime/type.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::runtime
{
    const int maxPhysHugePageSize = pallocChunkBytes;
    /*const bool physPageAlignedStacks = GOOS == "openbsd" [known mising deps] */;
    struct mheap;
    struct heapArena;
    struct arenaHint;
    struct mSpanStateBox;
    struct mSpanList;
    struct mspan;
    const int numSpanClasses = _NumSizeClasses << 1;
    const spanClass tinySpanClass = spanClass((tinySizeClass << 1) | 1);
    struct special;
    struct specialfinalizer;
    struct specialprofile;
    struct gcBits;
    /*const uintptr_t gcBitsHeaderBytes = unsafe::Sizeof(gcBitsHeader {}) [known mising deps] */;
    struct gcBitsArena;
}
#include "golang/internal/goarch/goarch.fwd.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.fwd.h"
#include "golang/runtime/asan0.fwd.h"
#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "golang/runtime/internal/atomic/stubs.fwd.h"
// #include "golang/runtime/lock_sema.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/mbitmap.fwd.h"
#include "golang/runtime/mem.fwd.h"
#include "golang/runtime/mfinal.fwd.h"
#include "golang/runtime/mgc.fwd.h"
// #include "golang/runtime/mgclimit.fwd.h" [Ignored, known errors]
#include "golang/runtime/mgcmark.fwd.h"
// #include "golang/runtime/mgcscavenge.fwd.h" [Ignored, known errors]
// #include "golang/runtime/mgcsweep.fwd.h" [Ignored, known errors]
#include "golang/runtime/mpagecache.fwd.h"
#include "golang/runtime/msan0.fwd.h"
#include "golang/runtime/mstats.fwd.h"
// #include "golang/runtime/pagetrace_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/panic.fwd.h"
// #include "golang/runtime/print.fwd.h" [Ignored, known errors]
// #include "golang/runtime/runtime1.fwd.h" [Ignored, known errors]
#include "golang/runtime/slice.fwd.h"
// #include "golang/runtime/stubs.fwd.h" [Ignored, known errors]
#include "golang/runtime/time_nofake.fwd.h"
// #include "golang/runtime/trace2runtime.fwd.h" [Ignored, known errors]
