// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/security_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/security_windows.h"
#include "gocpp/support.h"

#include "golang/internal/syscall/windows/zsyscall_windows.h"
#include "golang/syscall/security_windows.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/zerrors_windows.h"
#include "golang/syscall/zsyscall_windows.h"

namespace golang::windows
{
    
    template<typename T> requires gocpp::GoStruct<T>
    LUID::operator T()
    {
        T result;
        result.LowPart = this->LowPart;
        result.HighPart = this->HighPart;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool LUID::operator==(const T& ref) const
    {
        if (LowPart != ref.LowPart) return false;
        if (HighPart != ref.HighPart) return false;
        return true;
    }

    std::ostream& LUID::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << LowPart;
        os << " " << HighPart;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct LUID& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    LUID_AND_ATTRIBUTES::operator T()
    {
        T result;
        result.Luid = this->Luid;
        result.Attributes = this->Attributes;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool LUID_AND_ATTRIBUTES::operator==(const T& ref) const
    {
        if (Luid != ref.Luid) return false;
        if (Attributes != ref.Attributes) return false;
        return true;
    }

    std::ostream& LUID_AND_ATTRIBUTES::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Luid;
        os << " " << Attributes;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct LUID_AND_ATTRIBUTES& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    TOKEN_PRIVILEGES::operator T()
    {
        T result;
        result.PrivilegeCount = this->PrivilegeCount;
        result.Privileges = this->Privileges;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TOKEN_PRIVILEGES::operator==(const T& ref) const
    {
        if (PrivilegeCount != ref.PrivilegeCount) return false;
        if (Privileges != ref.Privileges) return false;
        return true;
    }

    std::ostream& TOKEN_PRIVILEGES::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << PrivilegeCount;
        os << " " << Privileges;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TOKEN_PRIVILEGES& value)
    {
        return value.PrintTo(os);
    }

    struct gocpp::error AdjustTokenPrivileges(syscall::Token token, bool disableAllPrivileges, struct TOKEN_PRIVILEGES* newstate, uint32_t buflen, struct TOKEN_PRIVILEGES* prevstate, uint32_t* returnlen)
    {
        auto [ret, err] = adjustTokenPrivileges(token, disableAllPrivileges, newstate, buflen, prevstate, returnlen);
        if(ret == 0)
        {
            return err;
        }
        if(err == syscall::EINVAL)
        {
            return nullptr;
        }
        return err;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    SID_AND_ATTRIBUTES::operator T()
    {
        T result;
        result.Sid = this->Sid;
        result.Attributes = this->Attributes;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool SID_AND_ATTRIBUTES::operator==(const T& ref) const
    {
        if (Sid != ref.Sid) return false;
        if (Attributes != ref.Attributes) return false;
        return true;
    }

    std::ostream& SID_AND_ATTRIBUTES::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Sid;
        os << " " << Attributes;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct SID_AND_ATTRIBUTES& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    TOKEN_MANDATORY_LABEL::operator T()
    {
        T result;
        result.Label = this->Label;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TOKEN_MANDATORY_LABEL::operator==(const T& ref) const
    {
        if (Label != ref.Label) return false;
        return true;
    }

    std::ostream& TOKEN_MANDATORY_LABEL::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Label;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TOKEN_MANDATORY_LABEL& value)
    {
        return value.PrintTo(os);
    }

    uint32_t Size(struct TOKEN_MANDATORY_LABEL* tml)
    {
        return uint32_t(gocpp::Sizeof<TOKEN_MANDATORY_LABEL>()) + syscall::GetLengthSid(tml->Label.Sid);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    LocalGroupUserInfo0::operator T()
    {
        T result;
        result.Name = this->Name;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool LocalGroupUserInfo0::operator==(const T& ref) const
    {
        if (Name != ref.Name) return false;
        return true;
    }

    std::ostream& LocalGroupUserInfo0::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct LocalGroupUserInfo0& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    UserInfo4::operator T()
    {
        T result;
        result.Name = this->Name;
        result.Password = this->Password;
        result.PasswordAge = this->PasswordAge;
        result.Priv = this->Priv;
        result.HomeDir = this->HomeDir;
        result.Comment = this->Comment;
        result.Flags = this->Flags;
        result.ScriptPath = this->ScriptPath;
        result.AuthFlags = this->AuthFlags;
        result.FullName = this->FullName;
        result.UsrComment = this->UsrComment;
        result.Parms = this->Parms;
        result.Workstations = this->Workstations;
        result.LastLogon = this->LastLogon;
        result.LastLogoff = this->LastLogoff;
        result.AcctExpires = this->AcctExpires;
        result.MaxStorage = this->MaxStorage;
        result.UnitsPerWeek = this->UnitsPerWeek;
        result.LogonHours = this->LogonHours;
        result.BadPwCount = this->BadPwCount;
        result.NumLogons = this->NumLogons;
        result.LogonServer = this->LogonServer;
        result.CountryCode = this->CountryCode;
        result.CodePage = this->CodePage;
        result.UserSid = this->UserSid;
        result.PrimaryGroupID = this->PrimaryGroupID;
        result.Profile = this->Profile;
        result.HomeDirDrive = this->HomeDirDrive;
        result.PasswordExpired = this->PasswordExpired;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool UserInfo4::operator==(const T& ref) const
    {
        if (Name != ref.Name) return false;
        if (Password != ref.Password) return false;
        if (PasswordAge != ref.PasswordAge) return false;
        if (Priv != ref.Priv) return false;
        if (HomeDir != ref.HomeDir) return false;
        if (Comment != ref.Comment) return false;
        if (Flags != ref.Flags) return false;
        if (ScriptPath != ref.ScriptPath) return false;
        if (AuthFlags != ref.AuthFlags) return false;
        if (FullName != ref.FullName) return false;
        if (UsrComment != ref.UsrComment) return false;
        if (Parms != ref.Parms) return false;
        if (Workstations != ref.Workstations) return false;
        if (LastLogon != ref.LastLogon) return false;
        if (LastLogoff != ref.LastLogoff) return false;
        if (AcctExpires != ref.AcctExpires) return false;
        if (MaxStorage != ref.MaxStorage) return false;
        if (UnitsPerWeek != ref.UnitsPerWeek) return false;
        if (LogonHours != ref.LogonHours) return false;
        if (BadPwCount != ref.BadPwCount) return false;
        if (NumLogons != ref.NumLogons) return false;
        if (LogonServer != ref.LogonServer) return false;
        if (CountryCode != ref.CountryCode) return false;
        if (CodePage != ref.CodePage) return false;
        if (UserSid != ref.UserSid) return false;
        if (PrimaryGroupID != ref.PrimaryGroupID) return false;
        if (Profile != ref.Profile) return false;
        if (HomeDirDrive != ref.HomeDirDrive) return false;
        if (PasswordExpired != ref.PasswordExpired) return false;
        return true;
    }

    std::ostream& UserInfo4::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Password;
        os << " " << PasswordAge;
        os << " " << Priv;
        os << " " << HomeDir;
        os << " " << Comment;
        os << " " << Flags;
        os << " " << ScriptPath;
        os << " " << AuthFlags;
        os << " " << FullName;
        os << " " << UsrComment;
        os << " " << Parms;
        os << " " << Workstations;
        os << " " << LastLogon;
        os << " " << LastLogoff;
        os << " " << AcctExpires;
        os << " " << MaxStorage;
        os << " " << UnitsPerWeek;
        os << " " << LogonHours;
        os << " " << BadPwCount;
        os << " " << NumLogons;
        os << " " << LogonServer;
        os << " " << CountryCode;
        os << " " << CodePage;
        os << " " << UserSid;
        os << " " << PrimaryGroupID;
        os << " " << Profile;
        os << " " << HomeDirDrive;
        os << " " << PasswordExpired;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct UserInfo4& value)
    {
        return value.PrintTo(os);
    }

    std::string GetSystemDirectory()
    /* convertBlockStmt, nil block */;

}

