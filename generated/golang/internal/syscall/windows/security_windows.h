// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/security_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/security_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/syscall/security_windows.h"

namespace golang::windows
{
    struct LUID
    {
        uint32_t LowPart;
        int32_t HighPart;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct LUID& value);
    struct LUID_AND_ATTRIBUTES
    {
        LUID Luid;
        uint32_t Attributes;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct LUID_AND_ATTRIBUTES& value);
    struct TOKEN_PRIVILEGES
    {
        uint32_t PrivilegeCount;
        gocpp::array<LUID_AND_ATTRIBUTES, 1> Privileges;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TOKEN_PRIVILEGES& value);
    struct gocpp::error AdjustTokenPrivileges(syscall::Token token, bool disableAllPrivileges, struct TOKEN_PRIVILEGES* newstate, uint32_t buflen, struct TOKEN_PRIVILEGES* prevstate, uint32_t* returnlen);
    struct SID_AND_ATTRIBUTES
    {
        syscall::SID* Sid;
        uint32_t Attributes;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SID_AND_ATTRIBUTES& value);
    struct TOKEN_MANDATORY_LABEL
    {
        SID_AND_ATTRIBUTES Label;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TOKEN_MANDATORY_LABEL& value);
    uint32_t Size(struct TOKEN_MANDATORY_LABEL* tml);
    struct LocalGroupUserInfo0
    {
        uint16_t* Name;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct LocalGroupUserInfo0& value);
    struct UserInfo4
    {
        uint16_t* Name;
        uint16_t* Password;
        uint32_t PasswordAge;
        uint32_t Priv;
        uint16_t* HomeDir;
        uint16_t* Comment;
        uint32_t Flags;
        uint16_t* ScriptPath;
        uint32_t AuthFlags;
        uint16_t* FullName;
        uint16_t* UsrComment;
        uint16_t* Parms;
        uint16_t* Workstations;
        uint32_t LastLogon;
        uint32_t LastLogoff;
        uint32_t AcctExpires;
        uint32_t MaxStorage;
        uint32_t UnitsPerWeek;
        unsigned char* LogonHours;
        uint32_t BadPwCount;
        uint32_t NumLogons;
        uint16_t* LogonServer;
        uint32_t CountryCode;
        uint32_t CodePage;
        syscall::SID* UserSid;
        uint32_t PrimaryGroupID;
        uint16_t* Profile;
        uint16_t* HomeDirDrive;
        uint32_t PasswordExpired;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct UserInfo4& value);
    std::string GetSystemDirectory();
}

