// generated by GoCpp from file '$(ImportDir)/runtime/rand.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/rand.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    void randinit();
    void readTimeRandom(gocpp::slice<unsigned char> r);
    uint64_t bootstrapRand();
    void bootstrapRandReseed();
    uint32_t rand32();
    uint64_t rand();
    void mrandinit(struct m* mp);
    uint32_t randn(uint32_t n);
    uint32_t cheaprand();
    int64_t cheaprand64();
    uint32_t cheaprandn(uint32_t n);
    uint32_t legacy_fastrand();
    uint32_t legacy_fastrandn(uint32_t n);
    uint64_t legacy_fastrand64();

    namespace rec
    {
    }
}

