// generated by GoCpp from file '$(ImportDir)/runtime/stack.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/stack.h"
#include "gocpp/support.h"

#include "golang/internal/abi/funcpc.h"
#include "golang/internal/abi/stack.h"
// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/internal/cpu/cpu.h"  [Ignored, known errors]
#include "golang/internal/cpu/cpu_x86.h"
#include "golang/internal/goarch/goarch.h"
#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/internal/goos/zgoos_windows.h"
#include "golang/runtime/asan0.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mcheckmark.h"
#include "golang/runtime/mem.h"
#include "golang/runtime/mfixalloc.h"
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
// #include "golang/runtime/mgcpacer.h"  [Ignored, known errors]
// #include "golang/runtime/mgcscavenge.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mpagecache.h"
#include "golang/runtime/mpallocbits.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/msan0.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/mwbbuf.h"
#include "golang/runtime/os_nonopenbsd.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/plugin.h"
// #include "golang/runtime/preempt.h"  [Ignored, known errors]
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
#include "golang/runtime/race0.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/sizeclasses.h"
#include "golang/runtime/stkframe.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/sys_x86.h"
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
// #include "golang/runtime/traceback.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    long stackPoisonCopy = 0;
    struct gocpp_id_0
    {
        stackpoolItem item;
        gocpp::array<unsigned char, (cpu::CacheLinePadSize - gocpp::Sizeof<stackpoolItem>() % cpu::CacheLinePadSize) % cpu::CacheLinePadSize> _;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T()
        {
            T result;
            result.item = this->item;
            result._ = this->_;
            return result;
        }

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const
        {
            if (item != ref.item) return false;
            if (_ != ref._) return false;
            return true;
        }

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << "" << item;
            os << " " << _;
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
    {
        return value.PrintTo(os);
    }


    gocpp::array<gocpp_id_0, _NumStackOrders> stackpool;
    
    template<typename T> requires gocpp::GoStruct<T>
    stackpoolItem::operator T()
    {
        T result;
        result._ = this->_;
        result.mu = this->mu;
        result.span = this->span;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool stackpoolItem::operator==(const T& ref) const
    {
        if (_ != ref._) return false;
        if (mu != ref.mu) return false;
        if (span != ref.span) return false;
        return true;
    }

    std::ostream& stackpoolItem::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << _;
        os << " " << mu;
        os << " " << span;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct stackpoolItem& value)
    {
        return value.PrintTo(os);
    }

    struct gocpp_id_1
    {
        mutex lock;
        gocpp::array<mSpanList, heapAddrBits - pageShift> free;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T()
        {
            T result;
            result.lock = this->lock;
            result.free = this->free;
            return result;
        }

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const
        {
            if (lock != ref.lock) return false;
            if (free != ref.free) return false;
            return true;
        }

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << "" << lock;
            os << " " << free;
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_1& value)
    {
        return value.PrintTo(os);
    }


    gocpp_id_1 stackLarge;
    void stackinit()
    {
        if(_StackCacheSize & _PageMask != 0)
        {
            go_throw("cache size must be a multiple of page size");
        }
        for(auto [i, gocpp_ignored] : stackpool)
        {
            init(gocpp::recv(stackpool[i].item.span));
            lockInit(& stackpool[i].item.mu, lockRankStackpool);
        }
        for(auto [i, gocpp_ignored] : stackLarge.free)
        {
            init(gocpp::recv(stackLarge.free[i]));
            lockInit(& stackLarge.lock, lockRankStackLarge);
        }
    }

    int stacklog2(uintptr_t n)
    {
        auto log2 = 0;
        for(; n > 1; )
        {
            n >>= 1;
            log2++;
        }
        return log2;
    }

    gclinkptr stackpoolalloc(uint8_t order)
    {
        auto list = & stackpool[order].item.span;
        auto s = list->first;
        lockWithRankMayAcquire(& mheap_.lock, lockRankMheap);
        if(s == nullptr)
        {
            s = allocManual(gocpp::recv(mheap_), _StackCacheSize >> _PageShift, spanAllocStack);
            if(s == nullptr)
            {
                go_throw("out of memory");
            }
            if(s->allocCount != 0)
            {
                go_throw("bad allocCount");
            }
            if(ptr(gocpp::recv(s->manualFreeList)) != nullptr)
            {
                go_throw("bad manualFreeList");
            }
            osStackAlloc(s);
            s->elemsize = fixedStack << order;
            for(auto i = uintptr_t(0); i < _StackCacheSize; i += s->elemsize)
            {
                auto x = gclinkptr(base(gocpp::recv(s)) + i);
                ptr(gocpp::recv(x))->next = s->manualFreeList;
                s->manualFreeList = x;
            }
            insert(gocpp::recv(list), s);
        }
        auto x = s->manualFreeList;
        if(ptr(gocpp::recv(x)) == nullptr)
        {
            go_throw("span has no free stacks");
        }
        s->manualFreeList = ptr(gocpp::recv(x))->next;
        s->allocCount++;
        if(ptr(gocpp::recv(s->manualFreeList)) == nullptr)
        {
            remove(gocpp::recv(list), s);
        }
        return x;
    }

    void stackpoolfree(gclinkptr x, uint8_t order)
    {
        auto s = spanOfUnchecked(uintptr_t(x));
        if(get(gocpp::recv(s->state)) != mSpanManual)
        {
            go_throw("freeing stack not in a stack span");
        }
        if(ptr(gocpp::recv(s->manualFreeList)) == nullptr)
        {
            insert(gocpp::recv(stackpool[order].item.span), s);
        }
        ptr(gocpp::recv(x))->next = s->manualFreeList;
        s->manualFreeList = x;
        s->allocCount--;
        if(gcphase == _GCoff && s->allocCount == 0)
        {
            remove(gocpp::recv(stackpool[order].item.span), s);
            s->manualFreeList = 0;
            osStackFree(s);
            freeManual(gocpp::recv(mheap_), s, spanAllocStack);
        }
    }

    void stackcacherefill(mcache* c, uint8_t order)
    {
        if(stackDebug >= 1)
        {
            print("stackcacherefill order=", order, "\n");
        }
        gclinkptr list = {};
        uintptr_t size = {};
        lock(& stackpool[order].item.mu);
        for(; size < _StackCacheSize / 2; )
        {
            auto x = stackpoolalloc(order);
            ptr(gocpp::recv(x))->next = list;
            list = x;
            size += fixedStack << order;
        }
        unlock(& stackpool[order].item.mu);
        c->stackcache[order].list = list;
        c->stackcache[order].size = size;
    }

    void stackcacherelease(mcache* c, uint8_t order)
    {
        if(stackDebug >= 1)
        {
            print("stackcacherelease order=", order, "\n");
        }
        auto x = c->stackcache[order].list;
        auto size = c->stackcache[order].size;
        lock(& stackpool[order].item.mu);
        for(; size > _StackCacheSize / 2; )
        {
            auto y = ptr(gocpp::recv(x))->next;
            stackpoolfree(x, order);
            x = y;
            size -= fixedStack << order;
        }
        unlock(& stackpool[order].item.mu);
        c->stackcache[order].list = x;
        c->stackcache[order].size = size;
    }

    void stackcache_clear(mcache* c)
    {
        if(stackDebug >= 1)
        {
            print("stackcache clear\n");
        }
        for(auto order = uint8_t(0); order < _NumStackOrders; order++)
        {
            lock(& stackpool[order].item.mu);
            auto x = c->stackcache[order].list;
            for(; ptr(gocpp::recv(x)) != nullptr; )
            {
                auto y = ptr(gocpp::recv(x))->next;
                stackpoolfree(x, order);
                x = y;
            }
            c->stackcache[order].list = 0;
            c->stackcache[order].size = 0;
            unlock(& stackpool[order].item.mu);
        }
    }

    stack stackalloc(uint32_t n)
    {
        auto thisg = getg();
        if(thisg != thisg->m->g0)
        {
            go_throw("stackalloc not on scheduler stack");
        }
        if(n & (n - 1) != 0)
        {
            go_throw("stack size not a power of 2");
        }
        if(stackDebug >= 1)
        {
            print("stackalloc ", n, "\n");
        }
        if(debug.efence != 0 || stackFromSystem != 0)
        {
            n = uint32_t(alignUp(uintptr_t(n), physPageSize));
            auto v = sysAlloc(uintptr_t(n), & memstats.stacks_sys);
            if(v == nullptr)
            {
                go_throw("out of memory (stackalloc)");
            }
            return stack {uintptr_t(v), uintptr_t(v) + uintptr_t(n)};
        }
        unsafe::Pointer v = {};
        if(n < (fixedStack << _NumStackOrders) && n < _StackCacheSize)
        {
            auto order = uint8_t(0);
            auto n2 = n;
            for(; n2 > fixedStack; )
            {
                order++;
                n2 >>= 1;
            }
            gclinkptr x = {};
            if(stackNoCache != 0 || thisg->m->p == 0 || thisg->m->preemptoff != "")
            {
                lock(& stackpool[order].item.mu);
                x = stackpoolalloc(order);
                unlock(& stackpool[order].item.mu);
            }
            else
            {
                auto c = ptr(gocpp::recv(thisg->m->p))->mcache;
                x = c->stackcache[order].list;
                if(ptr(gocpp::recv(x)) == nullptr)
                {
                    stackcacherefill(c, order);
                    x = c->stackcache[order].list;
                }
                c->stackcache[order].list = ptr(gocpp::recv(x))->next;
                c->stackcache[order].size -= uintptr_t(n);
            }
            v = unsafe::Pointer(x);
        }
        else
        {
            mspan* s = {};
            auto npage = uintptr_t(n) >> _PageShift;
            auto log2npage = stacklog2(npage);
            lock(& stackLarge.lock);
            if(! isEmpty(gocpp::recv(stackLarge.free[log2npage])))
            {
                s = stackLarge.free[log2npage].first;
                remove(gocpp::recv(stackLarge.free[log2npage]), s);
            }
            unlock(& stackLarge.lock);
            lockWithRankMayAcquire(& mheap_.lock, lockRankMheap);
            if(s == nullptr)
            {
                s = allocManual(gocpp::recv(mheap_), npage, spanAllocStack);
                if(s == nullptr)
                {
                    go_throw("out of memory");
                }
                osStackAlloc(s);
                s->elemsize = uintptr_t(n);
            }
            v = unsafe::Pointer(base(gocpp::recv(s)));
        }
        if(raceenabled)
        {
            racemalloc(v, uintptr_t(n));
        }
        if(msanenabled)
        {
            msanmalloc(v, uintptr_t(n));
        }
        if(asanenabled)
        {
            asanunpoison(v, uintptr_t(n));
        }
        if(stackDebug >= 1)
        {
            print("  allocated ", v, "\n");
        }
        return stack {uintptr_t(v), uintptr_t(v) + uintptr_t(n)};
    }

    void stackfree(stack stk)
    {
        auto gp = getg();
        auto v = unsafe::Pointer(stk.lo);
        auto n = stk.hi - stk.lo;
        if(n & (n - 1) != 0)
        {
            go_throw("stack not a power of 2");
        }
        if(stk.lo + n < stk.hi)
        {
            go_throw("bad stack size");
        }
        if(stackDebug >= 1)
        {
            println("stackfree", v, n);
            memclrNoHeapPointers(v, n);
        }
        if(debug.efence != 0 || stackFromSystem != 0)
        {
            if(debug.efence != 0 || stackFaultOnFree != 0)
            {
                sysFault(v, n);
            }
            else
            {
                sysFree(v, n, & memstats.stacks_sys);
            }
            return;
        }
        if(msanenabled)
        {
            msanfree(v, n);
        }
        if(asanenabled)
        {
            asanpoison(v, n);
        }
        if(n < (fixedStack << _NumStackOrders) && n < _StackCacheSize)
        {
            auto order = uint8_t(0);
            auto n2 = n;
            for(; n2 > fixedStack; )
            {
                order++;
                n2 >>= 1;
            }
            auto x = gclinkptr(v);
            if(stackNoCache != 0 || gp->m->p == 0 || gp->m->preemptoff != "")
            {
                lock(& stackpool[order].item.mu);
                stackpoolfree(x, order);
                unlock(& stackpool[order].item.mu);
            }
            else
            {
                auto c = ptr(gocpp::recv(gp->m->p))->mcache;
                if(c->stackcache[order].size >= _StackCacheSize)
                {
                    stackcacherelease(c, order);
                }
                ptr(gocpp::recv(x))->next = c->stackcache[order].list;
                c->stackcache[order].list = x;
                c->stackcache[order].size += n;
            }
        }
        else
        {
            auto s = spanOfUnchecked(uintptr_t(v));
            if(get(gocpp::recv(s->state)) != mSpanManual)
            {
                println(hex(base(gocpp::recv(s))), v);
                go_throw("bad span state");
            }
            if(gcphase == _GCoff)
            {
                osStackFree(s);
                freeManual(gocpp::recv(mheap_), s, spanAllocStack);
            }
            else
            {
                auto log2npage = stacklog2(s->npages);
                lock(& stackLarge.lock);
                insert(gocpp::recv(stackLarge.free[log2npage]), s);
                unlock(& stackLarge.lock);
            }
        }
    }

    uintptr_t maxstacksize = 1 << 20;
    uintptr_t maxstackceiling = maxstacksize;
    gocpp::slice<std::string> ptrnames = gocpp::Init<gocpp::slice<std::string>>([](gocpp::slice<std::string>& x) { x.0 = "scalar"; x.1 = "ptr"; });
    
    template<typename T> requires gocpp::GoStruct<T>
    adjustinfo::operator T()
    {
        T result;
        result.old = this->old;
        result.delta = this->delta;
        result.sghi = this->sghi;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool adjustinfo::operator==(const T& ref) const
    {
        if (old != ref.old) return false;
        if (delta != ref.delta) return false;
        if (sghi != ref.sghi) return false;
        return true;
    }

    std::ostream& adjustinfo::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << old;
        os << " " << delta;
        os << " " << sghi;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct adjustinfo& value)
    {
        return value.PrintTo(os);
    }

    void adjustpointer(adjustinfo* adjinfo, unsafe::Pointer vpp)
    {
        auto pp = (uintptr_t*)(vpp);
        auto p = *pp;
        if(stackDebug >= 4)
        {
            print("        ", pp, ":", hex(p), "\n");
        }
        if(adjinfo->old.lo <= p && p < adjinfo->old.hi)
        {
            *pp = p + adjinfo->delta;
            if(stackDebug >= 3)
            {
                print("        adjust ptr ", pp, ":", hex(p), " -> ", hex(*pp), "\n");
            }
        }
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    bitvector::operator T()
    {
        T result;
        result.n = this->n;
        result.bytedata = this->bytedata;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool bitvector::operator==(const T& ref) const
    {
        if (n != ref.n) return false;
        if (bytedata != ref.bytedata) return false;
        return true;
    }

    std::ostream& bitvector::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << n;
        os << " " << bytedata;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct bitvector& value)
    {
        return value.PrintTo(os);
    }

    uint8_t ptrbit(struct bitvector* bv, uintptr_t i)
    {
        auto b = *(addb(bv->bytedata, i / 8));
        return (b >> (i % 8)) & 1;
    }

    void adjustpointers(unsafe::Pointer scanp, bitvector* bv, adjustinfo* adjinfo, funcInfo f)
    {
        auto minp = adjinfo->old.lo;
        auto maxp = adjinfo->old.hi;
        auto delta = adjinfo->delta;
        auto num = uintptr_t(bv->n);
        auto useCAS = uintptr_t(scanp) < adjinfo->sghi;
        for(auto i = uintptr_t(0); i < num; i += 8)
        {
            if(stackDebug >= 4)
            {
                for(auto j = uintptr_t(0); j < 8; j++)
                {
                    print("        ", add(scanp, (i + j) * goarch::PtrSize), ":", ptrnames[ptrbit(gocpp::recv(bv), i + j)], ":", hex(*(uintptr_t*)(add(scanp, (i + j) * goarch::PtrSize))), " # ", i, " ", *addb(bv->bytedata, i / 8), "\n");
                }
            }
            auto b = *(addb(bv->bytedata, i / 8));
            for(; b != 0; )
            {
                auto j = uintptr_t(sys::TrailingZeros8(b));
                b &= b - 1;
                auto pp = (uintptr_t*)(add(scanp, (i + j) * goarch::PtrSize));
                retry:
                auto p = *pp;
                if(valid(gocpp::recv(f)) && 0 < p && p < minLegalPointer && debug.invalidptr != 0)
                {
                    getg()->m->traceback = 2;
                    print("runtime: bad pointer in frame ", funcname(f), " at ", pp, ": ", hex(p), "\n");
                    go_throw("invalid pointer found on stack");
                }
                if(minp <= p && p < maxp)
                {
                    if(stackDebug >= 3)
                    {
                        print("adjust ptr ", hex(p), " ", funcname(f), "\n");
                    }
                    if(useCAS)
                    {
                        auto ppu = (unsafe::Pointer*)(unsafe::Pointer(pp));
                        if(! atomic::Casp1(ppu, unsafe::Pointer(p), unsafe::Pointer(p + delta)))
                        {
                            goto retry;
                        }
                    }
                    else
                    {
                        *pp = p + delta;
                    }
                }
            }
        }
    }

    void adjustframe(stkframe* frame, adjustinfo* adjinfo)
    {
        if(frame->continpc == 0)
        {
            return;
        }
        auto f = frame->fn;
        if(stackDebug >= 2)
        {
            print("    adjusting ", funcname(f), " frame=[", hex(frame->sp), ",", hex(frame->fp), "] pc=", hex(frame->pc), " continpc=", hex(frame->continpc), "\n");
        }
        if((goarch::ArchFamily == goarch::AMD64 || goarch::ArchFamily == goarch::ARM64) && frame->argp - frame->varp == 2 * goarch::PtrSize)
        {
            if(stackDebug >= 3)
            {
                print("      saved bp\n");
            }
            if(debugCheckBP)
            {
                auto bp = *(uintptr_t*)(unsafe::Pointer(frame->varp));
                if(bp != 0 && (bp < adjinfo->old.lo || bp >= adjinfo->old.hi))
                {
                    println("runtime: found invalid frame pointer");
                    print("bp=", hex(bp), " min=", hex(adjinfo->old.lo), " max=", hex(adjinfo->old.hi), "\n");
                    go_throw("bad frame pointer");
                }
            }
            adjustpointer(adjinfo, unsafe::Pointer(frame->varp));
        }
        auto [locals, args, objs] = getStackMap(gocpp::recv(frame), true);
        if(locals.n > 0)
        {
            auto size = uintptr_t(locals.n) * goarch::PtrSize;
            adjustpointers(unsafe::Pointer(frame->varp - size), & locals, adjinfo, f);
        }
        if(args.n > 0)
        {
            if(stackDebug >= 3)
            {
                print("      args\n");
            }
            adjustpointers(unsafe::Pointer(frame->argp), & args, adjinfo, funcInfo {});
        }
        if(frame->varp != 0)
        {
            for(auto [i, gocpp_ignored] : objs)
            {
                auto obj = & objs[i];
                auto off = obj->off;
                auto base = frame->varp;
                if(off >= 0)
                {
                    base = frame->argp;
                }
                auto p = base + uintptr_t(off);
                if(p < frame->sp)
                {
                    continue;
                }
                auto ptrdata = ptrdata(gocpp::recv(obj));
                auto gcdata = gcdata(gocpp::recv(obj));
                mspan* s = {};
                if(useGCProg(gocpp::recv(obj)))
                {
                    s = materializeGCProg(ptrdata, gcdata);
                    gcdata = (unsigned char*)(unsafe::Pointer(s->startAddr));
                }
                for(auto i = uintptr_t(0); i < ptrdata; i += goarch::PtrSize)
                {
                    if((*addb(gcdata, i / (8 * goarch::PtrSize)) >> (i / goarch::PtrSize & 7)) & 1 != 0)
                    {
                        adjustpointer(adjinfo, unsafe::Pointer(p + i));
                    }
                }
                if(s != nullptr)
                {
                    dematerializeGCProg(s);
                }
            }
        }
    }

    void adjustctxt(g* gp, adjustinfo* adjinfo)
    {
        adjustpointer(adjinfo, unsafe::Pointer(& gp->sched.ctxt));
        if(! framepointer_enabled)
        {
            return;
        }
        if(debugCheckBP)
        {
            auto bp = gp->sched.bp;
            if(bp != 0 && (bp < adjinfo->old.lo || bp >= adjinfo->old.hi))
            {
                println("runtime: found invalid top frame pointer");
                print("bp=", hex(bp), " min=", hex(adjinfo->old.lo), " max=", hex(adjinfo->old.hi), "\n");
                go_throw("bad top frame pointer");
            }
        }
        auto oldfp = gp->sched.bp;
        adjustpointer(adjinfo, unsafe::Pointer(& gp->sched.bp));
        if(GOARCH == "arm64")
        {
            if(oldfp == gp->sched.sp - goarch::PtrSize)
            {
                memmove(unsafe::Pointer(gp->sched.bp), unsafe::Pointer(oldfp), goarch::PtrSize);
                adjustpointer(adjinfo, unsafe::Pointer(gp->sched.bp));
            }
        }
    }

    void adjustdefers(g* gp, adjustinfo* adjinfo)
    {
        adjustpointer(adjinfo, unsafe::Pointer(& gp->_defer));
        for(auto d = gp->_defer; d != nullptr; d = d->link)
        {
            adjustpointer(adjinfo, unsafe::Pointer(& d->fn));
            adjustpointer(adjinfo, unsafe::Pointer(& d->sp));
            adjustpointer(adjinfo, unsafe::Pointer(& d->link));
        }
    }

    void adjustpanics(g* gp, adjustinfo* adjinfo)
    {
        adjustpointer(adjinfo, unsafe::Pointer(& gp->_panic));
    }

    void adjustsudogs(g* gp, adjustinfo* adjinfo)
    {
        for(auto s = gp->waiting; s != nullptr; s = s->waitlink)
        {
            adjustpointer(adjinfo, unsafe::Pointer(& s->elem));
        }
    }

    void fillstack(stack stk, unsigned char b)
    {
        for(auto p = stk.lo; p < stk.hi; p++)
        {
            *(unsigned char*)(unsafe::Pointer(p)) = b;
        }
    }

    uintptr_t findsghi(g* gp, stack stk)
    {
        uintptr_t sghi = {};
        for(auto sg = gp->waiting; sg != nullptr; sg = sg->waitlink)
        {
            auto p = uintptr_t(sg->elem) + uintptr_t(sg->c->elemsize);
            if(stk.lo <= p && p < stk.hi && p > sghi)
            {
                sghi = p;
            }
        }
        return sghi;
    }

    uintptr_t syncadjustsudogs(g* gp, uintptr_t used, adjustinfo* adjinfo)
    {
        if(gp->waiting == nullptr)
        {
            return 0;
        }
        hchan* lastc = {};
        for(auto sg = gp->waiting; sg != nullptr; sg = sg->waitlink)
        {
            if(sg->c != lastc)
            {
                lockWithRank(& sg->c->lock, lockRankHchanLeaf);
            }
            lastc = sg->c;
        }
        adjustsudogs(gp, adjinfo);
        uintptr_t sgsize = {};
        if(adjinfo->sghi != 0)
        {
            auto oldBot = adjinfo->old.hi - used;
            auto newBot = oldBot + adjinfo->delta;
            sgsize = adjinfo->sghi - oldBot;
            memmove(unsafe::Pointer(newBot), unsafe::Pointer(oldBot), sgsize);
        }
        lastc = nullptr;
        for(auto sg = gp->waiting; sg != nullptr; sg = sg->waitlink)
        {
            if(sg->c != lastc)
            {
                unlock(& sg->c->lock);
            }
            lastc = sg->c;
        }
        return sgsize;
    }

    void copystack(g* gp, uintptr_t newsize)
    {
        if(gp->syscallsp != 0)
        {
            go_throw("stack growth not allowed in system call");
        }
        auto old = gp->stack;
        if(old.lo == 0)
        {
            go_throw("nil stackbase");
        }
        auto used = old.hi - gp->sched.sp;
        addScannableStack(gocpp::recv(gcController), ptr(gocpp::recv(getg()->m->p)), int64_t(newsize) - int64_t(old.hi - old.lo));
        auto go_new = stackalloc(uint32_t(newsize));
        if(stackPoisonCopy != 0)
        {
            fillstack(go_new, 0xfd);
        }
        if(stackDebug >= 1)
        {
            print("copystack gp=", gp, " [", hex(old.lo), " ", hex(old.hi - used), " ", hex(old.hi), "]", " -> [", hex(go_new.lo), " ", hex(go_new.hi - used), " ", hex(go_new.hi), "]/", newsize, "\n");
        }
        adjustinfo adjinfo = {};
        adjinfo->old = old;
        adjinfo->delta = go_new.hi - old.hi;
        auto ncopy = used;
        if(! gp->activeStackChans)
        {
            if(newsize < old.hi - old.lo && Load(gocpp::recv(gp->parkingOnChan)))
            {
                go_throw("racy sudog adjustment due to parking on channel");
            }
            adjustsudogs(gp, & adjinfo);
        }
        else
        {
            adjinfo->sghi = findsghi(gp, old);
            ncopy -= syncadjustsudogs(gp, used, & adjinfo);
        }
        memmove(unsafe::Pointer(go_new.hi - ncopy), unsafe::Pointer(old.hi - ncopy), ncopy);
        adjustctxt(gp, & adjinfo);
        adjustdefers(gp, & adjinfo);
        adjustpanics(gp, & adjinfo);
        if(adjinfo->sghi != 0)
        {
            adjinfo->sghi += adjinfo->delta;
        }
        gp->stack = go_new;
        gp->stackguard0 = go_new.lo + stackGuard;
        gp->sched.sp = go_new.hi - used;
        gp->stktopsp += adjinfo->delta;
        unwinder u = {};
        for(init(gocpp::recv(u), gp, 0); valid(gocpp::recv(u)); next(gocpp::recv(u)))
        {
            adjustframe(& u.frame, & adjinfo);
        }
        if(stackPoisonCopy != 0)
        {
            fillstack(old, 0xfc);
        }
        stackfree(old);
    }

    int32_t round2(int32_t x)
    {
        auto s = (unsigned int)(0);
        for(; (1 << s) < x; )
        {
            s++;
        }
        return 1 << s;
    }

    void newstack()
    {
        auto thisg = getg();
        if(ptr(gocpp::recv(thisg->m->morebuf.g))->stackguard0 == stackFork)
        {
            go_throw("stack growth after fork");
        }
        if(ptr(gocpp::recv(thisg->m->morebuf.g)) != thisg->m->curg)
        {
            print("runtime: newstack called from g=", hex(thisg->m->morebuf.g), "\n" + "\tm=", thisg->m, " m->curg=", thisg->m->curg, " m->g0=", thisg->m->g0, " m->gsignal=", thisg->m->gsignal, "\n");
            auto morebuf = thisg->m->morebuf;
            traceback(morebuf.pc, morebuf.sp, morebuf.lr, ptr(gocpp::recv(morebuf.g)));
            go_throw("runtime: wrong goroutine in newstack");
        }
        auto gp = thisg->m->curg;
        if(thisg->m->curg->throwsplit)
        {
            auto morebuf = thisg->m->morebuf;
            gp->syscallsp = morebuf.sp;
            gp->syscallpc = morebuf.pc;
            auto [pcname, pcoff] = std::tuple{"(unknown)", uintptr_t(0)};
            auto f = findfunc(gp->sched.pc);
            if(valid(gocpp::recv(f)))
            {
                pcname = funcname(f);
                pcoff = gp->sched.pc - entry(gocpp::recv(f));
            }
            print("runtime: newstack at ", pcname, "+", hex(pcoff), " sp=", hex(gp->sched.sp), " stack=[", hex(gp->stack.lo), ", ", hex(gp->stack.hi), "]\n", "\tmorebuf={pc:", hex(morebuf.pc), " sp:", hex(morebuf.sp), " lr:", hex(morebuf.lr), "}\n", "\tsched={pc:", hex(gp->sched.pc), " sp:", hex(gp->sched.sp), " lr:", hex(gp->sched.lr), " ctxt:", gp->sched.ctxt, "}\n");
            thisg->m->traceback = 2;
            traceback(morebuf.pc, morebuf.sp, morebuf.lr, gp);
            go_throw("runtime: stack split at bad time");
        }
        auto morebuf = thisg->m->morebuf;
        thisg->m->morebuf.pc = 0;
        thisg->m->morebuf.lr = 0;
        thisg->m->morebuf.sp = 0;
        thisg->m->morebuf.g = 0;
        auto stackguard0 = atomic::Loaduintptr(& gp->stackguard0);
        auto preempt = stackguard0 == stackPreempt;
        if(preempt)
        {
            if(! canPreemptM(thisg->m))
            {
                gp->stackguard0 = gp->stack.lo + stackGuard;
                gogo(& gp->sched);
            }
        }
        if(gp->stack.lo == 0)
        {
            go_throw("missing stack in newstack");
        }
        auto sp = gp->sched.sp;
        if(goarch::ArchFamily == goarch::AMD64 || goarch::ArchFamily == goarch::I386 || goarch::ArchFamily == goarch::WASM)
        {
            sp -= goarch::PtrSize;
        }
        if(stackDebug >= 1 || sp < gp->stack.lo)
        {
            print("runtime: newstack sp=", hex(sp), " stack=[", hex(gp->stack.lo), ", ", hex(gp->stack.hi), "]\n", "\tmorebuf={pc:", hex(morebuf.pc), " sp:", hex(morebuf.sp), " lr:", hex(morebuf.lr), "}\n", "\tsched={pc:", hex(gp->sched.pc), " sp:", hex(gp->sched.sp), " lr:", hex(gp->sched.lr), " ctxt:", gp->sched.ctxt, "}\n");
        }
        if(sp < gp->stack.lo)
        {
            print("runtime: gp=", gp, ", goid=", gp->goid, ", gp->status=", hex(readgstatus(gp)), "\n ");
            print("runtime: split stack overflow: ", hex(sp), " < ", hex(gp->stack.lo), "\n");
            go_throw("runtime: split stack overflow");
        }
        if(preempt)
        {
            if(gp == thisg->m->g0)
            {
                go_throw("runtime: preempt g0");
            }
            if(thisg->m->p == 0 && thisg->m->locks == 0)
            {
                go_throw("runtime: g is running but p is not");
            }
            if(gp->preemptShrink)
            {
                gp->preemptShrink = false;
                shrinkstack(gp);
            }
            if(gp->preemptStop)
            {
                preemptPark(gp);
            }
            gopreempt_m(gp);
        }
        auto oldsize = gp->stack.hi - gp->stack.lo;
        auto newsize = oldsize * 2;
        if(auto f = findfunc(gp->sched.pc); valid(gocpp::recv(f)))
        {
            auto max = uintptr_t(funcMaxSPDelta(f));
            auto needed = max + stackGuard;
            auto used = gp->stack.hi - gp->sched.sp;
            for(; newsize - used < needed; )
            {
                newsize *= 2;
            }
        }
        if(stackguard0 == stackForceMove)
        {
            newsize = oldsize;
        }
        if(newsize > maxstacksize || newsize > maxstackceiling)
        {
            if(maxstacksize < maxstackceiling)
            {
                print("runtime: goroutine stack exceeds ", maxstacksize, "-byte limit\n");
            }
            else
            {
                print("runtime: goroutine stack exceeds ", maxstackceiling, "-byte limit\n");
            }
            print("runtime: sp=", hex(sp), " stack=[", hex(gp->stack.lo), ", ", hex(gp->stack.hi), "]\n");
            go_throw("stack overflow");
        }
        casgstatus(gp, _Grunning, _Gcopystack);
        copystack(gp, newsize);
        if(stackDebug >= 1)
        {
            print("stack grow done\n");
        }
        casgstatus(gp, _Gcopystack, _Grunning);
        gogo(& gp->sched);
    }

    void nilfunc()
    {
        *(uint8_t*)(nullptr) = 0;
    }

    void gostartcallfn(gobuf* gobuf, funcval* fv)
    {
        unsafe::Pointer fn = {};
        if(fv != nullptr)
        {
            fn = unsafe::Pointer(fv->fn);
        }
        else
        {
            fn = unsafe::Pointer(abi::FuncPCABIInternal(nilfunc));
        }
        gostartcall(gobuf, fn, unsafe::Pointer(fv));
    }

    bool isShrinkStackSafe(g* gp)
    {
        return gp->syscallsp == 0 && ! gp->asyncSafePoint && ! Load(gocpp::recv(gp->parkingOnChan));
    }

    void shrinkstack(g* gp)
    {
        if(gp->stack.lo == 0)
        {
            go_throw("missing stack in shrinkstack");
        }
        if(auto s = readgstatus(gp); s & _Gscan == 0)
        {
            if(! (gp == getg()->m->curg && getg() != getg()->m->curg && s == _Grunning))
            {
                go_throw("bad status in shrinkstack");
            }
        }
        if(! isShrinkStackSafe(gp))
        {
            go_throw("shrinkstack at bad time");
        }
        if(gp == getg()->m->curg && gp->m->libcallsp != 0)
        {
            go_throw("shrinking stack in libcall");
        }
        if(debug.gcshrinkstackoff > 0)
        {
            return;
        }
        auto f = findfunc(gp->startpc);
        if(valid(gocpp::recv(f)) && f.funcID == abi::FuncID_gcBgMarkWorker)
        {
            return;
        }
        auto oldsize = gp->stack.hi - gp->stack.lo;
        auto newsize = oldsize / 2;
        if(newsize < fixedStack)
        {
            return;
        }
        auto avail = gp->stack.hi - gp->stack.lo;
        if(auto used = gp->stack.hi - gp->sched.sp + stackNosplit; used >= avail / 4)
        {
            return;
        }
        if(stackDebug > 0)
        {
            print("shrinking stack ", oldsize, "->", newsize, "\n");
        }
        copystack(gp, newsize);
    }

    void freeStackSpans()
    {
        for(auto [order, gocpp_ignored] : stackpool)
        {
            lock(& stackpool[order].item.mu);
            auto list = & stackpool[order].item.span;
            for(auto s = list->first; s != nullptr; )
            {
                auto next = s->next;
                if(s->allocCount == 0)
                {
                    remove(gocpp::recv(list), s);
                    s->manualFreeList = 0;
                    osStackFree(s);
                    freeManual(gocpp::recv(mheap_), s, spanAllocStack);
                }
                s = next;
            }
            unlock(& stackpool[order].item.mu);
        }
        lock(& stackLarge.lock);
        for(auto [i, gocpp_ignored] : stackLarge.free)
        {
            for(auto s = stackLarge.free[i].first; s != nullptr; )
            {
                auto next = s->next;
                remove(gocpp::recv(stackLarge.free[i]), s);
                osStackFree(s);
                freeManual(gocpp::recv(mheap_), s, spanAllocStack);
                s = next;
            }
        }
        unlock(& stackLarge.lock);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    stackObjectRecord::operator T()
    {
        T result;
        result.off = this->off;
        result.size = this->size;
        result._ptrdata = this->_ptrdata;
        result.gcdataoff = this->gcdataoff;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool stackObjectRecord::operator==(const T& ref) const
    {
        if (off != ref.off) return false;
        if (size != ref.size) return false;
        if (_ptrdata != ref._ptrdata) return false;
        if (gcdataoff != ref.gcdataoff) return false;
        return true;
    }

    std::ostream& stackObjectRecord::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << off;
        os << " " << size;
        os << " " << _ptrdata;
        os << " " << gcdataoff;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct stackObjectRecord& value)
    {
        return value.PrintTo(os);
    }

    bool useGCProg(struct stackObjectRecord* r)
    {
        return r->_ptrdata < 0;
    }

    uintptr_t ptrdata(struct stackObjectRecord* r)
    {
        auto x = r->_ptrdata;
        if(x < 0)
        {
            return uintptr_t(- x);
        }
        return uintptr_t(x);
    }

    unsigned char* gcdata(struct stackObjectRecord* r)
    {
        auto ptr = uintptr_t(unsafe::Pointer(r));
        moduledata* mod = {};
        for(auto datap = & firstmoduledata; datap != nullptr; datap = datap->next)
        {
            if(datap->gofunc <= ptr && ptr < datap->end)
            {
                mod = datap;
                break;
            }
        }
        auto res = mod->rodata + uintptr_t(r->gcdataoff);
        return (unsigned char*)(unsafe::Pointer(res));
    }

    void morestackc()
    {
        go_throw("attempt to execute system stack code on user stack");
    }

    uint32_t startingStackSize = fixedStack;
    void gcComputeStartingStackSize()
    {
        if(debug.adaptivestackstart == 0)
        {
            return;
        }
        uint64_t scannedStackSize = {};
        uint64_t scannedStacks = {};
        for(auto [_, p] : allp)
        {
            scannedStackSize += p->scannedStackSize;
            scannedStacks += p->scannedStacks;
            p->scannedStackSize = 0;
            p->scannedStacks = 0;
        }
        if(scannedStacks == 0)
        {
            startingStackSize = fixedStack;
            return;
        }
        auto avg = scannedStackSize / scannedStacks + stackGuard;
        if(avg > uint64_t(maxstacksize))
        {
            avg = uint64_t(maxstacksize);
        }
        if(avg < fixedStack)
        {
            avg = fixedStack;
        }
        startingStackSize = uint32_t(round2(int32_t(avg)));
    }

}

