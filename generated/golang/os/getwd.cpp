// generated by GoCpp from file '$(ImportDir)/os/getwd.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/getwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir.h"
#include "golang/os/dir_windows.h"
#include "golang/os/env.h"
#include "golang/os/error.h"
#include "golang/os/file.h"
#include "golang/os/file_posix.h"
#include "golang/os/file_windows.h"
#include "golang/os/stat_windows.h"
#include "golang/os/types.h"
#include "golang/runtime/extern.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/syscall/zerrors_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fs::rec;
        using namespace os::rec;
        using namespace poll::rec;
        using namespace runtime::rec;
        using namespace sync::rec;
        using namespace syscall::rec;
        using namespace time::rec;
        using namespace windows::rec;
    }

    struct gocpp_id_0
    {
        std::string dir;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T()
        {
            T result;
            result.dir = this->dir;
            return result;
        }

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const
        {
            if (dir != ref.dir) return false;
            return true;
        }

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << "" << dir;
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
    {
        return value.PrintTo(os);
    }


    gocpp_id_0 getwdCache;
    std::tuple<std::string, struct gocpp::error> Getwd()
    {
        std::string dir;
        struct gocpp::error err;
        if(mocklib::GOOS == "windows" || mocklib::GOOS == "plan9")
        {
            std::string dir;
            struct gocpp::error err;
            return syscall::Getwd();
        }
        auto [dot, err] = statNolog(".");
        if(err != nullptr)
        {
            std::string dir;
            struct gocpp::error err;
            return {"", err};
        }
        dir = Getenv("PWD");
        if(len(dir) > 0 && dir[0] == '/')
        {
            std::string dir;
            struct gocpp::error err;
            auto [d, err] = statNolog(dir);
            if(err == nullptr && SameFile(dot, d))
            {
                std::string dir;
                struct gocpp::error err;
                return {dir, nullptr};
            }
        }
        if(syscall::ImplementsGetwd)
        {
            std::string dir;
            struct gocpp::error err;
            std::string s = {};
            gocpp::error e = {};
            for(; ; )
            {
                std::string dir;
                struct gocpp::error err;
                std::tie(s, e) = syscall::Getwd();
                if(e != syscall::go_EINTR)
                {
                    std::string dir;
                    struct gocpp::error err;
                    break;
                }
            }
            return {s, NewSyscallError("getwd", e)};
        }
        rec::Lock(gocpp::recv(getwdCache));
        dir = getwdCache.dir;
        rec::Unlock(gocpp::recv(getwdCache));
        if(len(dir) > 0)
        {
            std::string dir;
            struct gocpp::error err;
            auto [d, err] = statNolog(dir);
            if(err == nullptr && SameFile(dot, d))
            {
                std::string dir;
                struct gocpp::error err;
                return {dir, nullptr};
            }
        }
        fs::FileInfo root;
        std::tie(root, err) = statNolog("/");
        if(err != nullptr)
        {
            std::string dir;
            struct gocpp::error err;
            return {"", err};
        }
        if(SameFile(root, dot))
        {
            std::string dir;
            struct gocpp::error err;
            return {"/", nullptr};
        }
        dir = "";
        for(auto parent = ".."; ; parent = "../" + parent)
        {
            std::string dir;
            struct gocpp::error err;
            if(len(parent) >= 1024)
            {
                std::string dir;
                struct gocpp::error err;
                return {"", syscall::go_ENAMETOOLONG};
            }
            auto [fd, err] = openFileNolog(parent, O_RDONLY, 0);
            if(err != nullptr)
            {
                std::string dir;
                struct gocpp::error err;
                return {"", err};
            }
            for(; ; )
            {
                std::string dir;
                struct gocpp::error err;
                auto [names, err] = rec::Readdirnames(gocpp::recv(fd), 100);
                if(err != nullptr)
                {
                    std::string dir;
                    struct gocpp::error err;
                    rec::Close(gocpp::recv(fd));
                    return {"", err};
                }
                for(auto [gocpp_ignored, name] : names)
                {
                    std::string dir;
                    struct gocpp::error err;
                    auto [d, gocpp_id_2] = lstatNolog(parent + "/" + name);
                    if(SameFile(d, dot))
                    {
                        std::string dir;
                        struct gocpp::error err;
                        dir = "/" + name + dir;
                        goto Found;
                    }
                }
            }
            Found:
            fs::FileInfo pd;
            std::tie(pd, err) = rec::Stat(gocpp::recv(fd));
            rec::Close(gocpp::recv(fd));
            if(err != nullptr)
            {
                std::string dir;
                struct gocpp::error err;
                return {"", err};
            }
            if(SameFile(pd, root))
            {
                std::string dir;
                struct gocpp::error err;
                break;
            }
            dot = pd;
        }
        rec::Lock(gocpp::recv(getwdCache));
        getwdCache.dir = dir;
        rec::Unlock(gocpp::recv(getwdCache));
        return {dir, nullptr};
    }

}

