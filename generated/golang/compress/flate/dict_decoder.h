// generated by GoCpp from file '$(ImportDir)/compress/flate/dict_decoder.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/compress/flate/dict_decoder.fwd.h"
#include "gocpp/support.h"

namespace golang::flate
{
    struct dictDecoder
    {
        gocpp::slice<unsigned char> hist;
        int wrPos;
        int rdPos;
        bool full;

        using isGoStruct = void;

        template<typename T>
        operator T();

        template<typename T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dictDecoder& value);
    void init(struct dictDecoder* dd, int size, gocpp::slice<unsigned char> dict);
    int histSize(struct dictDecoder* dd);
    int availRead(struct dictDecoder* dd);
    int availWrite(struct dictDecoder* dd);
    gocpp::slice<unsigned char> writeSlice(struct dictDecoder* dd);
    void writeMark(struct dictDecoder* dd, int cnt);
    void writeByte(struct dictDecoder* dd, unsigned char c);
    int writeCopy(struct dictDecoder* dd, int dist, int length);
    int tryWriteCopy(struct dictDecoder* dd, int dist, int length);
    gocpp::slice<unsigned char> readFlush(struct dictDecoder* dd);
}

