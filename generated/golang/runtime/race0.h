// generated by GoCpp from file '$(ImportDir)/runtime/race0.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/race0.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    void raceReadObjectPC(struct _type* t, unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void raceWriteObjectPC(struct _type* t, unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    std::tuple<uintptr_t, uintptr_t> raceinit();
    void racefini();
    uintptr_t raceproccreate();
    void raceprocdestroy(uintptr_t ctx);
    void racemapshadow(unsafe::Pointer addr, uintptr_t size);
    void racewritepc(unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void racereadpc(unsafe::Pointer addr, uintptr_t callerpc, uintptr_t pc);
    void racereadrangepc(unsafe::Pointer addr, uintptr_t sz, uintptr_t callerpc, uintptr_t pc);
    void racewriterangepc(unsafe::Pointer addr, uintptr_t sz, uintptr_t callerpc, uintptr_t pc);
    void raceacquire(unsafe::Pointer addr);
    void raceacquireg(struct g* gp, unsafe::Pointer addr);
    void raceacquirectx(uintptr_t racectx, unsafe::Pointer addr);
    void racerelease(unsafe::Pointer addr);
    void racereleaseg(struct g* gp, unsafe::Pointer addr);
    void racereleaseacquire(unsafe::Pointer addr);
    void racereleaseacquireg(struct g* gp, unsafe::Pointer addr);
    void racereleasemerge(unsafe::Pointer addr);
    void racereleasemergeg(struct g* gp, unsafe::Pointer addr);
    void racefingo();
    void racemalloc(unsafe::Pointer p, uintptr_t sz);
    void racefree(unsafe::Pointer p, uintptr_t sz);
    uintptr_t racegostart(uintptr_t pc);
    void racegoend();
    void racectxend(uintptr_t racectx);

    namespace rec
    {
    }
}

