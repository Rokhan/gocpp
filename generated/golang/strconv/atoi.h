// generated by GoCpp from file '$(ImportDir)/strconv/atoi.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strconv/atoi.fwd.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/strconv/itoa.h"
#include "golang/strconv/quote.h"

namespace golang::strconv
{
    unsigned char lower(unsigned char c);
    extern std::string ErrRange;
    extern std::string ErrSyntax;
    struct NumError
    {
        std::string Func;
        std::string Num;
        std::string Err;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct NumError& value);
    std::string Error(struct NumError* e);
    std::string Unwrap(struct NumError* e);
    std::string cloneString(std::string x);
    NumError* syntaxError(std::string fn, std::string str);
    NumError* rangeError(std::string fn, std::string str);
    NumError* baseError(std::string fn, std::string str, int base);
    NumError* bitSizeError(std::string fn, std::string str, int bitSize);
    extern int intSize;
    extern int IntSize;
    extern int maxUint64;
    std::tuple<uint64_t, std::string> ParseUint(std::string s, int base, int bitSize);
    std::tuple<int64_t, std::string> ParseInt(std::string s, int base, int bitSize);
    std::tuple<int, std::string> Atoi(std::string s);
    bool underscoreOK(std::string s);
}

