// generated by GoCpp from file '$(ImportDir)/sort/slice.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sort/slice.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/reflectlite/swapper.h"
#include "golang/internal/reflectlite/value.h"
#include "golang/math/bits/bits.h"
#include "golang/sort/sort.h"
#include "golang/sort/zsortfunc.h"

namespace golang::sort
{
    namespace rec
    {
        using namespace mocklib::rec;
        using reflectlite::rec::Len;
    }

    // Slice sorts the slice x given the provided less function.
    // It panics if x is not a slice.
    //
    // The sort is not guaranteed to be stable: equal elements
    // may be reversed from their original order.
    // For a stable sort, use [SliceStable].
    //
    // The less function must satisfy the same requirements as
    // the Interface type's Less method.
    //
    // Note: in many situations, the newer [slices.SortFunc] function is more
    // ergonomic and runs faster.
    void Slice(go_any x, std::function<bool (int i, int j)> less)
    {
        auto rv = reflectlite::ValueOf(x);
        auto swap = reflectlite::Swapper(x);
        auto length = rec::Len(gocpp::recv(rv));
        auto limit = bits::Len((unsigned int)(length));
        pdqsort_func(lessSwap {less, swap}, 0, length, limit);
    }

    // SliceStable sorts the slice x using the provided less
    // function, keeping equal elements in their original order.
    // It panics if x is not a slice.
    //
    // The less function must satisfy the same requirements as
    // the Interface type's Less method.
    //
    // Note: in many situations, the newer [slices.SortStableFunc] function is more
    // ergonomic and runs faster.
    void SliceStable(go_any x, std::function<bool (int i, int j)> less)
    {
        auto rv = reflectlite::ValueOf(x);
        auto swap = reflectlite::Swapper(x);
        stable_func(lessSwap {less, swap}, rec::Len(gocpp::recv(rv)));
    }

    // SliceIsSorted reports whether the slice x is sorted according to the provided less function.
    // It panics if x is not a slice.
    //
    // Note: in many situations, the newer [slices.IsSortedFunc] function is more
    // ergonomic and runs faster.
    bool SliceIsSorted(go_any x, std::function<bool (int i, int j)> less)
    {
        auto rv = reflectlite::ValueOf(x);
        auto n = rec::Len(gocpp::recv(rv));
        for(auto i = n - 1; i > 0; i--)
        {
            if(less(i, i - 1))
            {
                return false;
            }
        }
        return true;
    }

}

