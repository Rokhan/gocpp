// generated by GoCpp from file '$(ImportDir)/sort/zsortfunc.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sort/zsortfunc.fwd.h"
#include "gocpp/support.h"

#include "golang/sort/sort.h"

namespace golang::sort
{
    void insertionSort_func(struct lessSwap data, int a, int b);
    void siftDown_func(struct lessSwap data, int lo, int hi, int first);
    void heapSort_func(struct lessSwap data, int a, int b);
    void pdqsort_func(struct lessSwap data, int a, int b, int limit);
    std::tuple<int, bool> partition_func(struct lessSwap data, int a, int b, int pivot);
    int partitionEqual_func(struct lessSwap data, int a, int b, int pivot);
    bool partialInsertionSort_func(struct lessSwap data, int a, int b);
    void breakPatterns_func(struct lessSwap data, int a, int b);
    std::tuple<int, sortedHint> choosePivot_func(struct lessSwap data, int a, int b);
    std::tuple<int, int> order2_func(struct lessSwap data, int a, int b, int* swaps);
    int median_func(struct lessSwap data, int a, int b, int c, int* swaps);
    int medianAdjacent_func(struct lessSwap data, int a, int* swaps);
    void reverseRange_func(struct lessSwap data, int a, int b);
    void swapRange_func(struct lessSwap data, int a, int b, int n);
    void stable_func(struct lessSwap data, int n);
    void symMerge_func(struct lessSwap data, int a, int m, int b);
    void rotate_func(struct lessSwap data, int a, int m, int b);
}

