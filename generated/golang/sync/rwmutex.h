// generated by GoCpp from file '$(ImportDir)/sync/rwmutex.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/rwmutex.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"

namespace golang::sync
{
    struct RWMutex
    {
        Mutex w;
        uint32_t writerSem;
        uint32_t readerSem;
        atomic::Int32 readerCount;
        atomic::Int32 readerWait;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RWMutex& value);
    void RLock(struct RWMutex* rw);
    bool TryRLock(struct RWMutex* rw);
    void RUnlock(struct RWMutex* rw);
    void rUnlockSlow(struct RWMutex* rw, int32_t r);
    void Lock(struct RWMutex* rw);
    bool TryLock(struct RWMutex* rw);
    void Unlock(struct RWMutex* rw);
    bool syscall_hasWaitingReaders(struct RWMutex* rw);
    struct Locker RLocker(struct RWMutex* rw);
    void Lock(struct rlocker* r);
    void Unlock(struct rlocker* r);
}

