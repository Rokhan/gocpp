// generated by GoCpp from file '$(ImportDir)/compress/flate/deflatefast.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/compress/flate/deflatefast.fwd.h"
#include "gocpp/support.h"

#include "golang/compress/flate/token.h"

namespace golang::flate
{
    uint32_t load32(gocpp::slice<unsigned char> b, int32_t i);
    uint64_t load64(gocpp::slice<unsigned char> b, int32_t i);
    uint32_t hash(uint32_t u);
    struct tableEntry
    {
        uint32_t val;
        int32_t offset;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct tableEntry& value);
    struct deflateFast
    {
        gocpp::array<tableEntry, tableSize> table;
        gocpp::slice<unsigned char> prev;
        int32_t cur;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct deflateFast& value);
    deflateFast* newDeflateFast();
    gocpp::slice<token> encode(struct deflateFast* e, gocpp::slice<token> dst, gocpp::slice<unsigned char> src);
    gocpp::slice<token> emitLiteral(gocpp::slice<token> dst, gocpp::slice<unsigned char> lit);
    int32_t matchLen(struct deflateFast* e, int32_t s, int32_t t, gocpp::slice<unsigned char> src);
    void reset(struct deflateFast* e);
    void shiftOffsets(struct deflateFast* e);
}

