// generated by GoCpp from file '$(ImportDir)/encoding/base64/base64.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/encoding/base64/base64.fwd.h"
#include "gocpp/support.h"

#include "golang/encoding/binary/binary.h"
// #include "golang/io/io.h"  [Ignored, known errors]
#include "golang/slices/slices.h"
#include "golang/strconv/atoi.h"
#include "golang/strconv/itoa.h"

namespace golang::base64
{
    struct Encoding
    {
        gocpp::array<unsigned char, 64> encode;
        gocpp::array<uint8_t, 256> decodeMap;
        gocpp::rune padChar;
        bool strict;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const Encoding& value);
    extern std::string decodeMapInitialize;
    extern char invalidIndex;
    Encoding* NewEncoding(std::string encoder);
    Encoding* WithPadding(Encoding enc, gocpp::rune padding);
    Encoding* Strict(Encoding enc);
    extern base64.Encoding* StdEncoding;
    extern base64.Encoding* URLEncoding;
    extern base64.Encoding* RawStdEncoding;
    extern base64.Encoding* RawURLEncoding;
    void Encode(Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    gocpp::slice<unsigned char> AppendEncode(Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::string EncodeToString(Encoding* enc, gocpp::slice<unsigned char> src);
    struct encoder
    {
        std::string err;
        Encoding* enc;
        io::Writer w;
        gocpp::array<unsigned char, 3> buf;
        int nbuf;
        gocpp::array<unsigned char, 1024> out;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const encoder& value);
    std::tuple<int, std::string> Write(encoder* e, gocpp::slice<unsigned char> p);
    std::string Close(encoder* e);
    io::WriteCloser NewEncoder(Encoding* enc, io::Writer w);
    int EncodedLen(Encoding* enc, int n);
    std::string Error(CorruptInputError e);
    std::tuple<int, int, std::string> decodeQuantum(Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src, int si);
    std::tuple<gocpp::slice<unsigned char>, std::string> AppendDecode(Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::tuple<gocpp::slice<unsigned char>, std::string> DecodeString(Encoding* enc, std::string s);
    struct decoder
    {
        std::string err;
        std::string readErr;
        Encoding* enc;
        io::Reader r;
        gocpp::array<unsigned char, 1024> buf;
        int nbuf;
        gocpp::slice<unsigned char> out;
        gocpp::array<unsigned char, 1024 / 4 * 3> outbuf;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const decoder& value);
    std::tuple<int, std::string> Read(decoder* d, gocpp::slice<unsigned char> p);
    std::tuple<int, std::string> Decode(Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::tuple<uint32_t, bool> assemble32(unsigned char n1, unsigned char n2, unsigned char n3, unsigned char n4);
    std::tuple<uint64_t, bool> assemble64(unsigned char n1, unsigned char n2, unsigned char n3, unsigned char n4, unsigned char n5, unsigned char n6, unsigned char n7, unsigned char n8);
    struct newlineFilteringReader
    {
        io::Reader wrapped;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const newlineFilteringReader& value);
    std::tuple<int, std::string> Read(newlineFilteringReader* r, gocpp::slice<unsigned char> p);
    io::Reader NewDecoder(Encoding* enc, io::Reader r);
    int DecodedLen(Encoding* enc, int n);
    int decodedLen(int n, gocpp::rune padChar);
}

