// generated by GoCpp from file '$(ImportDir)/runtime/trace2status.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2status.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagecache.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mwbbuf.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/pinner.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    runtime::traceGoStatus goStatusToTraceGoStatus(uint32_t status, runtime::waitReason wr);
    struct traceSchedResourceState
    {
        gocpp::array<atomic::Uint32, 3> statusTraced;
        gocpp::array<uint64_t, 2> seq;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceSchedResourceState& value);

    namespace rec
    {
        struct traceWriter writeGoStatus(struct traceWriter w, uint64_t goid, int64_t mid, runtime::traceGoStatus status, bool markAssist);
        struct traceWriter writeProcStatusForP(struct traceWriter w, struct p* pp, bool inSTW);
        struct traceWriter writeProcStatus(struct traceWriter w, uint64_t pid, runtime::traceProcStatus status, bool inSweep);
        bool acquireStatus(struct traceSchedResourceState* r, uintptr_t gen);
        void readyNextGen(struct traceSchedResourceState* r, uintptr_t gen);
        bool statusWasTraced(struct traceSchedResourceState* r, uintptr_t gen);
        void setStatusTraced(struct traceSchedResourceState* r, uintptr_t gen);
        runtime::traceArg nextSeq(struct traceSchedResourceState* r, uintptr_t gen);
    }
}

