// generated by GoCpp from file '$(ImportDir)/os/error.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/error.h"
#include "gocpp/support.h"

#include "golang/io/fs/fs.h"
#include "golang/os/error_errno.h"
#include "golang/os/file.h"
#include "golang/syscall/syscall_windows.h"

namespace golang::os
{
    namespace rec
    {
        using namespace mocklib::rec;
        using syscall::rec::Is;
    }

    // Portable analogs of some common system call errors.
    //
    // Errors returned from this package may be tested against these errors
    // with errors.Is.
    // ErrInvalid indicates an invalid argument.
    // Methods on File will return this error when the receiver is nil.
    gocpp::error ErrInvalid = fs::ErrInvalid;
    gocpp::error ErrPermission = fs::ErrPermission;
    gocpp::error ErrExist = fs::ErrExist;
    gocpp::error ErrNotExist = fs::ErrNotExist;
    gocpp::error ErrClosed = fs::ErrClosed;
    gocpp::error ErrNoDeadline = errNoDeadline();
    gocpp::error ErrDeadlineExceeded = errDeadlineExceeded();
    struct gocpp::error errNoDeadline()
    {
        return poll::ErrNoDeadline;
    }

    // errDeadlineExceeded returns the value for os.ErrDeadlineExceeded.
    // This error comes from the internal/poll package, which is also
    // used by package net. Doing it this way ensures that the net
    // package will return os.ErrDeadlineExceeded for an exceeded deadline,
    // as documented by net.Conn.SetDeadline, without requiring any extra
    // work in the net package and without requiring the internal/poll
    // package to import os (which it can't, because that would be circular).
    struct gocpp::error errDeadlineExceeded()
    {
        return poll::ErrDeadlineExceeded;
    }

    
    template<typename T>
    timeout::timeout(T& ref)
    {
        value.reset(new timeoutImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    timeout::timeout(const T& ref)
    {
        value.reset(new timeoutImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    timeout::timeout(T* ptr)
    {
        value.reset(new timeoutImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& timeout::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    bool timeout::timeoutImpl<T, StoreT>::vTimeout()
    {
        return rec::Timeout(gocpp::PtrRecv<T, false>(value.get()));
    }

    namespace rec
    {
        bool Timeout(const gocpp::PtrRecv<struct timeout, false>& self)
        {
            return self.ptr->value->vTimeout();
        }

        bool Timeout(const gocpp::ObjRecv<struct timeout>& self)
        {
            return self.obj.value->vTimeout();
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct timeout& value)
    {
        return value.PrintTo(os);
    }

    // PathError records an error and the operation and file path that caused it.
    // SyscallError records an error from a specific system call.
    
    template<typename T> requires gocpp::GoStruct<T>
    SyscallError::operator T()
    {
        T result;
        result.Syscall = this->Syscall;
        result.Err = this->Err;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool SyscallError::operator==(const T& ref) const
    {
        if (Syscall != ref.Syscall) return false;
        if (Err != ref.Err) return false;
        return true;
    }

    std::ostream& SyscallError::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Syscall;
        os << " " << Err;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct SyscallError& value)
    {
        return value.PrintTo(os);
    }

    std::string rec::Error(struct SyscallError* e)
    {
        return e->Syscall + ": "s + rec::Error(gocpp::recv(e->Err));
    }

    struct gocpp::error rec::Unwrap(struct SyscallError* e)
    {
        return e->Err;
    }

    // Timeout reports whether this error represents a timeout.
    bool rec::Timeout(struct SyscallError* e)
    {
        auto [t, ok] = gocpp::getValue<timeout>(e->Err);
        return ok && rec::Timeout(gocpp::recv(t));
    }

    // NewSyscallError returns, as an error, a new SyscallError
    // with the given system call name and error details.
    // As a convenience, if err is nil, NewSyscallError returns nil.
    struct gocpp::error NewSyscallError(std::string syscall, struct gocpp::error err)
    {
        if(err == nullptr)
        {
            return nullptr;
        }
        return new SyscallError {syscall, err};
    }

    // IsExist returns a boolean indicating whether the error is known to report
    // that a file or directory already exists. It is satisfied by ErrExist as
    // well as some syscall errors.
    //
    // This function predates errors.Is. It only supports errors returned by
    // the os package. New code should use errors.Is(err, fs.ErrExist).
    bool IsExist(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrExist);
    }

    // IsNotExist returns a boolean indicating whether the error is known to
    // report that a file or directory does not exist. It is satisfied by
    // ErrNotExist as well as some syscall errors.
    //
    // This function predates errors.Is. It only supports errors returned by
    // the os package. New code should use errors.Is(err, fs.ErrNotExist).
    bool IsNotExist(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrNotExist);
    }

    // IsPermission returns a boolean indicating whether the error is known to
    // report that permission is denied. It is satisfied by ErrPermission as well
    // as some syscall errors.
    //
    // This function predates errors.Is. It only supports errors returned by
    // the os package. New code should use errors.Is(err, fs.ErrPermission).
    bool IsPermission(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrPermission);
    }

    // IsTimeout returns a boolean indicating whether the error is known
    // to report that a timeout occurred.
    //
    // This function predates errors.Is, and the notion of whether an
    // error indicates a timeout can be ambiguous. For example, the Unix
    // error EWOULDBLOCK sometimes indicates a timeout and sometimes does not.
    // New code should use errors.Is with a value appropriate to the call
    // returning the error, such as os.ErrDeadlineExceeded.
    bool IsTimeout(struct gocpp::error err)
    {
        auto [terr, ok] = gocpp::getValue<timeout>(underlyingError(err));
        return ok && rec::Timeout(gocpp::recv(terr));
    }

    bool underlyingErrorIs(struct gocpp::error err, struct gocpp::error target)
    {
        err = underlyingError(err);
        if(err == target)
        {
            return true;
        }
        auto [e, ok] = gocpp::getValue<syscall::Errno>(err);
        return ok && rec::Is(gocpp::recv(e), target);
    }

    // underlyingError returns the underlying error for known os error types.
    struct gocpp::error underlyingError(struct gocpp::error err)
    {
        //Go type switch emulation
        {
            const auto& gocpp_id_0 = gocpp::type_info(err);
            int conditionId = -1;
            if(gocpp_id_0 == typeid(fs::PathError*)) { conditionId = 0; }
            else if(gocpp_id_0 == typeid(LinkError*)) { conditionId = 1; }
            else if(gocpp_id_0 == typeid(SyscallError*)) { conditionId = 2; }
            switch(conditionId)
            {
                case 0:
                {
                    fs::PathError* err = gocpp::any_cast<fs::PathError*>(err);
                    return err->Err;
                    break;
                }
                case 1:
                {
                    LinkError* err = gocpp::any_cast<LinkError*>(err);
                    return err->Err;
                    break;
                }
                case 2:
                {
                    SyscallError* err = gocpp::any_cast<SyscallError*>(err);
                    return err->Err;
                    break;
                }
            }
        }
        return err;
    }

}

