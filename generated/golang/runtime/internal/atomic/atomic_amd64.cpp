// generated by GoCpp from file '$(ImportDir)/runtime/internal/atomic/atomic_amd64.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "gocpp/support.h"

#include "golang/unsafe/unsafe.h"

namespace golang::atomic
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace unsafe::rec;
    }

    uint32_t Load(uint32_t* ptr)
    {
        return *ptr;
    }

    unsafe::Pointer Loadp(unsafe::Pointer ptr)
    {
        return *(unsafe::Pointer*)(ptr);
    }

    uint64_t Load64(uint64_t* ptr)
    {
        return *ptr;
    }

    uint32_t LoadAcq(uint32_t* ptr)
    {
        return *ptr;
    }

    uint64_t LoadAcq64(uint64_t* ptr)
    {
        return *ptr;
    }

    uintptr_t LoadAcquintptr(uintptr_t* ptr)
    {
        return *ptr;
    }

    uint32_t Xadd(uint32_t* ptr, int32_t delta)
    /* convertBlockStmt, nil block */;

    uint64_t Xadd64(uint64_t* ptr, int64_t delta)
    /* convertBlockStmt, nil block */;

    uintptr_t Xadduintptr(uintptr_t* ptr, uintptr_t delta)
    /* convertBlockStmt, nil block */;

    uint32_t Xchg(uint32_t* ptr, uint32_t go_new)
    /* convertBlockStmt, nil block */;

    uint64_t Xchg64(uint64_t* ptr, uint64_t go_new)
    /* convertBlockStmt, nil block */;

    uintptr_t Xchguintptr(uintptr_t* ptr, uintptr_t go_new)
    /* convertBlockStmt, nil block */;

    uint8_t Load8(uint8_t* ptr)
    {
        return *ptr;
    }

    void And8(uint8_t* ptr, uint8_t val)
    /* convertBlockStmt, nil block */;

    void Or8(uint8_t* ptr, uint8_t val)
    /* convertBlockStmt, nil block */;

    void And(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    void Or(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    uint32_t And32(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    uint32_t Or32(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    uint64_t And64(uint64_t* ptr, uint64_t val)
    /* convertBlockStmt, nil block */;

    uint64_t Or64(uint64_t* ptr, uint64_t val)
    /* convertBlockStmt, nil block */;

    uintptr_t Anduintptr(uintptr_t* ptr, uintptr_t val)
    /* convertBlockStmt, nil block */;

    uintptr_t Oruintptr(uintptr_t* ptr, uintptr_t val)
    /* convertBlockStmt, nil block */;

    bool Cas64(uint64_t* ptr, uint64_t old, uint64_t go_new)
    /* convertBlockStmt, nil block */;

    bool CasRel(uint32_t* ptr, uint32_t old, uint32_t go_new)
    /* convertBlockStmt, nil block */;

    void Store(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    void Store8(uint8_t* ptr, uint8_t val)
    /* convertBlockStmt, nil block */;

    void Store64(uint64_t* ptr, uint64_t val)
    /* convertBlockStmt, nil block */;

    void StoreRel(uint32_t* ptr, uint32_t val)
    /* convertBlockStmt, nil block */;

    void StoreRel64(uint64_t* ptr, uint64_t val)
    /* convertBlockStmt, nil block */;

    void StoreReluintptr(uintptr_t* ptr, uintptr_t val)
    /* convertBlockStmt, nil block */;

    void StorepNoWB(unsafe::Pointer ptr, unsafe::Pointer val)
    /* convertBlockStmt, nil block */;

}

