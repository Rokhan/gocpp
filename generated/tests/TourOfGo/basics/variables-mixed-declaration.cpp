// generated by GoCpp from file 'tests/TourOfGo/basics/variables-mixed-declaration.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/variables-mixed-declaration.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    std::tuple<std::string, int, gocpp::slice<std::string>> f1()
    {
        return {"f1"s, 1001, gocpp::slice<std::string> {"a"s, "b"s}};
    }

    std::tuple<std::string, int, gocpp::array<std::string, 3>> f2()
    {
        return {"f2"s, 1002, gocpp::array<std::string, 3> {"c"s, "d"s, "e"s}};
    }

    void main()
    {
        auto [s1, i1] = std::tuple{"string1"s, 1};
        mocklib::Println(s1, i1);
        int i2;
        std::tie(s1, i2) = std::tuple{"string2"s, 2};
        mocklib::Println(s1, i2);
        std::string s2;
        std::tie(s2, i2) = std::tuple{"string3"s, 3};
        mocklib::Println(s2, i2);
        std::tie(s2, i2) = std::tuple{"string4"s, 4};
        mocklib::Println(s2, i2);
        gocpp::slice<std::string> a1;
        std::tie(s2, i2, a1) = f1();
        mocklib::Println(s2, i2, a1);
        gocpp::array<std::string, 3> a2;
        std::tie(s2, i2, a2) = f2();
        mocklib::Println(s2, i2, a2);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
