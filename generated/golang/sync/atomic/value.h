// generated by GoCpp from file '$(ImportDir)/sync/atomic/value.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/atomic/value.fwd.h"
#include "gocpp/support.h"

// #include "golang/sync/atomic/doc.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::atomic
{
    struct Value
    {
        any v;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const Value& value);
    struct efaceWords
    {
        unsafe::Pointer typ;
        unsafe::Pointer data;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const efaceWords& value);
    any Load(Value* v);
    void Store(Value* v, any val);
    any Swap(Value* v, any go_new);
    bool CompareAndSwap(Value* v, any old, any go_new);
    int runtime_procPin();
    void runtime_procUnpin();
}

