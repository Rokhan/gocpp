// generated by GoCpp from file '$(ImportDir)/cmp/cmp.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/cmp/cmp.fwd.h"
#include "gocpp/support.h"

namespace golang::cmp
{
    struct Ordered : gocpp::Interface
    {
        Ordered(){}
        Ordered(Ordered& i) = default;
        Ordered(const Ordered& i) = default;
        Ordered& operator=(Ordered& i) = default;
        Ordered& operator=(const Ordered& i) = default;

        template<typename T>
        Ordered(T& ref);

        template<typename T>
        Ordered(const T& ref);

        template<typename T>
        Ordered(T* ptr);

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IOrdered
        {
        };

        template<typename T, typename StoreT>
        struct OrderedImpl : IOrdered
        {
            explicit OrderedImpl(T* ptr)
            {
                value.reset(ptr);
            }

            StoreT value;
        };

        std::shared_ptr<IOrdered> value;
    };

    std::ostream& operator<<(std::ostream& os, const Ordered& value);
    bool Less(T x, T y);
    int Compare(T x, T y);
    bool isNaN(T x);
    T Or(gocpp::slice<T> vals);
    template<typename... Args>
    T Or(Args... vals)
    {
        return Or(, gocpp::ToSlice<T>(vals...));
    }

}

