// generated by GoCpp from file '$(ImportDir)/runtime/trace2time.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2time.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/runtime/cgocall.h"
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/cputicks.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/lock_sema.h"
#include "golang/runtime/lockrank.h"
#include "golang/runtime/lockrank_off.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/os_windows.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/profbuf.h"
#include "golang/runtime/runtime.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/signal_windows.h"
#include "golang/runtime/stubs.h"
#include "golang/runtime/symtab.h"
#include "golang/runtime/time.h"
#include "golang/runtime/time_nofake.h"
#include "golang/runtime/trace2.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"
#include "golang/runtime/trace2map.h"
#include "golang/runtime/trace2region.h"
#include "golang/runtime/trace2runtime.h"
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2string.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace abi::rec;
        using namespace atomic::rec;
        using namespace chacha8rand::rec;
        using namespace goarch::rec;
        using namespace runtime::rec;
        using namespace sys::rec;
    }

    runtime::traceTime traceClockNow()
    {
        if(osHasLowResClock)
        {
            return traceTime(cputicks() / traceTimeDiv);
        }
        return traceTime(nanotime() / traceTimeDiv);
    }

    uint64_t traceClockUnitsPerSecond()
    {
        if(osHasLowResClock)
        {
            return uint64_t(ticksPerSecond() / traceTimeDiv);
        }
        return uint64_t(1.0 / double(traceTimeDiv) * 1e9);
    }

    void traceFrequency(uintptr_t gen)
    {
        auto w = unsafeTraceWriter(gen, nullptr);
        std::tie(w, gocpp_id_0) = rec::ensure(gocpp::recv(w), 1 + traceBytesPerNumber);
        rec::byte(gocpp::recv(w), unsigned char(traceEvFrequency));
        rec::varint(gocpp::recv(w), traceClockUnitsPerSecond());
        systemstack([=]() mutable -> void
        {
            lock(& trace.lock);
            traceBufFlush(w.traceBuf, gen);
            unlock(& trace.lock);
        });
    }

}

