// generated by GoCpp from file '$(ImportDir)/internal/poll/fd_poll_runtime.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd_poll_runtime.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::poll
{
    struct pollDesc
    {
        uintptr_t runtimeCtx;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct pollDesc& value);
    int64_t runtimeNano();
    void runtime_pollServerInit();
    std::tuple<uintptr_t, int> runtime_pollOpen(uintptr_t fd);
    void runtime_pollClose(uintptr_t ctx);
    int runtime_pollWait(uintptr_t ctx, int mode);
    void runtime_pollWaitCanceled(uintptr_t ctx, int mode);
    int runtime_pollReset(uintptr_t ctx, int mode);
    void runtime_pollSetDeadline(uintptr_t ctx, int64_t d, int mode);
    void runtime_pollUnblock(uintptr_t ctx);
    bool runtime_isPollServerDescriptor(uintptr_t fd);
    struct gocpp::error convertErr(int res, bool isFile);
    struct gocpp::error setDeadlineImpl(struct FD* fd, mocklib::Date t, int mode);
    bool IsPollDescriptor(uintptr_t fd);

    namespace rec
    {
        struct gocpp::error init(struct pollDesc* pd, struct FD* fd);
        void close(struct pollDesc* pd);
        void evict(struct pollDesc* pd);
        struct gocpp::error prepare(struct pollDesc* pd, int mode, bool isFile);
        struct gocpp::error prepareRead(struct pollDesc* pd, bool isFile);
        struct gocpp::error prepareWrite(struct pollDesc* pd, bool isFile);
        struct gocpp::error wait(struct pollDesc* pd, int mode, bool isFile);
        struct gocpp::error waitRead(struct pollDesc* pd, bool isFile);
        struct gocpp::error waitWrite(struct pollDesc* pd, bool isFile);
        void waitCanceled(struct pollDesc* pd, int mode);
        bool pollable(struct pollDesc* pd);
        struct gocpp::error SetDeadline(struct FD* fd, mocklib::Date t);
        struct gocpp::error SetReadDeadline(struct FD* fd, mocklib::Date t);
        struct gocpp::error SetWriteDeadline(struct FD* fd, mocklib::Date t);
    }
}

