// generated by GoCpp from file '$(ImportDir)/time/tick.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/time/tick.h"
#include "gocpp/support.h"

#include "golang/time/sleep.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::time
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // A Ticker holds a channel that delivers “ticks” of a clock
    // at intervals.
    
    template<typename T> requires gocpp::GoStruct<T>
    Ticker::operator T()
    {
        T result;
        result.C = this->C;
        result.r = this->r;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Ticker::operator==(const T& ref) const
    {
        if (C != ref.C) return false;
        if (r != ref.r) return false;
        return true;
    }

    std::ostream& Ticker::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << C;
        os << " " << r;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Ticker& value)
    {
        return value.PrintTo(os);
    }

    // NewTicker returns a new Ticker containing a channel that will send
    // the current time on the channel after each tick. The period of the
    // ticks is specified by the duration argument. The ticker will adjust
    // the time interval or drop ticks to make up for slow receivers.
    // The duration d must be greater than zero; if not, NewTicker will
    // panic. Stop the ticker to release associated resources.
    struct Ticker* NewTicker(golang::time::Duration d)
    {
        if(d <= 0)
        {
            gocpp::panic("non-positive interval for NewTicker"s);
        }
        auto c = gocpp::make(gocpp::Tag<gocpp::channel<Time>>(), 1);
        auto t = gocpp::InitPtr<Ticker>([=](auto& x) {
            x.C = c;
            x.r = gocpp::Init<runtimeTimer>([=](auto& x) {
                x.when = when(d);
                x.period = int64_t(d);
                x.f = sendTime;
                x.arg = c;
            });
        });
        startTimer(& t->r);
        return t;
    }

    // Stop turns off a ticker. After Stop, no more ticks will be sent.
    // Stop does not close the channel, to prevent a concurrent goroutine
    // reading from the channel from seeing an erroneous "tick".
    void rec::Stop(struct Ticker* t)
    {
        stopTimer(& t->r);
    }

    // Reset stops a ticker and resets its period to the specified duration.
    // The next tick will arrive after the new period elapses. The duration d
    // must be greater than zero; if not, Reset will panic.
    void rec::Reset(struct Ticker* t, golang::time::Duration d)
    {
        if(d <= 0)
        {
            gocpp::panic("non-positive interval for Ticker.Reset"s);
        }
        if(t->r.f == nullptr)
        {
            gocpp::panic("time: Reset called on uninitialized Ticker"s);
        }
        modTimer(& t->r, when(d), int64_t(d), t->r.f, t->r.arg, t->r.seq);
    }

    // Tick is a convenience wrapper for NewTicker providing access to the ticking
    // channel only. While Tick is useful for clients that have no need to shut down
    // the Ticker, be aware that without a way to shut it down the underlying
    // Ticker cannot be recovered by the garbage collector; it "leaks".
    // Unlike NewTicker, Tick will return nil if d <= 0.
    gocpp::channel<Time> Tick(golang::time::Duration d)
    {
        if(d <= 0)
        {
            return nullptr;
        }
        return NewTicker(d)->C;
    }

}

