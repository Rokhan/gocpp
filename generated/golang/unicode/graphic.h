// generated by GoCpp from file '$(ImportDir)/unicode/graphic.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/unicode/graphic.fwd.h"
#include "gocpp/support.h"

#include "golang/unicode/letter.h"

namespace golang::unicode
{
    extern int pC;
    extern int pP;
    extern int pN;
    extern int pS;
    extern int pZ;
    extern int pLu;
    extern int pLl;
    extern int pp;
    extern int pg;
    extern int pLo;
    extern int pLmask;
    extern gocpp::slice<RangeTable*> GraphicRanges;
    extern gocpp::slice<RangeTable*> PrintRanges;
    bool IsGraphic(gocpp::rune r);
    bool IsPrint(gocpp::rune r);
    bool IsOneOf(gocpp::slice<RangeTable*> ranges, gocpp::rune r);
    bool In(gocpp::rune r, gocpp::slice<RangeTable*> ranges);
    template<typename... Args>
    bool In(gocpp::rune r, Args... ranges)
    {
        return In(r, gocpp::ToSlice<RangeTable*>(ranges...));
    }

    bool IsControl(gocpp::rune r);
    bool IsLetter(gocpp::rune r);
    bool IsMark(gocpp::rune r);
    bool IsNumber(gocpp::rune r);
    bool IsPunct(gocpp::rune r);
    bool IsSpace(gocpp::rune r);
    bool IsSymbol(gocpp::rune r);
}

