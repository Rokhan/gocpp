// generated by GoCpp from file '$(ImportDir)/syscall/security_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/security_windows.fwd.h"
#include "gocpp/support.h"


namespace golang::syscall
{
    struct UserInfo10
    {
        uint16_t* Name;
        uint16_t* Comment;
        uint16_t* UsrComment;
        uint16_t* FullName;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct UserInfo10& value);
    struct SID
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SID& value);
    struct SIDAndAttributes
    {
        SID* Sid;
        uint32_t Attributes;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SIDAndAttributes& value);
    struct Tokenprimarygroup
    {
        SID* PrimaryGroup;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Tokenprimarygroup& value);
    std::tuple<std::string, struct gocpp::error> TranslateAccountName(std::string username, uint32_t from, uint32_t to, int initSize);
    std::tuple<struct SID*, struct gocpp::error> StringToSid(std::string s);
    std::tuple<struct SID*, std::string, uint32_t, struct gocpp::error> LookupSID(std::string system, std::string account);
    std::tuple<syscall::Token, struct gocpp::error> OpenCurrentProcessToken();
    struct Tokenuser
    {
        SIDAndAttributes User;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Tokenuser& value);

    namespace rec
    {
        std::tuple<std::string, struct gocpp::error> String(struct SID* sid);
        int Len(struct SID* sid);
        std::tuple<struct SID*, struct gocpp::error> Copy(struct SID* sid);
        std::tuple<std::string, std::string, uint32_t, struct gocpp::error> LookupAccount(struct SID* sid, std::string system);
        struct gocpp::error Close(golang::syscall::Token t);
        std::tuple<unsafe::Pointer, struct gocpp::error> getInfo(golang::syscall::Token t, uint32_t go_class, int initSize);
        std::tuple<struct Tokenuser*, struct gocpp::error> GetTokenUser(golang::syscall::Token t);
        std::tuple<struct Tokenprimarygroup*, struct gocpp::error> GetTokenPrimaryGroup(golang::syscall::Token t);
        std::tuple<std::string, struct gocpp::error> GetUserProfileDirectory(golang::syscall::Token t);
    }
}

