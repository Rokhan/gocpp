// generated by GoCpp from file '$(ImportDir)/encoding/hex/hex.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/encoding/hex/hex.fwd.h"
#include "gocpp/support.h"

#include "golang/io/io.h"

namespace golang::hex
{
    extern std::string hextable;
    extern std::string reverseHexTable;
    int EncodedLen(int n);
    int Encode(gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    gocpp::slice<unsigned char> AppendEncode(gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    extern gocpp::error ErrLength;
    int DecodedLen(int x);
    std::tuple<int, struct gocpp::error> Decode(gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> AppendDecode(gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::string EncodeToString(gocpp::slice<unsigned char> src);
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> DecodeString(std::string s);
    std::string Dump(gocpp::slice<unsigned char> data);
    struct encoder
    {
        io::Writer w;
        gocpp::error err;
        gocpp::array<unsigned char, bufferSize> out;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct encoder& value);
    io::Writer NewEncoder(io::Writer w);
    struct decoder
    {
        io::Reader r;
        gocpp::error err;
        gocpp::slice<unsigned char> in;
        gocpp::array<unsigned char, bufferSize> arr;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct decoder& value);
    io::Reader NewDecoder(io::Reader r);
    io::WriteCloser Dumper(io::Writer w);
    struct dumper
    {
        io::Writer w;
        gocpp::array<unsigned char, 18> rightChars;
        gocpp::array<unsigned char, 14> buf;
        int used;
        unsigned int n;
        bool closed;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dumper& value);
    unsigned char toChar(unsigned char b);

    namespace rec
    {
        std::string Error(golang::hex::InvalidByteError e);
        std::tuple<int, struct gocpp::error> Write(struct encoder* e, gocpp::slice<unsigned char> p);
        std::tuple<int, struct gocpp::error> Read(struct decoder* d, gocpp::slice<unsigned char> p);
        std::tuple<int, struct gocpp::error> Write(struct dumper* h, gocpp::slice<unsigned char> data);
        struct gocpp::error Close(struct dumper* h);
    }
}

