// generated by GoCpp from file '$(ImportDir)/runtime/lockrank.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/lockrank.h"
#include "gocpp/support.h"

namespace golang::runtime
{
    lockRank lockRankUnknown = 0;
    lockRank lockRankSysmon = 1;
    lockRank lockRankScavenge = 2;
    lockRank lockRankForcegc = 3;
    lockRank lockRankDefer = 4;
    lockRank lockRankSweepWaiters = 5;
    lockRank lockRankAssistQueue = 6;
    lockRank lockRankSweep = 7;
    lockRank lockRankTestR = 8;
    lockRank lockRankTestW = 9;
    lockRank lockRankAllocmW = 10;
    lockRank lockRankExecW = 11;
    lockRank lockRankCpuprof = 12;
    lockRank lockRankPollDesc = 13;
    lockRank lockRankWakeableSleep = 14;
    lockRank lockRankAllocmR = 15;
    lockRank lockRankExecR = 16;
    lockRank lockRankSched = 17;
    lockRank lockRankAllg = 18;
    lockRank lockRankAllp = 19;
    lockRank lockRankTimers = 20;
    lockRank lockRankNetpollInit = 21;
    lockRank lockRankHchan = 22;
    lockRank lockRankNotifyList = 23;
    lockRank lockRankSudog = 24;
    lockRank lockRankRoot = 25;
    lockRank lockRankItab = 26;
    lockRank lockRankReflectOffs = 27;
    lockRank lockRankUserArenaState = 28;
    lockRank lockRankTraceBuf = 29;
    lockRank lockRankTraceStrings = 30;
    lockRank lockRankFin = 31;
    lockRank lockRankSpanSetSpine = 32;
    lockRank lockRankMspanSpecial = 33;
    lockRank lockRankGcBitsArenas = 34;
    lockRank lockRankProfInsert = 35;
    lockRank lockRankProfBlock = 36;
    lockRank lockRankProfMemActive = 37;
    lockRank lockRankProfMemFuture = 38;
    lockRank lockRankGscan = 39;
    lockRank lockRankStackpool = 40;
    lockRank lockRankStackLarge = 41;
    lockRank lockRankHchanLeaf = 42;
    lockRank lockRankWbufSpans = 43;
    lockRank lockRankMheap = 44;
    lockRank lockRankMheapSpecial = 45;
    lockRank lockRankGlobalAlloc = 46;
    lockRank lockRankTrace = 47;
    lockRank lockRankTraceStackTab = 48;
    lockRank lockRankPanic = 49;
    lockRank lockRankDeadlock = 50;
    lockRank lockRankRaceFini = 51;
    lockRank lockRankAllocmRInternal = 52;
    lockRank lockRankExecRInternal = 53;
    lockRank lockRankTestRInternal = 54;
    lockRank lockRankLeafRank = 1000;
    gocpp::slice<std::string> lockNames = gocpp::Init<gocpp::slice<std::string>>([](gocpp::slice<std::string>& x) { x.lockRankSysmon = "sysmon"; x.lockRankScavenge = "scavenge"; x.lockRankForcegc = "forcegc"; x.lockRankDefer = "defer"; x.lockRankSweepWaiters = "sweepWaiters"; x.lockRankAssistQueue = "assistQueue"; x.lockRankSweep = "sweep"; x.lockRankTestR = "testR"; x.lockRankTestW = "testW"; x.lockRankAllocmW = "allocmW"; x.lockRankExecW = "execW"; x.lockRankCpuprof = "cpuprof"; x.lockRankPollDesc = "pollDesc"; x.lockRankWakeableSleep = "wakeableSleep"; x.lockRankAllocmR = "allocmR"; x.lockRankExecR = "execR"; x.lockRankSched = "sched"; x.lockRankAllg = "allg"; x.lockRankAllp = "allp"; x.lockRankTimers = "timers"; x.lockRankNetpollInit = "netpollInit"; x.lockRankHchan = "hchan"; x.lockRankNotifyList = "notifyList"; x.lockRankSudog = "sudog"; x.lockRankRoot = "root"; x.lockRankItab = "itab"; x.lockRankReflectOffs = "reflectOffs"; x.lockRankUserArenaState = "userArenaState"; x.lockRankTraceBuf = "traceBuf"; x.lockRankTraceStrings = "traceStrings"; x.lockRankFin = "fin"; x.lockRankSpanSetSpine = "spanSetSpine"; x.lockRankMspanSpecial = "mspanSpecial"; x.lockRankGcBitsArenas = "gcBitsArenas"; x.lockRankProfInsert = "profInsert"; x.lockRankProfBlock = "profBlock"; x.lockRankProfMemActive = "profMemActive"; x.lockRankProfMemFuture = "profMemFuture"; x.lockRankGscan = "gscan"; x.lockRankStackpool = "stackpool"; x.lockRankStackLarge = "stackLarge"; x.lockRankHchanLeaf = "hchanLeaf"; x.lockRankWbufSpans = "wbufSpans"; x.lockRankMheap = "mheap"; x.lockRankMheapSpecial = "mheapSpecial"; x.lockRankGlobalAlloc = "globalAlloc"; x.lockRankTrace = "trace"; x.lockRankTraceStackTab = "traceStackTab"; x.lockRankPanic = "panic"; x.lockRankDeadlock = "deadlock"; x.lockRankRaceFini = "raceFini"; x.lockRankAllocmRInternal = "allocmRInternal"; x.lockRankExecRInternal = "execRInternal"; x.lockRankTestRInternal = "testRInternal"; });
    std::string String(lockRank rank)
    {
        if(rank == 0)
        {
            return "UNKNOWN";
        }
        if(rank == lockRankLeafRank)
        {
            return "LEAF";
        }
        if(rank < 0 || int(rank) >= len(lockNames))
        {
            return "BAD RANK";
        }
        return lockNames[rank];
    }

    gocpp::slice<gocpp::slice<lockRank>> lockPartialOrder = gocpp::Init<gocpp::slice<gocpp::slice<lockRank>>>([](gocpp::slice<gocpp::slice<lockRank>>& x) { x.lockRankSysmon =  {}; x.lockRankScavenge =  {lockRankSysmon}; x.lockRankForcegc =  {lockRankSysmon}; x.lockRankDefer =  {}; x.lockRankSweepWaiters =  {}; x.lockRankAssistQueue =  {}; x.lockRankSweep =  {}; x.lockRankTestR =  {}; x.lockRankTestW =  {}; x.lockRankAllocmW =  {}; x.lockRankExecW =  {}; x.lockRankCpuprof =  {}; x.lockRankPollDesc =  {}; x.lockRankWakeableSleep =  {}; x.lockRankAllocmR =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep}; x.lockRankExecR =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep}; x.lockRankSched =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR}; x.lockRankAllg =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched}; x.lockRankAllp =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched}; x.lockRankTimers =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllp, lockRankTimers}; x.lockRankNetpollInit =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllp, lockRankTimers}; x.lockRankHchan =  {lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankWakeableSleep, lockRankHchan}; x.lockRankNotifyList =  {}; x.lockRankSudog =  {lockRankSysmon, lockRankScavenge, lockRankSweep, lockRankTestR, lockRankWakeableSleep, lockRankHchan, lockRankNotifyList}; x.lockRankRoot =  {}; x.lockRankItab =  {}; x.lockRankReflectOffs =  {lockRankItab}; x.lockRankUserArenaState =  {}; x.lockRankTraceBuf =  {lockRankSysmon, lockRankScavenge}; x.lockRankTraceStrings =  {lockRankSysmon, lockRankScavenge, lockRankTraceBuf}; x.lockRankFin =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankSpanSetSpine =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankMspanSpecial =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankGcBitsArenas =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankMspanSpecial}; x.lockRankProfInsert =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankProfBlock =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankProfMemActive =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings}; x.lockRankProfMemFuture =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankHchan, lockRankNotifyList, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankProfMemActive}; x.lockRankGscan =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture}; x.lockRankStackpool =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan}; x.lockRankStackLarge =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan}; x.lockRankHchanLeaf =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankHchanLeaf}; x.lockRankWbufSpans =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan}; x.lockRankMheap =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans}; x.lockRankMheapSpecial =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap}; x.lockRankGlobalAlloc =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap, lockRankMheapSpecial}; x.lockRankTrace =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap}; x.lockRankTraceStackTab =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankDefer, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR, lockRankExecR, lockRankSched, lockRankAllg, lockRankAllp, lockRankTimers, lockRankNetpollInit, lockRankHchan, lockRankNotifyList, lockRankSudog, lockRankRoot, lockRankItab, lockRankReflectOffs, lockRankUserArenaState, lockRankTraceBuf, lockRankTraceStrings, lockRankFin, lockRankSpanSetSpine, lockRankMspanSpecial, lockRankGcBitsArenas, lockRankProfInsert, lockRankProfBlock, lockRankProfMemActive, lockRankProfMemFuture, lockRankGscan, lockRankStackpool, lockRankStackLarge, lockRankWbufSpans, lockRankMheap, lockRankTrace}; x.lockRankPanic =  {}; x.lockRankDeadlock =  {lockRankPanic, lockRankDeadlock}; x.lockRankRaceFini =  {lockRankPanic}; x.lockRankAllocmRInternal =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankAllocmW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankAllocmR}; x.lockRankExecRInternal =  {lockRankSysmon, lockRankScavenge, lockRankForcegc, lockRankSweepWaiters, lockRankAssistQueue, lockRankSweep, lockRankTestR, lockRankExecW, lockRankCpuprof, lockRankPollDesc, lockRankWakeableSleep, lockRankExecR}; x.lockRankTestRInternal =  {lockRankTestR, lockRankTestW}; });
}

