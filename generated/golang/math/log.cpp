// generated by GoCpp from file '$(ImportDir)/math/log.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/log.h"
#include "gocpp/support.h"

#include "golang/math/bits.h"
#include "golang/math/const.h"
#include "golang/math/frexp.h"
#include "golang/math/log_asm.h"

namespace golang::math
{
    double Log(double x)
    {
        if(haveArchLog)
        {
            return archLog(x);
        }
        return log(x);
    }

    double log(double x)
    {
        auto Ln2Hi = 6.93147180369123816490e-01;
        auto Ln2Lo = 1.90821492927058770002e-10;
        auto L1 = 6.666666666666735130e-01;
        auto L2 = 3.999999999940941908e-01;
        auto L3 = 2.857142874366239149e-01;
        auto L4 = 2.222219843214978396e-01;
        auto L5 = 1.818357216161805012e-01;
        auto L6 = 1.531383769920937332e-01;
        auto L7 = 1.479819860511658591e-01;
        //Go switch emulation
        {
            int conditionId = -1;
            if(IsNaN(x) || IsInf(x, 1)) { conditionId = 0; }
            else if(x < 0) { conditionId = 1; }
            else if(x == 0) { conditionId = 2; }
            switch(conditionId)
            {
                case 0:
                    return x;
                    break;
                case 1:
                    return NaN();
                    break;
                case 2:
                    return Inf(- 1);
                    break;
            }
        }
        auto [f1, ki] = Frexp(x);
        if(f1 < Sqrt2 / 2)
        {
            f1 *= 2;
            ki--;
        }
        auto f = f1 - 1;
        auto k = double(ki);
        auto s = f / (2 + f);
        auto s2 = s * s;
        auto s4 = s2 * s2;
        auto t1 = s2 * (L1 + s4 * (L3 + s4 * (L5 + s4 * L7)));
        auto t2 = s4 * (L2 + s4 * (L4 + s4 * L6));
        auto R = t1 + t2;
        auto hfsq = 0.5 * f * f;
        return k * Ln2Hi - ((hfsq - (s * (hfsq + R) + k * Ln2Lo)) - f);
    }

}

