// generated by GoCpp from file '$(ImportDir)/runtime/mcentral.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mcentral.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mheap.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct mcentral
    {
        sys::NotInHeap _;
        spanClass spanclass;
        /* gocpp::array<spanSet, 2> partial; [Known incomplete type] */
        /* gocpp::array<spanSet, 2> full; [Known incomplete type] */

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct mcentral& value);
    void init(struct mcentral* c, spanClass spc);
    /* spanSet* partialUnswept(struct mcentral* c, uint32_t sweepgen); [Ignored, known name conflict] */ 
    /* spanSet* partialSwept(struct mcentral* c, uint32_t sweepgen); [Ignored, known name conflict] */ 
    /* spanSet* fullUnswept(struct mcentral* c, uint32_t sweepgen); [Ignored, known name conflict] */ 
    /* spanSet* fullSwept(struct mcentral* c, uint32_t sweepgen); [Ignored, known name conflict] */ 
    mspan* cacheSpan(struct mcentral* c);
    void uncacheSpan(struct mcentral* c, mspan* s);
    mspan* grow(struct mcentral* c);
}

