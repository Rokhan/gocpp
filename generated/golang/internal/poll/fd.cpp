// generated by GoCpp from file '$(ImportDir)/internal/poll/fd.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/poll/fd.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"

namespace golang::poll
{
    
    template<typename T> requires gocpp::GoStruct<T>
    errNetClosing::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool errNetClosing::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& errNetClosing::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct errNetClosing& value)
    {
        return value.PrintTo(os);
    }

    std::string Error(struct errNetClosing e)
    {
        return "use of closed network connection";
    }

    bool Timeout(struct errNetClosing e)
    {
        return false;
    }

    bool Temporary(struct errNetClosing e)
    {
        return false;
    }

    errNetClosing ErrNetClosing = errNetClosing {};
    gocpp::error ErrFileClosing = errors::New("use of closed file");
    gocpp::error ErrNoDeadline = errors::New("file type does not support deadline");
    struct gocpp::error errClosing(bool isFile)
    {
        if(isFile)
        {
            return ErrFileClosing;
        }
        return ErrNetClosing;
    }

    gocpp::error ErrDeadlineExceeded = new DeadlineExceededError {};
    
    template<typename T> requires gocpp::GoStruct<T>
    DeadlineExceededError::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool DeadlineExceededError::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& DeadlineExceededError::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct DeadlineExceededError& value)
    {
        return value.PrintTo(os);
    }

    std::string Error(struct DeadlineExceededError* e)
    {
        return "i/o timeout";
    }

    bool Timeout(struct DeadlineExceededError* e)
    {
        return true;
    }

    bool Temporary(struct DeadlineExceededError* e)
    {
        return true;
    }

    gocpp::error ErrNotPollable = errors::New("not pollable");
    void consume(gocpp::slice<gocpp::slice<unsigned char>>* v, int64_t n)
    {
        for(; len(*v) > 0; )
        {
            auto ln0 = int64_t(len((*v)[0]));
            if(ln0 > n)
            {
                (*v)[0] = (*v)[0].make_slice(n);
                return;
            }
            n -= ln0;
            (*v)[0] = nullptr;
            *v = (*v).make_slice(1);
        }
    }

    std::function<void (int)> TestHookDidWritev = [](int wrote) mutable -> void
    {
    };
}

