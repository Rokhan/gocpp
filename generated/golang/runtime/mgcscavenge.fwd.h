// generated by GoCpp from file '$(ImportDir)/runtime/mgcscavenge.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const long scavengePercent = 1;
    const long retainExtraPercent = 10;
    const long reduceExtraPercent = 5;
    const double scavChunkHiOccFrac = 0.96875;
    struct gocpp_id_0;
    const double startingScavSleepRatio = 0.001;
    const double minScavWorkTime = 1e6;
    struct scavChunkData;
    const long scavChunkMaxFlags = 6;
    using scavChunkFlags = uint8_t;
    struct piController;
    const scavChunkFlags scavChunkHasFree = 1 << 0;
    const int scavChunkFlagsMask = (1 << scavChunkMaxFlags) - 1;
}
#include "golang/internal/goos/zgoos_windows.fwd.h"
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/malloc.fwd.h"
#include "golang/runtime/mheap.fwd.h"
#include "golang/runtime/mpagealloc.fwd.h"
#include "golang/runtime/mranges.fwd.h"
#include "golang/runtime/runtime2.fwd.h"
// #include "golang/runtime/time.fwd.h" [Ignored, known errors]

namespace golang::runtime
{
    const int maxPagesPerPhysPage = maxPhysPageSize / pageSize;
    const double scavengeCostRatio = 0.7 * (goos::IsDarwin + goos::IsIos);
    const uint16_t scavChunkHiOccPages = uint16_t(scavChunkHiOccFrac * pallocChunkPages);
    struct scavengerState;
    struct scavengeIndex;
    struct atomicScavChunkData;
    const int logScavChunkInUseMax = logPallocChunkPages + 1;
    const int scavChunkInUseMask = (1 << logScavChunkInUseMax) - 1;
}
