// generated by GoCpp from file 'tests/TourOfGo/basics/type-conversions-advanced.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/type-conversions-advanced.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"
#include "golang/math/sqrt.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fmt::rec;
        using namespace math::rec;
    }

    void toto()
    {
    }

    int totoInt()
    {
        return 0;
    }

    
    template<typename T>
    III::III(T& ref)
    {
        value.reset(new IIIImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    III::III(const T& ref)
    {
        value.reset(new IIIImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    III::III(T* ptr)
    {
        value.reset(new IIIImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& III::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    void III::IIIImpl<T, StoreT>::vM()
    {
        return rec::M(gocpp::PtrRecv<T, false>(value.get()));
    }

    namespace rec
    {
        void M(const gocpp::PtrRecv<struct III, false>& self)
        {
            return self.ptr->value->vM();
        }

        void M(const gocpp::ObjRecv<struct III>& self)
        {
            return self.obj.value->vM();
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct III& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename U> requires gocpp::GoStruct<U>
    T::operator U()
    {
        U result;
        return result;
    }

    template<typename U> requires gocpp::GoStruct<U>
    bool T::operator==(const U& ref) const
    {
        return true;
    }

    std::ostream& T::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct T& value)
    {
        return value.PrintTo(os);
    }

    void rec::M(T*)
    {
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Vertex::operator T()
    {
        T result;
        result.Lat = this->Lat;
        result.Long = this->Long;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Vertex::operator==(const T& ref) const
    {
        if (Lat != ref.Lat) return false;
        if (Long != ref.Long) return false;
        return true;
    }

    std::ostream& Vertex::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Lat;
        os << " " << Long;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Vertex& value)
    {
        return value.PrintTo(os);
    }

    void main()
    {
        int x = 3;
        int y = 4;
        double f = std::sqrt(double(x * x + y * y));
        unsigned int z1 = (unsigned int)(f);
        mocklib::Println(x, y, z1);
        unsigned int z2 = (unsigned int)(f);
        mocklib::Println("z2:", z2);
        unsigned int z3 = (unsigned int)(z2);
        mocklib::Println("z2:", z3);
        go_any ifunc1 = (std::function<void ()>)(toto);
        mocklib::Println(ifunc1);
        go_any ifunc2 = (main::totoInt)();
        mocklib::Println(ifunc2);
        auto m1 = gocpp::make(gocpp::Tag<gocpp::map<std::string, Vertex>>());
        auto m2 = gocpp::make((gocpp::Tag<gocpp::map<std::string, Vertex>>()));
        auto m3 = gocpp::make((gocpp::Tag<gocpp::map<std::string, Vertex>>()));
        int i = {};
        mocklib::Println(m1, m2, m3, i);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
