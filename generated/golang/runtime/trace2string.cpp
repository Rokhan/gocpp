// generated by GoCpp from file '$(ImportDir)/runtime/trace2string.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2string.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/profbuf.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2.h"
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"
// #include "golang/runtime/trace2map.h"  [Ignored, known errors]
// #include "golang/runtime/trace2region.h"  [Ignored, known errors]
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    
    template<typename T> requires gocpp::GoStruct<T>
    traceStringTable::operator T()
    {
        T result;
        result.lock = this->lock;
        result.buf = this->buf;
        result.tab = this->tab;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool traceStringTable::operator==(const T& ref) const
    {
        if (lock != ref.lock) return false;
        if (buf != ref.buf) return false;
        if (tab != ref.tab) return false;
        return true;
    }

    std::ostream& traceStringTable::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << lock;
        os << " " << buf;
        os << " " << tab;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct traceStringTable& value)
    {
        return value.PrintTo(os);
    }

    uint64_t put(struct traceStringTable* t, uintptr_t gen, std::string s)
    {
        auto ss = stringStructOf(& s);
        auto [id, added] = put(gocpp::recv(t->tab), ss->str, uintptr_t(ss->len));
        if(added)
        {
            systemstack([=]() mutable -> void
            {
                writeString(gocpp::recv(t), gen, id, s);
            });
        }
        return id;
    }

    uint64_t emit(struct traceStringTable* t, uintptr_t gen, std::string s)
    {
        auto id = stealID(gocpp::recv(t->tab));
        systemstack([=]() mutable -> void
        {
            writeString(gocpp::recv(t), gen, id, s);
        });
        return id;
    }

    void writeString(struct traceStringTable* t, uintptr_t gen, uint64_t id, std::string s)
    {
        if(len(s) > maxTraceStringLen)
        {
            s = s.make_slice(0, maxTraceStringLen);
        }
        lock(& t->lock);
        auto w = unsafeTraceWriter(gen, t->buf);
        bool flushed = {};
        std::tie(w, flushed) = ensure(gocpp::recv(w), 2 + 2 * traceBytesPerNumber + len(s));
        if(flushed)
        {
            unsigned char(gocpp::recv(w), unsigned char(traceEvStrings));
        }
        unsigned char(gocpp::recv(w), unsigned char(traceEvString));
        varint(gocpp::recv(w), id);
        varint(gocpp::recv(w), uint64_t(len(s)));
        stringData(gocpp::recv(w), s);
        t->buf = w.traceBuf;
        unlock(& t->lock);
    }

    void reset(struct traceStringTable* t, uintptr_t gen)
    {
        if(t->buf != nullptr)
        {
            lock(& trace.lock);
            traceBufFlush(t->buf, gen);
            unlock(& trace.lock);
            t->buf = nullptr;
        }
        lock(& t->tab.lock);
        reset(gocpp::recv(t->tab));
        unlock(& t->tab.lock);
    }

}

