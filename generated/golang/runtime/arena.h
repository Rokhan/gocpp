// generated by GoCpp from file '$(ImportDir)/runtime/arena.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/arena.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/math/math.h"
#include "golang/runtime/asan0.h"
#include "golang/runtime/error.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbarrier.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mem.h"
#include "golang/runtime/mfinal.h"
#include "golang/runtime/mgc.h"
#include "golang/runtime/mgcmark.h"
#include "golang/runtime/mgcpacer.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mprof.h"
// #include "golang/runtime/mranges.h"  [Ignored, known errors]
#include "golang/runtime/msan0.h"
#include "golang/runtime/mspanset.h"
// #include "golang/runtime/mstats.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
// #include "golang/runtime/race0.h"  [Ignored, known errors]
// #include "golang/runtime/runtime1.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/slice.h"  [Ignored, known errors]
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/type.h"
// #include "golang/runtime/typekind.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    unsafe::Pointer arena_newArena();
    go_any arena_arena_New(unsafe::Pointer arena, go_any typ);
    void arena_arena_Slice(unsafe::Pointer arena, go_any slice, int cap);
    void arena_arena_Free(unsafe::Pointer arena);
    go_any arena_heapify(go_any s);
    extern int userArenaChunkBytesMax;
    extern uintptr_t userArenaChunkBytes;
    extern uintptr_t userArenaChunkPages;
    extern uintptr_t userArenaChunkMaxAllocBytes;
    void init();
    uintptr_t userArenaChunkReserveBytes();
    struct userArena
    {
        mspan* fullList;
        mspan* active;
        gocpp::slice<unsafe::Pointer> refs;
        atomic::Bool defunct;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const userArena& value);
    userArena* newUserArena();
    unsafe::Pointer go_new(userArena* a, _type* typ);
    void slice(userArena* a, go_any sl, int cap);
    void free(userArena* a);
    unsafe::Pointer alloc(userArena* a, _type* typ, int cap);
    mspan* refill(userArena* a);
    struct liveUserArenaChunk
    {
        unsafe::Pointer x;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const liveUserArenaChunk& value);
    unsafe::Pointer userArenaNextFree(mspan* s, _type* typ, int cap);
    void userArenaHeapBitsSetSliceType(_type* typ, int n, unsafe::Pointer ptr, mspan* s);
    std::tuple<unsafe::Pointer, mspan*> newUserArenaChunk();
    bool isUnusedUserArenaChunk(mspan* s);
    void setUserArenaChunkToFault(mspan* s);
    bool inUserArenaChunk(uintptr_t p);
    void freeUserArenaChunk(mspan* s, unsafe::Pointer x);
    mspan* allocUserArenaChunk(mheap* h);
}

