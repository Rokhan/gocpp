// generated by GoCpp from file '$(ImportDir)/os/error.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/error.h"
#include "gocpp/support.h"

#include "golang/io/fs/fs.h"
#include "golang/os/error_errno.h"
#include "golang/os/file.h"
#include "golang/syscall/syscall_windows.h"

namespace golang::os
{
    namespace rec
    {
        using namespace mocklib::rec;
        using syscall::rec::Is;
    }

    gocpp::error ErrInvalid = fs::ErrInvalid;
    gocpp::error ErrPermission = fs::ErrPermission;
    gocpp::error ErrExist = fs::ErrExist;
    gocpp::error ErrNotExist = fs::ErrNotExist;
    gocpp::error ErrClosed = fs::ErrClosed;
    gocpp::error ErrNoDeadline = errNoDeadline();
    gocpp::error ErrDeadlineExceeded = errDeadlineExceeded();
    struct gocpp::error errNoDeadline()
    {
        return poll::ErrNoDeadline;
    }

    struct gocpp::error errDeadlineExceeded()
    {
        return poll::ErrDeadlineExceeded;
    }

    
    template<typename T>
    timeout::timeout(T& ref)
    {
        value.reset(new timeoutImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    timeout::timeout(const T& ref)
    {
        value.reset(new timeoutImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    timeout::timeout(T* ptr)
    {
        value.reset(new timeoutImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& timeout::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    bool timeout::timeoutImpl<T, StoreT>::vTimeout()
    {
        return rec::Timeout(gocpp::PtrRecv<T, false>(value.get()));
    }

    namespace rec
    {
        bool Timeout(const gocpp::PtrRecv<struct timeout, false>& self)
        {
            return self.ptr->value->vTimeout();
        }

        bool Timeout(const gocpp::ObjRecv<struct timeout>& self)
        {
            return self.obj.value->vTimeout();
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct timeout& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    SyscallError::operator T()
    {
        T result;
        result.Syscall = this->Syscall;
        result.Err = this->Err;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool SyscallError::operator==(const T& ref) const
    {
        if (Syscall != ref.Syscall) return false;
        if (Err != ref.Err) return false;
        return true;
    }

    std::ostream& SyscallError::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Syscall;
        os << " " << Err;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct SyscallError& value)
    {
        return value.PrintTo(os);
    }

    std::string rec::Error(struct SyscallError* e)
    {
        return e->Syscall + ": " + rec::Error(gocpp::recv(e->Err));
    }

    struct gocpp::error rec::Unwrap(struct SyscallError* e)
    {
        return e->Err;
    }

    bool rec::Timeout(struct SyscallError* e)
    {
        auto [t, ok] = gocpp::getValue<timeout>(e->Err);
        return ok && rec::Timeout(gocpp::recv(t));
    }

    struct gocpp::error NewSyscallError(std::string syscall, struct gocpp::error err)
    {
        if(err == nullptr)
        {
            return nullptr;
        }
        return new SyscallError {syscall, err};
    }

    bool IsExist(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrExist);
    }

    bool IsNotExist(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrNotExist);
    }

    bool IsPermission(struct gocpp::error err)
    {
        return underlyingErrorIs(err, ErrPermission);
    }

    bool IsTimeout(struct gocpp::error err)
    {
        auto [terr, ok] = gocpp::getValue<timeout>(underlyingError(err));
        return ok && rec::Timeout(gocpp::recv(terr));
    }

    bool underlyingErrorIs(struct gocpp::error err, struct gocpp::error target)
    {
        err = underlyingError(err);
        if(err == target)
        {
            return true;
        }
        auto [e, ok] = gocpp::getValue<syscall::Errno>(err);
        return ok && rec::Is(gocpp::recv(e), target);
    }

    struct gocpp::error underlyingError(struct gocpp::error err)
    {
        //Go type switch emulation
        {
            const auto& gocpp_id_0 = gocpp::type_info(err);
            int conditionId = -1;
            if(gocpp_id_0 == typeid(fs::PathError*)) { conditionId = 0; }
            else if(gocpp_id_0 == typeid(LinkError*)) { conditionId = 1; }
            else if(gocpp_id_0 == typeid(SyscallError*)) { conditionId = 2; }
            switch(conditionId)
            {
                case 0:
                {
                    fs::PathError* err = gocpp::any_cast<fs::PathError*>(err);
                    return err->Err;
                    break;
                }
                case 1:
                {
                    LinkError* err = gocpp::any_cast<LinkError*>(err);
                    return err->Err;
                    break;
                }
                case 2:
                {
                    SyscallError* err = gocpp::any_cast<SyscallError*>(err);
                    return err->Err;
                    break;
                }
            }
        }
        return err;
    }

}

