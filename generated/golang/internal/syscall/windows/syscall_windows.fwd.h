// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/syscall_windows.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::windows
{
    const long GAA_FLAG_INCLUDE_PREFIX = 0x00000010;
    const long IF_TYPE_OTHER = 1;
    const long IF_TYPE_ETHERNET_CSMACD = 6;
    const long IF_TYPE_ISO88025_TOKENRING = 9;
    const long IF_TYPE_PPP = 23;
    const long IF_TYPE_SOFTWARE_LOOPBACK = 24;
    const long IF_TYPE_ATM = 37;
    const long IF_TYPE_IEEE80211 = 71;
    const long IF_TYPE_TUNNEL = 131;
    const long IF_TYPE_IEEE1394 = 144;
    struct IpAdapterUnicastAddress;
    struct IpAdapterAnycastAddress;
    struct IpAdapterMulticastAddress;
    struct IpAdapterDnsServerAdapter;
    struct IpAdapterPrefix;
    struct SecurityAttributes;
    struct FILE_BASIC_INFO;
    const long IfOperStatusUp = 1;
    const long IfOperStatusDown = 2;
    const long IfOperStatusTesting = 3;
    const long IfOperStatusUnknown = 4;
    const long IfOperStatusDormant = 5;
    const long IfOperStatusNotPresent = 6;
    const long IfOperStatusLowerLayerDown = 7;
    const long TH32CS_SNAPMODULE = 0x08;
    const long TH32CS_SNAPMODULE32 = 0x10;
    const long MAX_MODULE_NAME32 = 255;
    const long WSA_FLAG_OVERLAPPED = 0x01;
    const long WSA_FLAG_NO_HANDLE_INHERIT = 0x80;
    const long MSG_PEEK = 0x2;
    const long MSG_TRUNC = 0x0100;
    const long MSG_CTRUNC = 0x0200;
    const uintptr_t socket_error = uintptr_t(~ uint32_t(0));
    struct gocpp_id_0;
    const long ComputerNameNetBIOS = 0;
    const long ComputerNameDnsHostname = 1;
    const long ComputerNameDnsDomain = 2;
    const long ComputerNameDnsFullyQualified = 3;
    const long ComputerNamePhysicalNetBIOS = 4;
    const long ComputerNamePhysicalDnsHostname = 5;
    const long ComputerNamePhysicalDnsDomain = 6;
    const long ComputerNamePhysicalDnsFullyQualified = 7;
    const long ComputerNameMax = 8;
    const long MOVEFILE_REPLACE_EXISTING = 0x1;
    const long MOVEFILE_COPY_ALLOWED = 0x2;
    const long MOVEFILE_DELAY_UNTIL_REBOOT = 0x4;
    const long MOVEFILE_WRITE_THROUGH = 0x8;
    const long MOVEFILE_CREATE_HARDLINK = 0x10;
    const long MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20;
    const long LOCKFILE_FAIL_IMMEDIATELY = 0x00000001;
    const long LOCKFILE_EXCLUSIVE_LOCK = 0x00000002;
    const long MB_ERR_INVALID_CHARS = 8;
    const long STYPE_DISKTREE = 0x00;
    const long STYPE_TEMPORARY = 0x40000000;
    struct SHARE_INFO_2;
    const long FILE_NAME_NORMALIZED = 0x0;
    const long FILE_NAME_OPENED = 0x8;
    const long VOLUME_NAME_DOS = 0x0;
    const long VOLUME_NAME_GUID = 0x1;
    const long VOLUME_NAME_NONE = 0x4;
    const long VOLUME_NAME_NT = 0x2;
    struct SERVICE_STATUS;
    const long SERVICE_RUNNING = 4;
    const long SERVICE_QUERY_STATUS = 4;
}
#include "golang/syscall/syscall_windows.fwd.h"
#include "golang/syscall/types_windows.fwd.h"

namespace golang::windows
{
    const syscall::Errno ERROR_BAD_LENGTH = 24;
    const syscall::Errno ERROR_SHARING_VIOLATION = 32;
    const syscall::Errno ERROR_LOCK_VIOLATION = 33;
    const syscall::Errno ERROR_NOT_SUPPORTED = 50;
    const syscall::Errno ERROR_CALL_NOT_IMPLEMENTED = 120;
    const syscall::Errno ERROR_INVALID_NAME = 123;
    const syscall::Errno ERROR_LOCK_FAILED = 167;
    const syscall::Errno ERROR_NO_UNICODE_TRANSLATION = 1113;
    struct SocketAddress;
    struct IpAdapterAddresses;
    struct ModuleEntry32;
    const syscall::Errno WSAEMSGSIZE = 10040;
    struct WSAMsg;
    struct FILE_ID_BOTH_DIR_INFO;
    struct FILE_FULL_DIR_INFO;
}
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::windows
{
    const uintptr_t SizeofModuleEntry32 = gocpp::Sizeof<ModuleEntry32>();
}
