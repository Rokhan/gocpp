// generated by GoCpp from file 'tests/TourOfGo/generics/generics.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/generics/generics.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // PrimeRK is the prime base used in Rabin-Karp algorithm.
    // HashStr returns the hash and the appropriate multiplicative
    // factor for use in Rabin-Karp algorithm.

    template<typename T>
    std::tuple<uint32_t, uint32_t> HashStr(T sep)
    {
        auto hash = uint32_t(0);
        for(auto i = 0; i < len(sep); i++)
        {
            hash = hash * PrimeRK + uint32_t(sep[i]);
        }
        uint32_t pow = 1;
        uint32_t sq = PrimeRK;
        for(auto i = len(sep); i > 0; i >>= 1)
        {
            if(i & 1 != 0)
            {
                pow *= sq;
            }
            sq *= sq;
        }
        return {hash, pow};
    }

    
    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    Wrapper<T>::operator U()
    {
        U result;
        result.value = this->value;
        return result;
    }

    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    bool Wrapper<T>::operator==(const U& ref) const
    {
        if (value != ref.value) return false;
        return true;
    }

    template<typename T>
    std::ostream& Wrapper<T>::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << value;
        os << '}';
        return os;
    }

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Wrapper<T>& value)
    {
        return value.PrintTo(os);
    }


    template<typename T>
    T rec::Get(golang::main::Wrapper<T>* p)
    {
        return p->value;
    }

    // from cmp/cmp.go

    template<typename T>
    T Or(gocpp::slice<T> vals)
    {
        T zero = {};
        for(auto [gocpp_ignored, val] : vals)
        {
            if(val != zero)
            {
                return val;
            }
        }
        return zero;
    }


    template<typename T>
    T Dummy1(std::string dummy, gocpp::slice<T> vals)
    {
        T zero = {};
        for(auto [gocpp_ignored, val] : vals)
        {
            if(val != zero)
            {
                return val;
            }
        }
        return zero;
    }


    template<typename T, typename U>
    U OneOrDefault(gocpp::map<T, U> dummy)
    {
        U zero = {};
        for(auto [gocpp_ignored, val] : dummy)
        {
            if(val != zero)
            {
                return val;
            }
        }
        return zero;
    }


    template<typename T>
    bool RemoveOne(gocpp::channel<T> dummy)
    {
        auto [gocpp_id_0, ok] = dummy.recv();
        return ok;
    }


    template<typename T>
    int UnusedGenericParameter()
    {
        return 3;
    }


    template<typename T>
    T Zero()
    {
        T zero = {};
        return zero;
    }

    // from slices/slices.go

    template<template<typename> class  S, typename E>
    S<E> Grow(S<E> s, int n)
    {
        if(n < 0)
        {
            gocpp::panic("cannot be negative"s);
        }
        if(n -= cap(s) - len(s); n > 0)
        {
            s = append(s.make_slice(0, cap(s)), gocpp::make(gocpp::Tag<gocpp::slice<E>>(), n)).make_slice(0, len(s));
        }
        return s;
    }

    // from sync/atomic/type.go, simplified
    
    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    Pointer<T>::operator U()
    {
        U result;
        return result;
    }

    template<typename T>
    template<typename U> requires gocpp::GoStruct<U>
    bool Pointer<T>::operator==(const U& ref) const
    {
        return true;
    }

    template<typename T>
    std::ostream& Pointer<T>::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    template<typename T>
    std::ostream& operator<<(std::ostream& os, const struct Pointer<T>& value)
    {
        return value.PrintTo(os);
    }

    // from sync/map.go, simplified
    
    template<typename T> requires gocpp::GoStruct<T>
    entry::operator T()
    {
        T result;
        result.p = this->p;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool entry::operator==(const T& ref) const
    {
        if (p != ref.p) return false;
        return true;
    }

    std::ostream& entry::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << p;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct entry& value)
    {
        return value.PrintTo(os);
    }


    template<typename T>
    void rec::Store(golang::main::Pointer<T>* x, T* val)
    {
    }

    // from sync/map.go, simplified
    struct entry* newEntry(go_any i)
    {
        auto e = new entry {};
        rec::Store<gocpp::go_any>(gocpp::recv(e->p), & i);
        return e;
    }

    void main()
    {
        auto [h1, h2] = HashStr("toto"s);
        mocklib::Printf("Hash: %v, %v\n"s, h1, h2);
        auto [h3, h4] = HashStr(gocpp::slice<unsigned char> {1, 2, 3});
        mocklib::Printf("Hash: %v, %v\n"s, h3, h4);
        auto o1 = Or(1, 2, 3, 4, 5);
        auto o2 = Or(0, 1, 2, 2, 3, 0, 0);
        mocklib::Printf("o1: %v, o2:%v\n"s, o1, o2);
        mocklib::Printf("Zero: %v\n"s, Zero<int>());
        mocklib::Printf("Unused: %v\n"s, UnusedGenericParameter<double>());
        mocklib::Printf("OneOrDefault: %v\n"s, OneOrDefault(gocpp::map<int, std::string> {{ 1, "toto"s }}));
        auto w1 = gocpp::Init<main::Wrapper<int>>([=](auto& x) {
            x.value = 42;
        });
        auto w2 = gocpp::Init<main::Wrapper<std::string>>([=](auto& x) {
            x.value = "hello"s;
        });
        mocklib::Printf("Wrapper: %v, %v\n"s, rec::Get<int>(gocpp::recv(w1)), rec::Get<std::string>(gocpp::recv(w2)));
        auto s1 = gocpp::slice<int> {1, 2, 3};
        auto s2 = Grow(s1, 10);
        mocklib::Printf("Grow: %v, %v\n"s, s1, s2);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
