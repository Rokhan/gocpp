// generated by GoCpp from file '$(ImportDir)/unicode/letter.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/unicode/letter.fwd.h"
#include "gocpp/support.h"

#include "golang/unicode/graphic.h"

namespace golang::unicode
{
    struct RangeTable
    {
        gocpp::slice<Range16> R16;
        gocpp::slice<Range32> R32;
        int LatinOffset;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RangeTable& value);
    struct Range16
    {
        uint16_t Lo;
        uint16_t Hi;
        uint16_t Stride;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Range16& value);
    struct Range32
    {
        uint32_t Lo;
        uint32_t Hi;
        uint32_t Stride;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Range32& value);
    struct CaseRange
    {
        uint32_t Lo;
        uint32_t Hi;
        d Delta;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct CaseRange& value);
    bool is16(gocpp::slice<Range16> ranges, uint16_t r);
    bool is32(gocpp::slice<Range32> ranges, uint32_t r);
    bool Is(RangeTable* rangeTab, gocpp::rune r);
    bool isExcludingLatin(RangeTable* rangeTab, gocpp::rune r);
    bool IsUpper(gocpp::rune r);
    bool IsLower(gocpp::rune r);
    bool IsTitle(gocpp::rune r);
    std::tuple<gocpp::rune, bool> to(int _case, gocpp::rune r, gocpp::slice<CaseRange> caseRange);
    gocpp::rune To(int _case, gocpp::rune r);
    gocpp::rune ToUpper(gocpp::rune r);
    gocpp::rune ToLower(gocpp::rune r);
    gocpp::rune ToTitle(gocpp::rune r);
    gocpp::rune ToUpper(SpecialCase special, gocpp::rune r);
    gocpp::rune ToTitle(SpecialCase special, gocpp::rune r);
    gocpp::rune ToLower(SpecialCase special, gocpp::rune r);
    struct foldPair
    {
        uint16_t From;
        uint16_t To;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct foldPair& value);
    gocpp::rune SimpleFold(gocpp::rune r);
}

