// generated by GoCpp from file 'tests/TourOfGo/basics/name-conflicts-full.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/name-conflicts-full.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fmt::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    toto::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool toto::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& toto::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct toto& value)
    {
        return value.PrintTo(os);
    }

    double rec::Pi(struct toto t)
    {
        return 3.14;
    }

    double rec::Pi2(struct toto t)
    {
        return Pi * Pi;
    }

    double rec::toto(struct toto t)
    {
        return 0 + 0;
    }

    struct toto rec::create(struct toto t)
    {
        return toto {};
    }

    void main()
    {
        auto World = "世界";
        mocklib::Println("Hello", World);
        mocklib::Println("Happy", Pi, "Day");
        auto Truth = true;
        mocklib::Println("Go rules?", Truth);
        mocklib::Println("Pi:", Pi);
        auto t = toto {};
        mocklib::Println("toto.Pi:", rec::Pi(gocpp::recv(t)));
        auto toto = toto {};
        mocklib::Println("toto.Pi:", rec::Pi(gocpp::recv(toto)));
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
