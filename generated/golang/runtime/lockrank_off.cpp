// generated by GoCpp from file '$(ImportDir)/runtime/lockrank_off.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/lockrank_off.h"
#include "gocpp/support.h"

// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace runtime::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    lockRankStruct::operator T()
    {
        T result;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool lockRankStruct::operator==(const T& ref) const
    {
        return true;
    }

    std::ostream& lockRankStruct::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct lockRankStruct& value)
    {
        return value.PrintTo(os);
    }

    void lockInit(struct mutex* l, golang::runtime::lockRank rank)
    {
    }

    runtime::lockRank getLockRank(struct mutex* l)
    {
        return 0;
    }

    void lockWithRank(struct mutex* l, golang::runtime::lockRank rank)
    {
        lock2(l);
    }

    void acquireLockRank(golang::runtime::lockRank rank)
    {
    }

    void unlockWithRank(struct mutex* l)
    {
        unlock2(l);
    }

    void releaseLockRank(golang::runtime::lockRank rank)
    {
    }

    void lockWithRankMayAcquire(struct mutex* l, golang::runtime::lockRank rank)
    {
    }

    void assertLockHeld(struct mutex* l)
    {
    }

    void assertRankHeld(golang::runtime::lockRank r)
    {
    }

    void worldStopped()
    {
    }

    void worldStarted()
    {
    }

    void assertWorldStopped()
    {
    }

    void assertWorldStoppedOrLockHeld(struct mutex* l)
    {
    }

}

