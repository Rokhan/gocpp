// generated by GoCpp from file '$(ImportDir)/internal/abi/switch.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/abi/switch.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"

namespace golang::abi
{
    struct InterfaceSwitch
    {
        InterfaceSwitchCache* Cache;
        int NCases;
        gocpp::array<InterfaceType*, 1> Cases;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitch& value);
    struct InterfaceSwitchCache
    {
        uintptr_t Mask;
        gocpp::array<InterfaceSwitchCacheEntry, 1> Entries;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitchCache& value);
    struct InterfaceSwitchCacheEntry
    {
        uintptr_t Typ;
        int Case;
        uintptr_t Itab;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct InterfaceSwitchCacheEntry& value);
    bool UseInterfaceSwitchCache(std::string goarch);
    struct TypeAssert
    {
        TypeAssertCache* Cache;
        InterfaceType* Inter;
        bool CanFail;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TypeAssert& value);
    struct TypeAssertCache
    {
        uintptr_t Mask;
        gocpp::array<TypeAssertCacheEntry, 1> Entries;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TypeAssertCache& value);
    struct TypeAssertCacheEntry
    {
        uintptr_t Typ;
        uintptr_t Itab;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct TypeAssertCacheEntry& value);

    namespace rec
    {
    }
}

