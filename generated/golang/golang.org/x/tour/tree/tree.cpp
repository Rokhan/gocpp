// generated by GoCpp from file '$(ImportDir)/golang.org/x/tour/tree/tree.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/golang.org/x/tour/tree/tree.h"
#include "gocpp/support.h"

// #include "golang/fmt/print.h"  [Ignored, known errors]
#include "golang/math/rand/rand.h"

namespace golang::tree
{
    
    std::ostream& Tree::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Left;
        os << " " << Value;
        os << " " << Right;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const Tree& value)
    {
        return value.PrintTo(os);
    }

    Tree* New(int k)
    {
        Tree* t = {};
        for(auto [_, v] : rand::Perm(10))
        {
            t = insert(t, (1 + v) * k);
        }
        return t;
    }

    Tree* insert(Tree* t, int v)
    {
        if(t == nullptr)
        {
            return new Tree {nullptr, v, nullptr};
        }
        if(v < t->Value)
        {
            t->Left = insert(t->Left, v);
        }
        else
        {
            t->Right = insert(t->Right, v);
        }
        return t;
    }

    std::string String(Tree* t)
    {
        if(t == nullptr)
        {
            return "()";
        }
        auto s = "";
        if(t->Left != nullptr)
        {
            s += String(gocpp::recv(t->Left)) + " ";
        }
        s += mocklib::Sprint(t->Value);
        if(t->Right != nullptr)
        {
            s += " " + String(gocpp::recv(t->Right));
        }
        return "(" + s + ")";
    }

}

