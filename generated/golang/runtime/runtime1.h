// generated by GoCpp from file '$(ImportDir)/runtime/runtime1.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/runtime1.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/bytealg/indexbyte_native.h"
// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/auxv_none.h"
#include "golang/runtime/env_posix.h"
#include "golang/runtime/extern.h"
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/stack.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/trace2.h"
#include "golang/runtime/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    extern int tracebackCrash;
    extern int tracebackAll;
    extern int tracebackShift;
    extern uint32_t traceback_cache;
    std::tuple<int32_t, bool, bool> gotraceback();
    unsigned char* argv_index(unsigned char** argv, int32_t i);
    void args(int32_t c, unsigned char** v);
    void goargs();
    void goenvs_unix();
    gocpp::slice<std::string> environ();
    void testAtomic64();
    void check();
    struct dbgVar
    {
        std::string name;
        int32_t* value;
        atomic::Int32* atomic;
        int32_t def;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dbgVar& value);
    extern gocpp::slice<dbgVar*> dbgvars;
    void parsedebugvars();
    void reparsedebugvars(std::string env);
    void parsegodebug(std::string godebug, gocpp::map<std::string, bool> seen);
    void setTraceback(std::string level);
    int32_t timediv(int64_t v, int32_t div, int32_t* rem);
    m* acquirem();
    void releasem(m* mp);
    std::tuple<gocpp::slice<unsafe::Pointer>, gocpp::slice<gocpp::slice<int32_t>>> reflect_typelinks();
    unsafe::Pointer reflect_resolveNameOff(unsafe::Pointer ptrInModule, int32_t off);
    unsafe::Pointer reflect_resolveTypeOff(unsafe::Pointer rtype, int32_t off);
    unsafe::Pointer reflect_resolveTextOff(unsafe::Pointer rtype, int32_t off);
    unsafe::Pointer reflectlite_resolveNameOff(unsafe::Pointer ptrInModule, int32_t off);
    unsafe::Pointer reflectlite_resolveTypeOff(unsafe::Pointer rtype, int32_t off);
    int32_t reflect_addReflectOff(unsafe::Pointer ptr);
}

