// generated by GoCpp from file '$(ImportDir)/runtime/fastlog2.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/fastlog2.h"
#include "gocpp/support.h"

#include "golang/runtime/fastlog2table.h"
#include "golang/runtime/float.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // fastlog2 implements a fast approximation to the base 2 log of a
    // float64. This is used to compute a geometric distribution for heap
    // sampling, without introducing dependencies into package math. This
    // uses a very rough approximation using the float64 exponent and the
    // first 25 bits of the mantissa. The top 5 bits of the mantissa are
    // used to load limits from a table of constants and the rest are used
    // to scale linearly between them.
    double fastlog2(double x)
    {
        auto fastlogScaleBits = 20;
        auto fastlogScaleRatio = 1.0 / (1 << fastlogScaleBits);
        auto xBits = float64bits(x);
        auto xExp = int64_t((xBits >> 52) & 0x7FF) - 1023;
        auto xManIndex = (xBits >> (52 - fastlogNumBits)) % (1 << fastlogNumBits);
        auto xManScale = (xBits >> (52 - fastlogNumBits - fastlogScaleBits)) % (1 << fastlogScaleBits);
        auto [low, high] = std::tuple{fastlog2Table[xManIndex], fastlog2Table[xManIndex + 1]};
        return double(xExp) + low + (high - low) * double(xManScale) * fastlogScaleRatio;
    }

}

