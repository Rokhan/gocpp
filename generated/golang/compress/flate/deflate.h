// generated by GoCpp from file '$(ImportDir)/compress/flate/deflate.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/compress/flate/deflate.fwd.h"
#include "gocpp/support.h"

#include "golang/compress/flate/deflatefast.h"
#include "golang/compress/flate/huffman_bit_writer.h"
#include "golang/compress/flate/huffman_code.h"
#include "golang/compress/flate/token.h"
#include "golang/io/io.h"

namespace golang::flate
{
    struct compressionLevel
    {
        int level;
        int good;
        int lazy;
        int nice;
        int chain;
        int fastSkipHashing;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct compressionLevel& value);
    extern gocpp::slice<compressionLevel> levels;
    struct compressor
    {
        huffmanBitWriter* w;
        std::function<void (gocpp::slice<unsigned char>, gocpp::slice<uint32_t>)> bulkHasher;
        std::function<int (compressor*, gocpp::slice<unsigned char>)> fill;
        std::function<void (compressor*)> step;
        bool sync;
        deflateFast* bestSpeed;
        int chainHead;
        gocpp::array<uint32_t, hashSize> hashHead;
        gocpp::array<uint32_t, windowSize> hashPrev;
        int hashOffset;
        int index;
        gocpp::slice<unsigned char> window;
        int windowEnd;
        int blockStart;
        bool byteAvailable;
        gocpp::slice<token> tokens;
        int length;
        int offset;
        int maxInsertIndex;
        gocpp::error err;
        gocpp::array<uint32_t, maxMatchLength - 1> hashMatch;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct compressor& value);
    int fillDeflate(struct compressor* d, gocpp::slice<unsigned char> b);
    gocpp::error writeBlock(struct compressor* d, gocpp::slice<token> tokens, int index);
    void fillWindow(struct compressor* d, gocpp::slice<unsigned char> b);
    std::tuple<int, int, bool> findMatch(struct compressor* d, int pos, int prevHead, int prevLength, int lookahead);
    gocpp::error writeStoredBlock(struct compressor* d, gocpp::slice<unsigned char> buf);
    uint32_t hash4(gocpp::slice<unsigned char> b);
    void bulkHash4(gocpp::slice<unsigned char> b, gocpp::slice<uint32_t> dst);
    int matchLen(gocpp::slice<unsigned char> a, gocpp::slice<unsigned char> b, int max);
    void encSpeed(struct compressor* d);
    void initDeflate(struct compressor* d);
    void deflate(struct compressor* d);
    int fillStore(struct compressor* d, gocpp::slice<unsigned char> b);
    void store(struct compressor* d);
    void storeHuff(struct compressor* d);
    std::tuple<int, gocpp::error> write(struct compressor* d, gocpp::slice<unsigned char> b);
    gocpp::error syncFlush(struct compressor* d);
    gocpp::error init(struct compressor* d, io::Writer w, int level);
    void reset(struct compressor* d, io::Writer w);
    gocpp::error close(struct compressor* d);
    std::tuple<Writer*, gocpp::error> NewWriter(io::Writer w, int level);
    std::tuple<Writer*, gocpp::error> NewWriterDict(io::Writer w, int level, gocpp::slice<unsigned char> dict);
    struct dictWriter
    {
        io::Writer w;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dictWriter& value);
    std::tuple<int, gocpp::error> Write(struct dictWriter* w, gocpp::slice<unsigned char> b);
    extern gocpp::error errWriterClosed;
    struct Writer
    {
        compressor d;
        gocpp::slice<unsigned char> dict;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Writer& value);
    std::tuple<int, gocpp::error> Write(struct Writer* w, gocpp::slice<unsigned char> data);
    gocpp::error Flush(struct Writer* w);
    gocpp::error Close(struct Writer* w);
    void Reset(struct Writer* w, io::Writer dst);
}

