// generated by GoCpp from file '$(ImportDir)/runtime/trace2event.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2event.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/consts.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2stack.h"
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2string.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct traceEventWriter
    {
        traceWriter w;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceEventWriter& value);
    traceEventWriter eventWriter(struct traceLocker tl, traceGoStatus goStatus, traceProcStatus procStatus);
    void commit(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args);
    template<typename... Args>
    void commit(struct traceEventWriter e, traceEv ev, Args... args)
    {
        return commit(e, ev, gocpp::ToSlice<traceArg>(args...));
    }

    traceEventWriter write(struct traceEventWriter e, traceEv ev, gocpp::slice<traceArg> args);
    template<typename... Args>
    traceEventWriter write(struct traceEventWriter e, traceEv ev, Args... args)
    {
        return write(e, ev, gocpp::ToSlice<traceArg>(args...));
    }

    void end(struct traceEventWriter e);
    traceWriter event(struct traceWriter w, traceEv ev, gocpp::slice<traceArg> args);
    template<typename... Args>
    traceWriter event(struct traceWriter w, traceEv ev, Args... args)
    {
        return event(w, ev, gocpp::ToSlice<traceArg>(args...));
    }

    traceArg stack(struct traceLocker tl, int skip);
    traceArg startPC(struct traceLocker tl, uintptr_t pc);
    traceArg string(struct traceLocker tl, std::string s);
    traceArg uniqueString(struct traceLocker tl, std::string s);
}

