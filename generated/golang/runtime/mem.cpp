// generated by GoCpp from file '$(ImportDir)/runtime/mem.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mem.h"
#include "gocpp/support.h"

// #include "golang/internal/cpu/cpu.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/mem_windows.h"
// #include "golang/runtime/mgcpacer.h"  [Ignored, known errors]
#include "golang/runtime/mstats.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace atomic::rec;
        using namespace runtime::rec;
        using namespace unsafe::rec;
    }

    unsafe::Pointer sysAlloc(uintptr_t n, golang::runtime::sysMemStat* sysStat)
    {
        rec::add(gocpp::recv(sysStat), int64_t(n));
        rec::Add(gocpp::recv(gcController.mappedReady), int64_t(n));
        return sysAllocOS(n);
    }

    void sysUnused(unsafe::Pointer v, uintptr_t n)
    {
        rec::Add(gocpp::recv(gcController.mappedReady), - int64_t(n));
        sysUnusedOS(v, n);
    }

    void sysUsed(unsafe::Pointer v, uintptr_t n, uintptr_t prepared)
    {
        rec::Add(gocpp::recv(gcController.mappedReady), int64_t(prepared));
        sysUsedOS(v, n);
    }

    void sysHugePage(unsafe::Pointer v, uintptr_t n)
    {
        sysHugePageOS(v, n);
    }

    void sysNoHugePage(unsafe::Pointer v, uintptr_t n)
    {
        sysNoHugePageOS(v, n);
    }

    void sysHugePageCollapse(unsafe::Pointer v, uintptr_t n)
    {
        sysHugePageCollapseOS(v, n);
    }

    void sysFree(unsafe::Pointer v, uintptr_t n, golang::runtime::sysMemStat* sysStat)
    {
        rec::add(gocpp::recv(sysStat), - int64_t(n));
        rec::Add(gocpp::recv(gcController.mappedReady), - int64_t(n));
        sysFreeOS(v, n);
    }

    void sysFault(unsafe::Pointer v, uintptr_t n)
    {
        rec::Add(gocpp::recv(gcController.mappedReady), - int64_t(n));
        sysFaultOS(v, n);
    }

    unsafe::Pointer sysReserve(unsafe::Pointer v, uintptr_t n)
    {
        return sysReserveOS(v, n);
    }

    void sysMap(unsafe::Pointer v, uintptr_t n, golang::runtime::sysMemStat* sysStat)
    {
        rec::add(gocpp::recv(sysStat), int64_t(n));
        sysMapOS(v, n);
    }

}

