// generated by GoCpp from file '$(ImportDir)/runtime/preempt.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/preempt.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/funcpc.h"
// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
// #include "golang/internal/goarch/goarch.h"  [Ignored, known errors]
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/extern.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/stack.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/symtabinl.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.h"

namespace golang::runtime
{
    struct suspendGState
    {
        g* g;
        bool dead;
        bool stopped;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct suspendGState& value);
    suspendGState suspendG(g* gp);
    void resumeG(suspendGState state);
    bool canPreemptM(m* mp);
    void asyncPreempt();
    void asyncPreempt2();
    extern uintptr_t asyncPreemptStack;
    void init();
    bool wantAsyncPreempt(g* gp);
    std::tuple<bool, uintptr_t> isAsyncSafePoint(g* gp, uintptr_t pc, uintptr_t sp, uintptr_t lr);
}

