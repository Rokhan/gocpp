// generated by GoCpp from file 'tests/TourOfGo/libs/hex.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/libs/hex.h"
#include "gocpp/support.h"

#include "golang/encoding/hex/hex.h"
#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    void main()
    {
        auto src = gocpp::slice<unsigned char>("Hello"s);
        auto dst = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), hex::EncodedLen(len(src)));
        hex::Encode(dst, src);
        mocklib::Printf("%s\n"s, dst);
        auto decoded = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), hex::DecodedLen(len(dst)));
        auto [gocpp_id_0, err] = hex::Decode(decoded, dst);
        if(err != nullptr)
        {
            mocklib::Println(err);
        }
        mocklib::Printf("%s\n"s, decoded);
        auto dump = hex::Dump(src);
        mocklib::Println(dump);
        auto s = "48656c6c6f"s;
        gocpp::slice<unsigned char> data;
        std::tie(data, err) = hex::DecodeString(s);
        if(err != nullptr)
        {
            gocpp::panic(err);
        }
        mocklib::Printf("%s\n"s, data);
        auto str = hex::EncodeToString(src);
        mocklib::Println(str);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
