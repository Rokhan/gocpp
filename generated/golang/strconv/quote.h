// generated by GoCpp from file '$(ImportDir)/strconv/quote.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strconv/quote.fwd.h"
#include "gocpp/support.h"

#include "golang/strconv/bytealg.h"
#include "golang/unicode/utf8/utf8.h"

namespace golang::strconv
{
    extern std::string lowerhex;
    extern std::string upperhex;
    bool contains(std::string s, unsigned char c);
    std::string quoteWith(std::string s, unsigned char quote, bool ASCIIonly, bool graphicOnly);
    std::string quoteRuneWith(rune r, unsigned char quote, bool ASCIIonly, bool graphicOnly);
    gocpp::slice<unsigned char> appendQuotedWith(gocpp::slice<unsigned char> buf, std::string s, unsigned char quote, bool ASCIIonly, bool graphicOnly);
    gocpp::slice<unsigned char> appendQuotedRuneWith(gocpp::slice<unsigned char> buf, rune r, unsigned char quote, bool ASCIIonly, bool graphicOnly);
    gocpp::slice<unsigned char> appendEscapedRune(gocpp::slice<unsigned char> buf, rune r, unsigned char quote, bool ASCIIonly, bool graphicOnly);
    std::string Quote(std::string s);
    gocpp::slice<unsigned char> AppendQuote(gocpp::slice<unsigned char> dst, std::string s);
    std::string QuoteToASCII(std::string s);
    gocpp::slice<unsigned char> AppendQuoteToASCII(gocpp::slice<unsigned char> dst, std::string s);
    std::string QuoteToGraphic(std::string s);
    gocpp::slice<unsigned char> AppendQuoteToGraphic(gocpp::slice<unsigned char> dst, std::string s);
    std::string QuoteRune(rune r);
    gocpp::slice<unsigned char> AppendQuoteRune(gocpp::slice<unsigned char> dst, rune r);
    std::string QuoteRuneToASCII(rune r);
    gocpp::slice<unsigned char> AppendQuoteRuneToASCII(gocpp::slice<unsigned char> dst, rune r);
    std::string QuoteRuneToGraphic(rune r);
    gocpp::slice<unsigned char> AppendQuoteRuneToGraphic(gocpp::slice<unsigned char> dst, rune r);
    bool CanBackquote(std::string s);
    std::tuple<rune, bool> unhex(unsigned char b);
    std::tuple<rune, bool, std::string, std::string> UnquoteChar(std::string s, unsigned char quote);
    std::tuple<std::string, std::string> QuotedPrefix(std::string s);
    std::tuple<std::string, std::string> Unquote(std::string s);
    std::tuple<std::string, std::string, std::string> unquote(std::string in, bool unescape);
    int bsearch16(gocpp::slice<uint16_t> a, uint16_t x);
    int bsearch32(gocpp::slice<uint32_t> a, uint32_t x);
    bool IsPrint(rune r);
    bool IsGraphic(rune r);
    bool isInGraphicList(rune r);
}

