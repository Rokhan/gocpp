// generated by GoCpp from file 'tests/TourOfGo/moretypes/array.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/moretypes/array.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    struct gocpp_id_0
    {
        int value;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T()
        {
            T result;
            result.value = this->value;
            return result;
        }

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const
        {
            if (value != ref.value) return false;
            return true;
        }

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << "" << value;
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
    {
        return value.PrintTo(os);
    }


    // Array of struct
    struct gocpp_id_1
    {
        int value;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T()
        {
            T result;
            result.value = this->value;
            return result;
        }

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const
        {
            if (value != ref.value) return false;
            return true;
        }

        std::ostream& PrintTo(std::ostream& os) const
        {
            os << '{';
            os << "" << value;
            os << '}';
            return os;
        }
    };

    std::ostream& operator<<(std::ostream& os, const struct gocpp_id_1& value)
    {
        return value.PrintTo(os);
    }


    void main()
    {
        gocpp::array<std::string, 2> a = {};
        a[0] = "Hello"s;
        a[1] = "World"s;
        mocklib::Println(a[0], a[1]);
        mocklib::Println(a);
        auto primes = gocpp::array<int, 6> {2, 3, 5, 7, 11, 13};
        mocklib::Println(primes);
        auto ints = gocpp::array<int, 3> {1, 2, 3};
        mocklib::Println(ints);
        auto st1 = main::semTable1 { {1},  {1}};
        mocklib::Println(st1);
        auto st2 = main::semTable2 { {1},  {1}};
        mocklib::Println(st2);
        auto chars = gocpp::array<unsigned char, 5> {'H', 'e', 'l', 'l', 'o'};
        mocklib::Println(chars);
        auto hw1 = "Hello, World!"s;
        auto hwBytes1 = gocpp::slice<unsigned char>(hw1);
        mocklib::Println(hwBytes1);
        auto hw2 = "Hello, World!"s;
        auto hwBytes2 = gocpp::slice<unsigned char>(hw2);
        mocklib::Println(hwBytes2);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
