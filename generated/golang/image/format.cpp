// generated by GoCpp from file '$(ImportDir)/image/format.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/format.h"
#include "gocpp/support.h"

#include "golang/bufio/bufio.h"
#include "golang/errors/errors.h"
#include "golang/image/color/color.h"
#include "golang/image/geom.h"
#include "golang/image/image.h"
#include "golang/io/io.h"
#include "golang/sync/atomic/value.h"
#include "golang/sync/mutex.h"

namespace golang::image
{
    gocpp::error ErrFormat = errors::New("image: unknown format");
    
    template<typename T> requires gocpp::GoStruct<T>
    format::operator T()
    {
        T result;
        result.name = this->name;
        result.magic = this->magic;
        result.decode = this->decode;
        result.decodeConfig = this->decodeConfig;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool format::operator==(const T& ref) const
    {
        if (name != ref.name) return false;
        if (magic != ref.magic) return false;
        if (decode != ref.decode) return false;
        if (decodeConfig != ref.decodeConfig) return false;
        return true;
    }

    std::ostream& format::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << name;
        os << " " << magic;
        os << " " << decode;
        os << " " << decodeConfig;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct format& value)
    {
        return value.PrintTo(os);
    }

    mocklib::Mutex formatsMu;
    atomic::Value atomicFormats;
    void RegisterFormat(std::string name, std::string magic, std::function<std::tuple<struct Image, struct gocpp::error> (io::Reader)> decode, std::function<std::tuple<struct Config, struct gocpp::error> (io::Reader)> decodeConfig)
    {
        Lock(gocpp::recv(formatsMu));
        auto [formats, gocpp_id_1] = gocpp::getValue<gocpp::slice<image::format>>(Load(gocpp::recv(atomicFormats)));
        Store(gocpp::recv(atomicFormats), append(formats, format {name, magic, decode, decodeConfig}));
        Unlock(gocpp::recv(formatsMu));
    }

    
    template<typename T>
    reader::reader(T& ref)
    {
        value.reset(new readerImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    reader::reader(const T& ref)
    {
        value.reset(new readerImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    reader::reader(T* ptr)
    {
        value.reset(new readerImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& reader::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> reader::readerImpl<T, StoreT>::vPeek(int)
    {
        return Peek(gocpp::PtrRecv<T, false>(value.get()));
    }

    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> Peek(const gocpp::PtrRecv<reader, false>& self, int)
    {
        return self.ptr->value->vPeek();
    }

    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> Peek(const gocpp::ObjRecv<reader>& self, int)
    {
        return self.obj.value->vPeek();
    }

    std::ostream& operator<<(std::ostream& os, const struct reader& value)
    {
        return value.PrintTo(os);
    }

    struct reader asReader(struct io::Reader r)
    {
        if(auto [rr, ok] = gocpp::getValue<reader>(r); ok)
        {
            return rr;
        }
        return bufio::NewReader(r);
    }

    bool match(std::string magic, gocpp::slice<unsigned char> b)
    {
        if(len(magic) != len(b))
        {
            return false;
        }
        for(auto [i, c] : b)
        {
            if(magic[i] != c && magic[i] != '?')
            {
                return false;
            }
        }
        return true;
    }

    struct format sniff(struct reader r)
    {
        auto [formats, gocpp_id_3] = gocpp::getValue<gocpp::slice<image::format>>(Load(gocpp::recv(atomicFormats)));
        for(auto [gocpp_ignored, f] : formats)
        {
            auto [b, err] = Peek(gocpp::recv(r), len(f.magic));
            if(err == nullptr && match(f.magic, b))
            {
                return f;
            }
        }
        return format {};
    }

    std::tuple<struct Image, std::string, struct gocpp::error> Decode(struct io::Reader r)
    {
        auto rr = asReader(r);
        auto f = sniff(rr);
        if(f.decode == nullptr)
        {
            return {nullptr, "", ErrFormat};
        }
        auto [m, err] = decode(gocpp::recv(f), rr);
        return {m, f.name, err};
    }

    std::tuple<struct Config, std::string, struct gocpp::error> DecodeConfig(struct io::Reader r)
    {
        auto rr = asReader(r);
        auto f = sniff(rr);
        if(f.decodeConfig == nullptr)
        {
            return {Config {}, "", ErrFormat};
        }
        auto [c, err] = decodeConfig(gocpp::recv(f), rr);
        return {c, f.name, err};
    }

}

