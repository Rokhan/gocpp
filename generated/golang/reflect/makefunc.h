// generated by GoCpp from file '$(ImportDir)/reflect/makefunc.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/reflect/makefunc.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/abi.h"
#include "golang/internal/abi/type.h"
#include "golang/reflect/type.h"
// #include "golang/reflect/value.h"  [Ignored, known errors]
// #include "golang/sync/cond.h"  [Ignored, known errors]
#include "golang/sync/pool.h"

namespace golang::reflect
{
    struct makeFuncImpl
    {
        funcType* ftyp;
        std::function<gocpp::slice<Value> (gocpp::slice<Value>)> fn;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct makeFuncImpl& value);
    Value MakeFunc(Type typ, std::function<gocpp::slice<Value> (gocpp::slice<Value> args)> fn);
    void makeFuncStub();
    struct methodValue
    {
        int method;
        Value rcvr;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct methodValue& value);
    Value makeMethodValue(std::string op, Value v);
    uintptr_t methodValueCallCodePtr();
    void methodValueCall();
    struct makeFuncCtxt
    {
        uintptr_t fn;
        bitVector* stack;
        uintptr_t argLen;
        abi::IntArgRegBitmap regPtrs;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct makeFuncCtxt& value);
    void moveMakeFuncArgPtrs(makeFuncCtxt* ctxt, abi::RegArgs* args);
}

