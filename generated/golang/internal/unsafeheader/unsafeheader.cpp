// generated by GoCpp from file '$(ImportDir)/internal/unsafeheader/unsafeheader.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/unsafeheader/unsafeheader.h"
#include "gocpp/support.h"

#include "golang/unsafe/unsafe.h"

namespace golang::unsafeheader
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace unsafe::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Slice::operator T()
    {
        T result;
        result.Data = this->Data;
        result.Len = this->Len;
        result.Cap = this->Cap;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Slice::operator==(const T& ref) const
    {
        if (Data != ref.Data) return false;
        if (Len != ref.Len) return false;
        if (Cap != ref.Cap) return false;
        return true;
    }

    std::ostream& Slice::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Data;
        os << " " << Len;
        os << " " << Cap;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Slice& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    String::operator T()
    {
        T result;
        result.Data = this->Data;
        result.Len = this->Len;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool String::operator==(const T& ref) const
    {
        if (Data != ref.Data) return false;
        if (Len != ref.Len) return false;
        return true;
    }

    std::ostream& String::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Data;
        os << " " << Len;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct String& value)
    {
        return value.PrintTo(os);
    }

}

