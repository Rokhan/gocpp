// generated by GoCpp from file '$(ImportDir)/math/bits/bits.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/bits/bits.fwd.h"
#include "gocpp/support.h"

#include "golang/math/bits/bits_tables.h"

namespace golang::bits
{
    int LeadingZeros(unsigned int x);
    int LeadingZeros8(uint8_t x);
    int LeadingZeros16(uint16_t x);
    int LeadingZeros32(uint32_t x);
    int LeadingZeros64(uint64_t x);
    extern gocpp::array<unsigned char, 32> deBruijn32tab;
    extern gocpp::array<unsigned char, 64> deBruijn64tab;
    int TrailingZeros(unsigned int x);
    int TrailingZeros8(uint8_t x);
    int TrailingZeros16(uint16_t x);
    int TrailingZeros32(uint32_t x);
    int TrailingZeros64(uint64_t x);
    int OnesCount(unsigned int x);
    int OnesCount8(uint8_t x);
    int OnesCount16(uint16_t x);
    int OnesCount32(uint32_t x);
    int OnesCount64(uint64_t x);
    unsigned int RotateLeft(unsigned int x, int k);
    uint8_t RotateLeft8(uint8_t x, int k);
    uint16_t RotateLeft16(uint16_t x, int k);
    uint32_t RotateLeft32(uint32_t x, int k);
    uint64_t RotateLeft64(uint64_t x, int k);
    unsigned int Reverse(unsigned int x);
    uint8_t Reverse8(uint8_t x);
    uint16_t Reverse16(uint16_t x);
    uint32_t Reverse32(uint32_t x);
    uint64_t Reverse64(uint64_t x);
    unsigned int ReverseBytes(unsigned int x);
    uint16_t ReverseBytes16(uint16_t x);
    uint32_t ReverseBytes32(uint32_t x);
    uint64_t ReverseBytes64(uint64_t x);
    int Len(unsigned int x);
    int Len8(uint8_t x);
    int Len16(uint16_t x);
    int Len32(uint32_t x);
    int Len64(uint64_t x);
    std::tuple<unsigned int, unsigned int> Add(unsigned int x, unsigned int y, unsigned int carry);
    std::tuple<uint32_t, uint32_t> Add32(uint32_t x, uint32_t y, uint32_t carry);
    std::tuple<uint64_t, uint64_t> Add64(uint64_t x, uint64_t y, uint64_t carry);
    std::tuple<unsigned int, unsigned int> Sub(unsigned int x, unsigned int y, unsigned int borrow);
    std::tuple<uint32_t, uint32_t> Sub32(uint32_t x, uint32_t y, uint32_t borrow);
    std::tuple<uint64_t, uint64_t> Sub64(uint64_t x, uint64_t y, uint64_t borrow);
    std::tuple<unsigned int, unsigned int> Mul(unsigned int x, unsigned int y);
    std::tuple<uint32_t, uint32_t> Mul32(uint32_t x, uint32_t y);
    std::tuple<uint64_t, uint64_t> Mul64(uint64_t x, uint64_t y);
    std::tuple<unsigned int, unsigned int> Div(unsigned int hi, unsigned int lo, unsigned int y);
    std::tuple<uint32_t, uint32_t> Div32(uint32_t hi, uint32_t lo, uint32_t y);
    std::tuple<uint64_t, uint64_t> Div64(uint64_t hi, uint64_t lo, uint64_t y);
    unsigned int Rem(unsigned int hi, unsigned int lo, unsigned int y);
    uint32_t Rem32(uint32_t hi, uint32_t lo, uint32_t y);
    uint64_t Rem64(uint64_t hi, uint64_t lo, uint64_t y);
}

