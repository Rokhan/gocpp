// generated by GoCpp from file '$(ImportDir)/sort/sort.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sort/sort.fwd.h"
#include "gocpp/support.h"


namespace golang::sort
{
    struct lessSwap
    {
        std::function<bool (int i, int j)> Less;
        std::function<void (int i, int j)> Swap;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct lessSwap& value);
    struct Interface : gocpp::Interface
    {
        using gocpp::Interface::operator==;
        using gocpp::Interface::operator!=;

        Interface(){}
        Interface(Interface& i) = default;
        Interface(const Interface& i) = default;
        Interface& operator=(Interface& i) = default;
        Interface& operator=(const Interface& i) = default;

        template<typename T>
        Interface(T& ref);

        template<typename T>
        Interface(const T& ref);

        template<typename T>
        Interface(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct IInterface
        {
            virtual int vLen() = 0;
            virtual bool vLess(int i, int j) = 0;
            virtual void vSwap(int i, int j) = 0;
        };

        template<typename T, typename StoreT>
        struct InterfaceImpl : IInterface
        {
            explicit InterfaceImpl(T* ptr)
            {
                value.reset(ptr);
            }

            int vLen() override;

            bool vLess(int i, int j) override;

            void vSwap(int i, int j) override;

            StoreT value;
        };

        std::shared_ptr<IInterface> value;
    };

    namespace rec
    {
        int Len(const gocpp::PtrRecv<struct Interface, false>& self);
        int Len(const gocpp::ObjRecv<struct Interface>& self);

        bool Less(const gocpp::PtrRecv<struct Interface, false>& self, int i, int j);
        bool Less(const gocpp::ObjRecv<struct Interface>& self, int i, int j);

        void Swap(const gocpp::PtrRecv<struct Interface, false>& self, int i, int j);
        void Swap(const gocpp::ObjRecv<struct Interface>& self, int i, int j);
    }

    std::ostream& operator<<(std::ostream& os, const struct Interface& value);
    void Sort(struct Interface data);
    unsigned int nextPowerOfTwo(int length);
    struct Interface Reverse(struct Interface data);
    bool IsSorted(struct Interface data);
    bool isNaN(double f);
    void Ints(gocpp::slice<int> x);
    void Float64s(gocpp::slice<double> x);
    void Strings(gocpp::slice<std::string> x);
    bool IntsAreSorted(gocpp::slice<int> x);
    bool Float64sAreSorted(gocpp::slice<double> x);
    bool StringsAreSorted(gocpp::slice<std::string> x);
    void Stable(struct Interface data);
    struct reverse
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct reverse& value);

    namespace rec
    {
        uint64_t Next(golang::sort::xorshift* r);
        bool Less(struct reverse r, int i, int j);
        int Len(golang::sort::IntSlice x);
        bool Less(golang::sort::IntSlice x, int i, int j);
        void Swap(golang::sort::IntSlice x, int i, int j);
        void Sort(golang::sort::IntSlice x);
        int Len(golang::sort::Float64Slice x);
        bool Less(golang::sort::Float64Slice x, int i, int j);
        void Swap(golang::sort::Float64Slice x, int i, int j);
        void Sort(golang::sort::Float64Slice x);
        int Len(golang::sort::StringSlice x);
        bool Less(golang::sort::StringSlice x, int i, int j);
        void Swap(golang::sort::StringSlice x, int i, int j);
        void Sort(golang::sort::StringSlice x);
    }
}

