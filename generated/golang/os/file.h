// generated by GoCpp from file '$(ImportDir)/os/file.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/file.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/io/io.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/net.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    extern bool checkWrapErr;
    extern File* Stderr;
    extern File* Stdin;
    struct LinkError
    {
        std::string Op;
        std::string Old;
        std::string New;
        gocpp::error Err;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct LinkError& value);
    struct noReadFrom
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct noReadFrom& value);
    extern fs::FileInfo, gocpp::error> (std::string)> lstat;
    extern File* Stdout;
    extern gocpp::error errWriteAtInAppendMode;
    struct noWriteTo
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct noWriteTo& value);
    std::tuple<int64_t, struct gocpp::error> genericReadFrom(struct File* f, io::Reader r);
    std::tuple<int64_t, struct gocpp::error> genericWriteTo(struct File* f, io::Writer w);
    struct gocpp::error Mkdir(std::string name, golang::os::FileMode perm);
    struct gocpp::error setStickyBit(std::string name);
    struct gocpp::error Chdir(std::string dir);
    std::tuple<struct File*, struct gocpp::error> Open(std::string name);
    std::tuple<struct File*, struct gocpp::error> Create(std::string name);
    std::tuple<struct File*, struct gocpp::error> OpenFile(std::string name, int flag, golang::os::FileMode perm);
    struct gocpp::error Rename(std::string oldpath, std::string newpath);
    std::tuple<std::string, struct gocpp::error> Readlink(std::string name);
    std::tuple<int, struct gocpp::error> fixCount(int n, struct gocpp::error err);
    std::string TempDir();
    std::tuple<std::string, struct gocpp::error> UserCacheDir();
    std::tuple<std::string, struct gocpp::error> UserConfigDir();
    std::tuple<std::string, struct gocpp::error> UserHomeDir();
    struct gocpp::error Chmod(std::string name, golang::os::FileMode mode);
    fs::FS DirFS(std::string dir);
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> ReadFile(std::string name);
    struct gocpp::error WriteFile(std::string name, gocpp::slice<unsigned char> data, golang::os::FileMode perm);
    struct fileWithoutReadFrom
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fileWithoutReadFrom& value);
    struct fileWithoutWriteTo
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fileWithoutWriteTo& value);

    namespace rec
    {
        std::string Name(struct File* f);
        std::string Error(struct LinkError* e);
        struct gocpp::error Unwrap(struct LinkError* e);
        std::tuple<int, struct gocpp::error> Read(struct File* f, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> ReadAt(struct File* f, gocpp::slice<unsigned char> b, int64_t off);
        std::tuple<int64_t, struct gocpp::error> ReadFrom(struct File* f, io::Reader r);
        std::tuple<int64_t, struct gocpp::error> ReadFrom(noReadFrom, io::Reader);
        std::tuple<int, struct gocpp::error> Write(struct File* f, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> WriteAt(struct File* f, gocpp::slice<unsigned char> b, int64_t off);
        std::tuple<int64_t, struct gocpp::error> WriteTo(struct File* f, io::Writer w);
        std::tuple<int64_t, struct gocpp::error> WriteTo(noWriteTo, io::Writer);
        std::tuple<int64_t, struct gocpp::error> Seek(struct File* f, int64_t offset, int whence);
        std::tuple<int, struct gocpp::error> WriteString(struct File* f, std::string s);
        struct gocpp::error wrapErr(struct File* f, std::string op, struct gocpp::error err);
        struct gocpp::error Chmod(struct File* f, golang::os::FileMode mode);
        struct gocpp::error SetDeadline(struct File* f, mocklib::Date t);
        struct gocpp::error SetReadDeadline(struct File* f, mocklib::Date t);
        struct gocpp::error SetWriteDeadline(struct File* f, mocklib::Date t);
        std::tuple<syscall::RawConn, struct gocpp::error> SyscallConn(struct File* f);
        std::tuple<fs::File, struct gocpp::error> Open(golang::os::dirFS dir, std::string name);
        std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> ReadFile(golang::os::dirFS dir, std::string name);
        std::tuple<gocpp::slice<os::DirEntry>, struct gocpp::error> ReadDir(golang::os::dirFS dir, std::string name);
        std::tuple<fs::FileInfo, struct gocpp::error> Stat(golang::os::dirFS dir, std::string name);
        std::tuple<std::string, struct gocpp::error> join(golang::os::dirFS dir, std::string name);
    }
}

