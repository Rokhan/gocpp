// generated by GoCpp from file '$(ImportDir)/runtime/mcache.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mcache.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mheap.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct mcache
    {
        sys::NotInHeap _;
        uintptr_t nextSample;
        uintptr_t scanAlloc;
        uintptr_t tiny;
        uintptr_t tinyoffset;
        uintptr_t tinyAllocs;
        gocpp::array<mspan*, numSpanClasses> alloc;
        gocpp::array<stackfreelist, _NumStackOrders> stackcache;
        atomic::Uint32 flushGen;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct mcache& value);
    struct gclink
    {
        runtime::gclinkptr next;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct gclink& value);
    struct stackfreelist
    {
        runtime::gclinkptr list;
        uintptr_t size;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct stackfreelist& value);
    struct mcache* allocmcache();
    void freemcache(struct mcache* c);
    struct mcache* getMCache(struct m* mp);

    namespace rec
    {
        struct gclink* ptr(runtime::gclinkptr p);
        void refill(struct mcache* c, runtime::spanClass spc);
        struct mspan* allocLarge(struct mcache* c, uintptr_t size, bool noscan);
        void releaseAll(struct mcache* c);
        void prepareForSweep(struct mcache* c);
    }
}

