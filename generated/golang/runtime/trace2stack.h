// generated by GoCpp from file '$(ImportDir)/runtime/trace2stack.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2stack.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/goarch/goarch.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/stubs_amd64.h"
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/symtabinl.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
#include "golang/runtime/trace2event.h"
// #include "golang/runtime/trace2map.h"  [Ignored, known errors]
#include "golang/runtime/trace2string.h"
// #include "golang/runtime/traceback.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    uint64_t traceStack(int skip, m* mp, uintptr_t gen);
    struct traceStackTable
    {
        traceMap tab;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceStackTable& value);
    uint64_t put(struct traceStackTable* t, gocpp::slice<uintptr_t> pcs);
    void dump(struct traceStackTable* t, uintptr_t gen);
    gocpp::slice<traceFrame> makeTraceFrames(uintptr_t gen, gocpp::slice<uintptr_t> pcs);
    struct traceFrame
    {
        uintptr_t PC;
        uint64_t funcID;
        uint64_t fileID;
        uint64_t line;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceFrame& value);
    traceFrame makeTraceFrame(uintptr_t gen, Frame f);
    bool tracefpunwindoff();
    int fpTracebackPCs(unsafe::Pointer fp, gocpp::slice<uintptr_t> pcBuf);
    gocpp::slice<uintptr_t> fpunwindExpand(gocpp::slice<uintptr_t> pcBuf);
    uintptr_t startPCForTrace(uintptr_t pc);
}

