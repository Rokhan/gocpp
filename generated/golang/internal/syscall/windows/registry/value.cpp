// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/registry/value.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/registry/value.h"
#include "gocpp/support.h"

#include "golang/errors/errors.h"
#include "golang/internal/syscall/windows/registry/key.h"
#include "golang/internal/syscall/windows/registry/syscall.h"
#include "golang/internal/syscall/windows/registry/zsyscall_windows.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/syscall/zsyscall_windows.h"
#include "golang/unicode/utf16/utf16.h"
#include "golang/unsafe/unsafe.h"

namespace golang::registry
{
    syscall::Errno ErrShortBuffer = syscall::ERROR_MORE_DATA;
    syscall::Errno ErrNotExist = syscall::ERROR_FILE_NOT_FOUND;
    std::string ErrUnexpectedType = errors::New("unexpected key value type");
    std::tuple<int, uint32_t, std::string> GetValue(Key k, std::string name, gocpp::slice<unsigned char> buf)
    {
        int n;
        uint32_t valtype;
        std::string err;
        auto [pname, err] = syscall::UTF16PtrFromString(name);
        if(err != nullptr)
        {
            int n;
            uint32_t valtype;
            std::string err;
            return {0, 0, err};
        }
        unsigned char* pbuf = {};
        if(len(buf) > 0)
        {
            int n;
            uint32_t valtype;
            std::string err;
            pbuf = (unsigned char*)(unsafe::Pointer(& buf[0]));
        }
        auto l = uint32_t(len(buf));
        err = syscall::RegQueryValueEx(syscall::Handle(k), pname, nullptr, & valtype, pbuf, & l);
        if(err != nullptr)
        {
            int n;
            uint32_t valtype;
            std::string err;
            return {int(l), valtype, err};
        }
        return {int(l), valtype, nullptr};
    }

    std::tuple<gocpp::slice<unsigned char>, uint32_t, std::string> getValue(Key k, std::string name, gocpp::slice<unsigned char> buf)
    {
        gocpp::slice<unsigned char> date;
        uint32_t valtype;
        std::string err;
        auto [p, err] = syscall::UTF16PtrFromString(name);
        if(err != nullptr)
        {
            gocpp::slice<unsigned char> date;
            uint32_t valtype;
            std::string err;
            return {nullptr, 0, err};
        }
        uint32_t t = {};
        auto n = uint32_t(len(buf));
        for(; ; )
        {
            gocpp::slice<unsigned char> date;
            uint32_t valtype;
            std::string err;
            err = syscall::RegQueryValueEx(syscall::Handle(k), p, nullptr, & t, (unsigned char*)(unsafe::Pointer(& buf[0])), & n);
            if(err == nullptr)
            {
                gocpp::slice<unsigned char> date;
                uint32_t valtype;
                std::string err;
                return {buf.make_slice(0, n), t, nullptr};
            }
            if(err != syscall::ERROR_MORE_DATA)
            {
                gocpp::slice<unsigned char> date;
                uint32_t valtype;
                std::string err;
                return {nullptr, 0, err};
            }
            if(n <= uint32_t(len(buf)))
            {
                gocpp::slice<unsigned char> date;
                uint32_t valtype;
                std::string err;
                return {nullptr, 0, err};
            }
            buf = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), n);
        }
    }

    std::tuple<std::string, uint32_t, std::string> GetStringValue(Key k, std::string name)
    {
        std::string val;
        uint32_t valtype;
        std::string err;
        auto [data, typ, err2] = getValue(gocpp::recv(k), name, gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 64));
        if(err2 != nullptr)
        {
            std::string val;
            uint32_t valtype;
            std::string err;
            return {"", typ, err2};
        }
        //Go switch emulation
        {
            auto condition = typ;
            int conditionId = -1;
            if(condition == SZ) { conditionId = 0; }
            if(condition == EXPAND_SZ) { conditionId = 1; }
            switch(conditionId)
            {
                std::string val;
                uint32_t valtype;
                std::string err;
                case 0:
                case 1:
                    break;
                default:
                    return {"", typ, ErrUnexpectedType};
                    break;
            }
        }
        if(len(data) == 0)
        {
            std::string val;
            uint32_t valtype;
            std::string err;
            return {"", typ, nullptr};
        }
        auto u = (gocpp::array<uint16_t, 1 << 29>*)(unsafe::Pointer(& data[0])).make_slice(, len(data) / 2, len(data) / 2);
        return {syscall::UTF16ToString(u), typ, nullptr};
    }

    std::tuple<std::string, std::string> GetMUIStringValue(Key k, std::string name)
    {
        auto [pname, err] = syscall::UTF16PtrFromString(name);
        if(err != nullptr)
        {
            return {"", err};
        }
        auto buf = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), 1024);
        uint32_t buflen = {};
        uint16_t* pdir = {};
        err = regLoadMUIString(syscall::Handle(k), pname, & buf[0], uint32_t(len(buf)), & buflen, 0, pdir);
        if(err == syscall::ERROR_FILE_NOT_FOUND)
        {
            std::string s = {};
            std::tie(s, err) = ExpandString("%SystemRoot%\\system32\\");
            if(err != nullptr)
            {
                return {"", err};
            }
            std::tie(pdir, err) = syscall::UTF16PtrFromString(s);
            if(err != nullptr)
            {
                return {"", err};
            }
            err = regLoadMUIString(syscall::Handle(k), pname, & buf[0], uint32_t(len(buf)), & buflen, 0, pdir);
        }
        for(; err == syscall::ERROR_MORE_DATA; )
        {
            if(buflen <= uint32_t(len(buf)))
            {
                break;
            }
            buf = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), buflen);
            err = regLoadMUIString(syscall::Handle(k), pname, & buf[0], uint32_t(len(buf)), & buflen, 0, pdir);
        }
        if(err != nullptr)
        {
            return {"", err};
        }
        return {syscall::UTF16ToString(buf), nullptr};
    }

    std::tuple<std::string, std::string> ExpandString(std::string value)
    {
        if(value == "")
        {
            return {"", nullptr};
        }
        auto [p, err] = syscall::UTF16PtrFromString(value);
        if(err != nullptr)
        {
            return {"", err};
        }
        auto r = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), 100);
        for(; ; )
        {
            auto [n, err] = expandEnvironmentStrings(p, & r[0], uint32_t(len(r)));
            if(err != nullptr)
            {
                return {"", err};
            }
            if(n <= uint32_t(len(r)))
            {
                return {syscall::UTF16ToString(r.make_slice(0, n)), nullptr};
            }
            r = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), n);
        }
    }

    std::tuple<gocpp::slice<std::string>, uint32_t, std::string> GetStringsValue(Key k, std::string name)
    {
        gocpp::slice<std::string> val;
        uint32_t valtype;
        std::string err;
        auto [data, typ, err2] = getValue(gocpp::recv(k), name, gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 64));
        if(err2 != nullptr)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, err2};
        }
        if(typ != MULTI_SZ)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, ErrUnexpectedType};
        }
        if(len(data) == 0)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, nullptr};
        }
        auto p = (gocpp::array<uint16_t, 1 << 29>*)(unsafe::Pointer(& data[0])).make_slice(, len(data) / 2, len(data) / 2);
        if(len(p) == 0)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, nullptr};
        }
        if(p[len(p) - 1] == 0)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            p = p.make_slice(0, len(p) - 1);
        }
        val = gocpp::make(gocpp::Tag<gocpp::slice<std::string>>(), 0, 5);
        auto from = 0;
        for(auto [i, c] : p)
        {
            gocpp::slice<std::string> val;
            uint32_t valtype;
            std::string err;
            if(c == 0)
            {
                gocpp::slice<std::string> val;
                uint32_t valtype;
                std::string err;
                val = append(val, syscall::UTF16ToString(p.make_slice(from, i)));
                from = i + 1;
            }
        }
        return {val, typ, nullptr};
    }

    std::tuple<uint64_t, uint32_t, std::string> GetIntegerValue(Key k, std::string name)
    {
        uint64_t val;
        uint32_t valtype;
        std::string err;
        auto [data, typ, err2] = getValue(gocpp::recv(k), name, gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 8));
        if(err2 != nullptr)
        {
            uint64_t val;
            uint32_t valtype;
            std::string err;
            return {0, typ, err2};
        }
        //Go switch emulation
        {
            auto condition = typ;
            int conditionId = -1;
            if(condition == DWORD) { conditionId = 0; }
            else if(condition == QWORD) { conditionId = 1; }
            switch(conditionId)
            {
                uint64_t val;
                uint32_t valtype;
                std::string err;
                case 0:
                    if(len(data) != 4)
                    {
                        uint64_t val;
                        uint32_t valtype;
                        std::string err;
                        return {0, typ, errors::New("DWORD value is not 4 bytes long")};
                    }
                    return {uint64_t(*(uint32_t*)(unsafe::Pointer(& data[0]))), DWORD, nullptr};
                    break;
                case 1:
                    if(len(data) != 8)
                    {
                        uint64_t val;
                        uint32_t valtype;
                        std::string err;
                        return {0, typ, errors::New("QWORD value is not 8 bytes long")};
                    }
                    return {*(uint64_t*)(unsafe::Pointer(& data[0])), QWORD, nullptr};
                    break;
                default:
                    return {0, typ, ErrUnexpectedType};
                    break;
            }
        }
    }

    std::tuple<gocpp::slice<unsigned char>, uint32_t, std::string> GetBinaryValue(Key k, std::string name)
    {
        gocpp::slice<unsigned char> val;
        uint32_t valtype;
        std::string err;
        auto [data, typ, err2] = getValue(gocpp::recv(k), name, gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 64));
        if(err2 != nullptr)
        {
            gocpp::slice<unsigned char> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, err2};
        }
        if(typ != BINARY)
        {
            gocpp::slice<unsigned char> val;
            uint32_t valtype;
            std::string err;
            return {nullptr, typ, ErrUnexpectedType};
        }
        return {data, typ, nullptr};
    }

    std::string setValue(Key k, std::string name, uint32_t valtype, gocpp::slice<unsigned char> data)
    {
        auto [p, err] = syscall::UTF16PtrFromString(name);
        if(err != nullptr)
        {
            return err;
        }
        if(len(data) == 0)
        {
            return regSetValueEx(syscall::Handle(k), p, 0, valtype, nullptr, 0);
        }
        return regSetValueEx(syscall::Handle(k), p, 0, valtype, & data[0], uint32_t(len(data)));
    }

    std::string SetDWordValue(Key k, std::string name, uint32_t value)
    {
        return setValue(gocpp::recv(k), name, DWORD, (gocpp::array<unsigned char, 4>*)(unsafe::Pointer(& value)).make_slice(0, ));
    }

    std::string SetQWordValue(Key k, std::string name, uint64_t value)
    {
        return setValue(gocpp::recv(k), name, QWORD, (gocpp::array<unsigned char, 8>*)(unsafe::Pointer(& value)).make_slice(0, ));
    }

    std::string setStringValue(Key k, std::string name, uint32_t valtype, std::string value)
    {
        auto [v, err] = syscall::UTF16FromString(value);
        if(err != nullptr)
        {
            return err;
        }
        auto buf = (gocpp::array<unsigned char, 1 << 29>*)(unsafe::Pointer(& v[0])).make_slice(, len(v) * 2, len(v) * 2);
        return setValue(gocpp::recv(k), name, valtype, buf);
    }

    std::string SetStringValue(Key k, std::string name, std::string value)
    {
        return setStringValue(gocpp::recv(k), name, SZ, value);
    }

    std::string SetExpandStringValue(Key k, std::string name, std::string value)
    {
        return setStringValue(gocpp::recv(k), name, EXPAND_SZ, value);
    }

    std::string SetStringsValue(Key k, std::string name, gocpp::slice<std::string> value)
    {
        auto ss = "";
        for(auto [_, s] : value)
        {
            for(auto i = 0; i < len(s); i++)
            {
                if(s[i] == 0)
                {
                    return errors::New("string cannot have 0 inside");
                }
            }
            ss += s + "\x00";
        }
        auto v = utf16::Encode(gocpp::Tag<gocpp::slice<gocpp::rune>>()(ss + "\x00"));
        auto buf = (gocpp::array<unsigned char, 1 << 29>*)(unsafe::Pointer(& v[0])).make_slice(, len(v) * 2, len(v) * 2);
        return setValue(gocpp::recv(k), name, MULTI_SZ, buf);
    }

    std::string SetBinaryValue(Key k, std::string name, gocpp::slice<unsigned char> value)
    {
        return setValue(gocpp::recv(k), name, BINARY, value);
    }

    std::string DeleteValue(Key k, std::string name)
    {
        return regDeleteValue(syscall::Handle(k), syscall::StringToUTF16Ptr(name));
    }

    std::tuple<gocpp::slice<std::string>, std::string> ReadValueNames(Key k)
    {
        auto [ki, err] = Stat(gocpp::recv(k));
        if(err != nullptr)
        {
            return {nullptr, err};
        }
        auto names = gocpp::make(gocpp::Tag<gocpp::slice<std::string>>(), 0, ki->ValueCount);
        auto buf = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), ki->MaxValueNameLen + 1);
        loopItems:
        for(auto i = uint32_t(0); ; i++)
        {
            auto l = uint32_t(len(buf));
            for(; ; )
            {
                auto err = regEnumValue(syscall::Handle(k), i, & buf[0], & l, nullptr, nullptr, nullptr, nullptr);
                if(err == nullptr)
                {
                    break;
                }
                if(err == syscall::ERROR_MORE_DATA)
                {
                    l = uint32_t(2 * len(buf));
                    buf = gocpp::make(gocpp::Tag<gocpp::slice<uint16_t>>(), l);
                    continue;
                }
                if(err == _ERROR_NO_MORE_ITEMS)
                {
                    goto loopItems_break;
                }
                return {names, err};
            }
            names = append(names, syscall::UTF16ToString(buf.make_slice(0, l)));
            if(false) {
            loopItems_continue:
                continue;
            loopItems_break:
                break;
            }
        }
        return {names, nullptr};
    }

}

