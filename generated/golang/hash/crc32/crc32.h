// generated by GoCpp from file '$(ImportDir)/hash/crc32/crc32.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/crc32/crc32.fwd.h"
#include "gocpp/support.h"

#include "golang/hash/crc32/crc32_generic.h"
#include "golang/hash/hash.h"
#include "golang/io/io.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"

namespace golang::crc32
{
    extern std::string magic;
    extern Table* IEEETable;
    struct digest
    {
        uint32_t crc;
        golang::crc32::Table* tab;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct digest& value);
    void castagnoliInit();
    void ieeeInit();
    crc32::Table* MakeTable(uint32_t poly);
    hash::Hash32 New(golang::crc32::Table* tab);
    hash::Hash32 NewIEEE();
    gocpp::slice<unsigned char> appendUint32(gocpp::slice<unsigned char> b, uint32_t x);
    uint32_t readUint32(gocpp::slice<unsigned char> b);
    uint32_t update(uint32_t crc, golang::crc32::Table* tab, gocpp::slice<unsigned char> p, bool checkInitIEEE);
    uint32_t Update(uint32_t crc, golang::crc32::Table* tab, gocpp::slice<unsigned char> p);
    uint32_t Checksum(gocpp::slice<unsigned char> data, golang::crc32::Table* tab);
    uint32_t ChecksumIEEE(gocpp::slice<unsigned char> data);
    uint32_t tableSum(golang::crc32::Table* t);

    namespace rec
    {
        int Size(struct digest* d);
        int BlockSize(struct digest* d);
        void Reset(struct digest* d);
        std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> MarshalBinary(struct digest* d);
        struct gocpp::error UnmarshalBinary(struct digest* d, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> Write(struct digest* d, gocpp::slice<unsigned char> p);
        uint32_t Sum32(struct digest* d);
        gocpp::slice<unsigned char> Sum(struct digest* d, gocpp::slice<unsigned char> in);
    }
}

