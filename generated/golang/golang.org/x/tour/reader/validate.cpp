// generated by GoCpp from file '$(ImportDir)/golang.org/x/tour/reader/validate.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/golang.org/x/tour/reader/validate.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"
#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/io.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::reader
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fmt::rec;
        using namespace io::rec;
        using namespace os::rec;
        using namespace poll::rec;
        using namespace sync::rec;
        using namespace syscall::rec;
        using namespace windows::rec;
    }

    void Validate(io::Reader r)
    {
        auto b = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 1024, 2048);
        auto [i, o] = std::tuple{0, 0};
        for(; i < (1 << 20) && o < (1 << 20); i++)
        {
            auto [n, err] = rec::Read(gocpp::recv(r), b);
            for(auto [i, v] : b.make_slice(0, n))
            {
                if(v != 'A')
                {
                    fmt::Fprintf(os::Stderr, "got byte %x at offset %v, want 'A'\n", v, o + i);
                    return;
                }
            }
            o += n;
            if(err != nullptr)
            {
                fmt::Fprintf(os::Stderr, "read error: %v\n", err);
                return;
            }
        }
        if(o == 0)
        {
            fmt::Fprintf(os::Stderr, "read zero bytes after %d Read calls\n", i);
            return;
        }
        mocklib::Println("OK!");
    }

}

