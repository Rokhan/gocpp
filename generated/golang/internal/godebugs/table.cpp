// generated by GoCpp from file '$(ImportDir)/internal/godebugs/table.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/godebugs/table.h"
#include "gocpp/support.h"

namespace golang::godebugs
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Info::operator T()
    {
        T result;
        result.Name = this->Name;
        result.Package = this->Package;
        result.Changed = this->Changed;
        result.Old = this->Old;
        result.Opaque = this->Opaque;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Info::operator==(const T& ref) const
    {
        if (Name != ref.Name) return false;
        if (Package != ref.Package) return false;
        if (Changed != ref.Changed) return false;
        if (Old != ref.Old) return false;
        if (Opaque != ref.Opaque) return false;
        return true;
    }

    std::ostream& Info::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Package;
        os << " " << Changed;
        os << " " << Old;
        os << " " << Opaque;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Info& value)
    {
        return value.PrintTo(os);
    }

    gocpp::slice<Info> All = gocpp::slice<Info> {gocpp::Init<>([](auto& x) {
        x.Name = "execerrdot"s;
        x.Package = "os/exec"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "gocachehash"s;
        x.Package = "cmd/go"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "gocachetest"s;
        x.Package = "cmd/go"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "gocacheverify"s;
        x.Package = "cmd/go"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "gotypesalias"s;
        x.Package = "go/types"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "http2client"s;
        x.Package = "net/http"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "http2debug"s;
        x.Package = "net/http"s;
        x.Opaque = true;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "http2server"s;
        x.Package = "net/http"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "httplaxcontentlength"s;
        x.Package = "net/http"s;
        x.Changed = 22;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "httpmuxgo121"s;
        x.Package = "net/http"s;
        x.Changed = 22;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "installgoroot"s;
        x.Package = "go/build"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "jstmpllitinterp"s;
        x.Package = "html/template"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "multipartmaxheaders"s;
        x.Package = "mime/multipart"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "multipartmaxparts"s;
        x.Package = "mime/multipart"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "multipathtcp"s;
        x.Package = "net"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "netdns"s;
        x.Package = "net"s;
        x.Opaque = true;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "panicnil"s;
        x.Package = "runtime"s;
        x.Changed = 21;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "randautoseed"s;
        x.Package = "math/rand"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "tarinsecurepath"s;
        x.Package = "archive/tar"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "tls10server"s;
        x.Package = "crypto/tls"s;
        x.Changed = 22;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "tlsmaxrsasize"s;
        x.Package = "crypto/tls"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "tlsrsakex"s;
        x.Package = "crypto/tls"s;
        x.Changed = 22;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "tlsunsafeekm"s;
        x.Package = "crypto/tls"s;
        x.Changed = 22;
        x.Old = "1"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "x509sha1"s;
        x.Package = "crypto/x509"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "x509usefallbackroots"s;
        x.Package = "crypto/x509"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "x509usepolicies"s;
        x.Package = "crypto/x509"s;
    }), gocpp::Init<>([](auto& x) {
        x.Name = "zipinsecurepath"s;
        x.Package = "archive/zip"s;
    })};
    struct Info* Lookup(std::string name)
    {
        auto lo = 0;
        auto hi = len(All);
        for(; lo < hi; )
        {
            auto m = int((unsigned int)(lo + hi) >> 1);
            auto mid = All[m].Name;
            if(name == mid)
            {
                return & All[m];
            }
            if(name < mid)
            {
                hi = m;
            }
            else
            {
                lo = m + 1;
            }
        }
        return nullptr;
    }

}

