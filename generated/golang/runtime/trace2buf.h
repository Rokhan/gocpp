// generated by GoCpp from file '$(ImportDir)/runtime/trace2buf.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/trace2buf.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mem.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/runtime/trace2event.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    struct traceWriter
    {

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceWriter& value);
    traceWriter writer(struct traceLocker tl);
    traceWriter unsafeTraceWriter(uintptr_t gen, traceBuf* buf);
    void end(struct traceWriter w);
    std::tuple<traceWriter, bool> ensure(struct traceWriter w, int maxSize);
    traceWriter flush(struct traceWriter w);
    traceWriter refill(struct traceWriter w);
    struct traceBufQueue
    {
        traceBuf* head;
        traceBuf* tail;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBufQueue& value);
    void push(struct traceBufQueue* q, traceBuf* buf);
    traceBuf* pop(struct traceBufQueue* q);
    bool empty(struct traceBufQueue* q);
    struct traceBufHeader
    {
        traceBuf* link;
        traceTime lastTime;
        int pos;
        int lenPos;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBufHeader& value);
    struct traceBuf
    {
        sys::NotInHeap _;
        gocpp::array<unsigned char, (64 << 10) - unsafe::Sizeof(traceBufHeader {})> arr;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct traceBuf& value);
    void byte(struct traceBuf* buf, unsigned char v);
    void varint(struct traceBuf* buf, uint64_t v);
    int varintReserve(struct traceBuf* buf);
    void stringData(struct traceBuf* buf, std::string s);
    bool available(struct traceBuf* buf, int size);
    void varintAt(struct traceBuf* buf, int pos, uint64_t v);
    void traceBufFlush(traceBuf* buf, uintptr_t gen);
}

