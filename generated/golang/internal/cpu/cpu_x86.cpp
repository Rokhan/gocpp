// generated by GoCpp from file '$(ImportDir)/internal/cpu/cpu_x86.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/cpu/cpu_x86.h"
#include "gocpp/support.h"

#include "golang/internal/cpu/cpu.h"

namespace golang::cpu
{
    int CacheLinePadSize = 64;
    std::tuple<uint32_t, uint32_t, uint32_t, uint32_t> cpuid(uint32_t eaxArg, uint32_t ecxArg)
    /* convertBlockStmt, nil block */;

    std::tuple<uint32_t, uint32_t> xgetbv()
    /* convertBlockStmt, nil block */;

    int32_t getGOAMD64level()
    /* convertBlockStmt, nil block */;

    int cpuid_SSE2 = 1 << 26;
    int cpuid_SSE3 = 1 << 0;
    int cpuid_PCLMULQDQ = 1 << 1;
    int cpuid_SSSE3 = 1 << 9;
    int cpuid_FMA = 1 << 12;
    int cpuid_SSE41 = 1 << 19;
    int cpuid_SSE42 = 1 << 20;
    int cpuid_POPCNT = 1 << 23;
    int cpuid_AES = 1 << 25;
    int cpuid_OSXSAVE = 1 << 27;
    int cpuid_AVX = 1 << 28;
    int cpuid_BMI1 = 1 << 3;
    int cpuid_AVX2 = 1 << 5;
    int cpuid_BMI2 = 1 << 8;
    int cpuid_ERMS = 1 << 9;
    int cpuid_AVX512F = 1 << 16;
    int cpuid_ADX = 1 << 19;
    int cpuid_SHA = 1 << 29;
    int cpuid_AVX512BW = 1 << 30;
    int cpuid_AVX512VL = 1 << 31;
    int cpuid_RDTSCP = 1 << 27;
    uint32_t maxExtendedFunctionInformation;
    void doinit()
    {
        options = gocpp::slice<option> {gocpp::Init<>([](& x) { x.Name = "adx"; x.Feature = & X86.HasADX; }), gocpp::Init<>([](& x) { x.Name = "aes"; x.Feature = & X86.HasAES; }), gocpp::Init<>([](& x) { x.Name = "erms"; x.Feature = & X86.HasERMS; }), gocpp::Init<>([](& x) { x.Name = "pclmulqdq"; x.Feature = & X86.HasPCLMULQDQ; }), gocpp::Init<>([](& x) { x.Name = "rdtscp"; x.Feature = & X86.HasRDTSCP; }), gocpp::Init<>([](& x) { x.Name = "sha"; x.Feature = & X86.HasSHA; })};
        auto level = getGOAMD64level();
        if(level < 2)
        {
            options = append(options, gocpp::Init<option>([](option& x) { x.Name = "popcnt"; x.Feature = & X86.HasPOPCNT; }), gocpp::Init<option>([](option& x) { x.Name = "sse3"; x.Feature = & X86.HasSSE3; }), gocpp::Init<option>([](option& x) { x.Name = "sse41"; x.Feature = & X86.HasSSE41; }), gocpp::Init<option>([](option& x) { x.Name = "sse42"; x.Feature = & X86.HasSSE42; }), gocpp::Init<option>([](option& x) { x.Name = "ssse3"; x.Feature = & X86.HasSSSE3; }));
        }
        if(level < 3)
        {
            options = append(options, gocpp::Init<option>([](option& x) { x.Name = "avx"; x.Feature = & X86.HasAVX; }), gocpp::Init<option>([](option& x) { x.Name = "avx2"; x.Feature = & X86.HasAVX2; }), gocpp::Init<option>([](option& x) { x.Name = "bmi1"; x.Feature = & X86.HasBMI1; }), gocpp::Init<option>([](option& x) { x.Name = "bmi2"; x.Feature = & X86.HasBMI2; }), gocpp::Init<option>([](option& x) { x.Name = "fma"; x.Feature = & X86.HasFMA; }));
        }
        if(level < 4)
        {
            options = append(options, gocpp::Init<option>([](option& x) { x.Name = "avx512f"; x.Feature = & X86.HasAVX512F; }), gocpp::Init<option>([](option& x) { x.Name = "avx512bw"; x.Feature = & X86.HasAVX512BW; }), gocpp::Init<option>([](option& x) { x.Name = "avx512vl"; x.Feature = & X86.HasAVX512VL; }));
        }
        uint32_t maxID;
        uint32_t _;
        uint32_t _;
        uint32_t _;
        std::tie(maxID, _, _, _) = cpuid(0, 0);
        if(maxID < 1)
        {
            return;
        }
        std::tie(maxExtendedFunctionInformation, _, _, _) = cpuid(0x80000000, 0);
        uint32_t ecx1;
        std::tie(_, _, ecx1, _) = cpuid(1, 0);
        X86.HasSSE3 = isSet(ecx1, cpuid_SSE3);
        X86.HasPCLMULQDQ = isSet(ecx1, cpuid_PCLMULQDQ);
        X86.HasSSSE3 = isSet(ecx1, cpuid_SSSE3);
        X86.HasSSE41 = isSet(ecx1, cpuid_SSE41);
        X86.HasSSE42 = isSet(ecx1, cpuid_SSE42);
        X86.HasPOPCNT = isSet(ecx1, cpuid_POPCNT);
        X86.HasAES = isSet(ecx1, cpuid_AES);
        X86.HasOSXSAVE = isSet(ecx1, cpuid_OSXSAVE);
        X86.HasFMA = isSet(ecx1, cpuid_FMA) && X86.HasOSXSAVE;
        auto osSupportsAVX = false;
        auto osSupportsAVX512 = false;
        if(X86.HasOSXSAVE)
        {
            auto [eax, _] = xgetbv();
            osSupportsAVX = isSet(eax, 1 << 1) && isSet(eax, 1 << 2);
            osSupportsAVX512 = osSupportsAVX && isSet(eax, 1 << 5) && isSet(eax, 1 << 6) && isSet(eax, 1 << 7);
        }
        X86.HasAVX = isSet(ecx1, cpuid_AVX) && osSupportsAVX;
        if(maxID < 7)
        {
            return;
        }
        uint32_t ebx7;
        std::tie(_, ebx7, _, _) = cpuid(7, 0);
        X86.HasBMI1 = isSet(ebx7, cpuid_BMI1);
        X86.HasAVX2 = isSet(ebx7, cpuid_AVX2) && osSupportsAVX;
        X86.HasBMI2 = isSet(ebx7, cpuid_BMI2);
        X86.HasERMS = isSet(ebx7, cpuid_ERMS);
        X86.HasADX = isSet(ebx7, cpuid_ADX);
        X86.HasSHA = isSet(ebx7, cpuid_SHA);
        X86.HasAVX512F = isSet(ebx7, cpuid_AVX512F) && osSupportsAVX512;
        if(X86.HasAVX512F)
        {
            X86.HasAVX512BW = isSet(ebx7, cpuid_AVX512BW);
            X86.HasAVX512VL = isSet(ebx7, cpuid_AVX512VL);
        }
        uint32_t maxExtendedInformation = {};
        std::tie(maxExtendedInformation, _, _, _) = cpuid(0x80000000, 0);
        if(maxExtendedInformation < 0x80000001)
        {
            return;
        }
        uint32_t edxExt1;
        std::tie(_, _, _, edxExt1) = cpuid(0x80000001, 0);
        X86.HasRDTSCP = isSet(edxExt1, cpuid_RDTSCP);
    }

    bool isSet(uint32_t hwc, uint32_t value)
    {
        return hwc & value != 0;
    }

    std::string Name()
    {
        if(maxExtendedFunctionInformation < 0x80000004)
        {
            return "";
        }
        auto data = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 0, 3 * 4 * 4);
        uint32_t eax = {};
        uint32_t ebx = {};
        uint32_t ecx = {};
        uint32_t edx = {};
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000002, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000003, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000004, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        for(; len(data) > 0 && data[0] == ' '; )
        {
            data = data.make_slice(1);
        }
        for(auto [i, c] : data)
        {
            if(c == '\x00')
            {
                data = data.make_slice(0, i);
                break;
            }
        }
        return string(data);
    }

    gocpp::slice<unsigned char> appendBytes(gocpp::slice<unsigned char> b, gocpp::slice<uint32_t> args)
    {
        for(auto [_, arg] : args)
        {
            b = append(b, byte((arg >> 0)), byte((arg >> 8)), byte((arg >> 16)), byte((arg >> 24)));
        }
        return b;
    }

}

