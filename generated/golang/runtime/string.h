// generated by GoCpp from file '$(ImportDir)/runtime/string.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/string.fwd.h"
#include "gocpp/support.h"


namespace golang::runtime
{
    std::string concatstrings(tmpBuf* buf, gocpp::slice<std::string> a);
    std::string concatstring2(tmpBuf* buf, std::string a0, std::string a1);
    std::string concatstring3(tmpBuf* buf, std::string a0, std::string a1, std::string a2);
    std::string concatstring4(tmpBuf* buf, std::string a0, std::string a1, std::string a2, std::string a3);
    std::string concatstring5(tmpBuf* buf, std::string a0, std::string a1, std::string a2, std::string a3, std::string a4);
    std::string slicebytetostring(tmpBuf* buf, unsigned char* ptr, int n);
    bool stringDataOnStack(std::string s);
    std::tuple<std::string, gocpp::slice<unsigned char>> rawstringtmp(tmpBuf* buf, int l);
    std::string slicebytetostringtmp(unsigned char* ptr, int n);
    gocpp::slice<unsigned char> stringtoslicebyte(tmpBuf* buf, std::string s);
    gocpp::slice<gocpp::rune> stringtoslicerune(gocpp::array<gocpp::rune, tmpStringBufSize>* buf, std::string s);
    std::string slicerunetostring(tmpBuf* buf, gocpp::slice<gocpp::rune> a);
    struct stringStruct
    {
        unsafe::Pointer str;
        int len;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct stringStruct& value);
    struct stringStructDWARF
    {
        unsigned char* str;
        int len;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct stringStructDWARF& value);
    stringStruct* stringStructOf(std::string* sp);
    std::string intstring(gocpp::array<unsigned char, 4>* buf, int64_t v);
    std::tuple<std::string, gocpp::slice<unsigned char>> rawstring(int size);
    gocpp::slice<unsigned char> rawbyteslice(int size);
    gocpp::slice<gocpp::rune> rawruneslice(int size);
    gocpp::slice<unsigned char> gobytes(unsigned char* p, int n);
    std::string gostring(unsigned char* p);
    std::string internal_syscall_gostring(unsigned char* p);
    std::string gostringn(unsigned char* p, int l);
    bool hasPrefix(std::string s, std::string prefix);
    bool hasSuffix(std::string s, std::string suffix);
    std::tuple<int64_t, bool> atoi64(std::string s);
    std::tuple<int, bool> atoi(std::string s);
    std::tuple<int32_t, bool> atoi32(std::string s);
    std::tuple<int64_t, bool> parseByteCount(std::string s);
    int findnull(unsigned char* s);
    int findnullw(uint16_t* s);
    std::string gostringnocopy(unsigned char* str);
    std::string gostringw(uint16_t* strw);
}

