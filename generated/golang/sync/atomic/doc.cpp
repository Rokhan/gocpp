// generated by GoCpp from file '$(ImportDir)/sync/atomic/doc.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/atomic/doc.h"
#include "gocpp/support.h"

#include "golang/unsafe/unsafe.h"

namespace golang::atomic
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace unsafe::rec;
    }

    int32_t SwapInt32(int32_t* addr, int32_t go_new)
    /* convertBlockStmt, nil block */;

    int64_t SwapInt64(int64_t* addr, int64_t go_new)
    /* convertBlockStmt, nil block */;

    uint32_t SwapUint32(uint32_t* addr, uint32_t go_new)
    /* convertBlockStmt, nil block */;

    uint64_t SwapUint64(uint64_t* addr, uint64_t go_new)
    /* convertBlockStmt, nil block */;

    uintptr_t SwapUintptr(uintptr_t* addr, uintptr_t go_new)
    /* convertBlockStmt, nil block */;

    unsafe::Pointer SwapPointer(unsafe::Pointer* addr, unsafe::Pointer go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapInt32(int32_t* addr, int32_t old, int32_t go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapInt64(int64_t* addr, int64_t old, int64_t go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapUint32(uint32_t* addr, uint32_t old, uint32_t go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapUint64(uint64_t* addr, uint64_t old, uint64_t go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapUintptr(uintptr_t* addr, uintptr_t old, uintptr_t go_new)
    /* convertBlockStmt, nil block */;

    bool CompareAndSwapPointer(unsafe::Pointer* addr, unsafe::Pointer old, unsafe::Pointer go_new)
    /* convertBlockStmt, nil block */;

    int32_t AddInt32(int32_t* addr, int32_t delta)
    /* convertBlockStmt, nil block */;

    uint32_t AddUint32(uint32_t* addr, uint32_t delta)
    /* convertBlockStmt, nil block */;

    int64_t AddInt64(int64_t* addr, int64_t delta)
    /* convertBlockStmt, nil block */;

    uint64_t AddUint64(uint64_t* addr, uint64_t delta)
    /* convertBlockStmt, nil block */;

    uintptr_t AddUintptr(uintptr_t* addr, uintptr_t delta)
    /* convertBlockStmt, nil block */;

    int32_t LoadInt32(int32_t* addr)
    /* convertBlockStmt, nil block */;

    int64_t LoadInt64(int64_t* addr)
    /* convertBlockStmt, nil block */;

    uint32_t LoadUint32(uint32_t* addr)
    /* convertBlockStmt, nil block */;

    uint64_t LoadUint64(uint64_t* addr)
    /* convertBlockStmt, nil block */;

    uintptr_t LoadUintptr(uintptr_t* addr)
    /* convertBlockStmt, nil block */;

    unsafe::Pointer LoadPointer(unsafe::Pointer* addr)
    /* convertBlockStmt, nil block */;

    void StoreInt32(int32_t* addr, int32_t val)
    /* convertBlockStmt, nil block */;

    void StoreInt64(int64_t* addr, int64_t val)
    /* convertBlockStmt, nil block */;

    void StoreUint32(uint32_t* addr, uint32_t val)
    /* convertBlockStmt, nil block */;

    void StoreUint64(uint64_t* addr, uint64_t val)
    /* convertBlockStmt, nil block */;

    void StoreUintptr(uintptr_t* addr, uintptr_t val)
    /* convertBlockStmt, nil block */;

    void StorePointer(unsafe::Pointer* addr, unsafe::Pointer val)
    /* convertBlockStmt, nil block */;

}

