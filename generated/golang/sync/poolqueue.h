// generated by GoCpp from file '$(ImportDir)/sync/poolqueue.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/poolqueue.fwd.h"
#include "gocpp/support.h"

// #include "golang/sync/atomic/doc.h"  [Ignored, known errors]
#include "golang/sync/atomic/type.h"
#include "golang/unsafe/unsafe.h"

namespace golang::sync
{
    struct poolDequeue
    {
        atomic::Uint64 headTail;
        gocpp::slice<eface> vals;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const poolDequeue& value);
    struct eface
    {
        unsafe::Pointer typ;
        unsafe::Pointer val;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const eface& value);
    extern int dequeueBits;
    extern int dequeueLimit;
    using dequeueNil = gocpp_id_0*;
    std::tuple<uint32_t, uint32_t> unpack(poolDequeue* d, uint64_t ptrs);
    uint64_t pack(poolDequeue* d, uint32_t head, uint32_t tail);
    bool pushHead(poolDequeue* d, any val);
    std::tuple<any, bool> popHead(poolDequeue* d);
    std::tuple<any, bool> popTail(poolDequeue* d);
    struct poolChain
    {
        poolChainElt* head;
        poolChainElt* tail;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const poolChain& value);
    struct poolChainElt
    {
        poolChainElt* next;
        poolChainElt* prev;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const poolChainElt& value);
    void storePoolChainElt(poolChainElt** pp, poolChainElt* v);
    poolChainElt* loadPoolChainElt(poolChainElt** pp);
    void pushHead(poolChain* c, any val);
    std::tuple<any, bool> popHead(poolChain* c);
    std::tuple<any, bool> popTail(poolChain* c);
}

