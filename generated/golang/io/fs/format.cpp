// generated by GoCpp from file '$(ImportDir)/io/fs/format.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/io/fs/format.h"
#include "gocpp/support.h"

#include "golang/io/fs/fs.h"
#include "golang/time/format.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::fs
{
    namespace rec
    {
        using namespace mocklib::rec;
        using time::rec::Format;
    }

    // FormatFileInfo returns a formatted version of info for human readability.
    // Implementations of [FileInfo] can call this from a String method.
    // The output for a file named "hello.go", 100 bytes, mode 0o644, created
    // January 1, 1970 at noon is
    //
    //	-rw-r--r-- 100 1970-01-01 12:00:00 hello.go
    std::string FormatFileInfo(struct FileInfo info)
    {
        auto name = rec::Name(gocpp::recv(info));
        auto b = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 0, 40 + len(name));
        b = append(b, rec::String(gocpp::recv(rec::Mode(gocpp::recv(info)))));
        b = append(b, ' ');
        auto size = rec::Size(gocpp::recv(info));
        uint64_t usize = {};
        if(size >= 0)
        {
            usize = uint64_t(size);
        }
        else
        {
            b = append(b, '-');
            usize = uint64_t(- size);
        }
        gocpp::array<unsigned char, 20> buf = {};
        auto i = len(buf) - 1;
        for(; usize >= 10; )
        {
            auto q = usize / 10;
            buf[i] = (unsigned char)('0' + usize - q * 10);
            i--;
            usize = q;
        }
        buf[i] = (unsigned char)('0' + usize);
        b = append(b, buf.make_slice(i));
        b = append(b, ' ');
        b = append(b, rec::Format(gocpp::recv(rec::ModTime(gocpp::recv(info))), time::DateTime));
        b = append(b, ' ');
        b = append(b, name);
        if(rec::IsDir(gocpp::recv(info)))
        {
            b = append(b, '/');
        }
        return std::string(b);
    }

    // FormatDirEntry returns a formatted version of dir for human readability.
    // Implementations of [DirEntry] can call this from a String method.
    // The outputs for a directory named subdir and a file named hello.go are:
    //
    //	d subdir/
    //	- hello.go
    std::string FormatDirEntry(struct DirEntry dir)
    {
        auto name = rec::Name(gocpp::recv(dir));
        auto b = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 0, 5 + len(name));
        auto mode = rec::String(gocpp::recv(rec::Type(gocpp::recv(dir))));
        mode = mode.make_slice(0, len(mode) - 9);
        b = append(b, mode);
        b = append(b, ' ');
        b = append(b, name);
        if(rec::IsDir(gocpp::recv(dir)))
        {
            b = append(b, '/');
        }
        return std::string(b);
    }

}

