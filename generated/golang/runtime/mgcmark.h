// generated by GoCpp from file '$(ImportDir)/runtime/mgcmark.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mgcmark.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/goarch/goarch.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.h"
#include "golang/internal/goexperiment/exp_exectracer2_on.h"
#include "golang/runtime/internal/atomic/atomic_amd64.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/intrinsics.h"
// #include "golang/runtime/lock_sema.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/malloc.h"
#include "golang/runtime/mbitmap.h"
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
#include "golang/runtime/mcheckmark.h"
#include "golang/runtime/mgc.h"
// #include "golang/runtime/mgclimit.h"  [Ignored, known errors]
// #include "golang/runtime/mgcpacer.h"  [Ignored, known errors]
#include "golang/runtime/mgcstack.h"
#include "golang/runtime/mgcwork.h"
#include "golang/runtime/mheap.h"
#include "golang/runtime/mwbbuf.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/preempt.h"  [Ignored, known errors]
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
#include "golang/runtime/stack.h"
#include "golang/runtime/stkframe.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
// #include "golang/runtime/traceback.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    void gcMarkRootPrepare();
    void gcMarkRootCheck();
    extern gocpp::array_base<uint8_t> oneptrmask;
    int64_t markroot(gcWork* gcw, uint32_t i, bool flushBgCredit);
    int64_t markrootBlock(uintptr_t b0, uintptr_t n0, uint8_t* ptrmask0, gcWork* gcw, int shard);
    void markrootFreeGStacks();
    void markrootSpans(gcWork* gcw, int shard);
    void gcAssistAlloc(g* gp);
    void gcAssistAlloc1(g* gp, int64_t scanWork);
    void gcWakeAllAssists();
    bool gcParkAssist();
    void gcFlushBgCredit(int64_t scanWork);
    int64_t scanstack(g* gp, gcWork* gcw);
    void scanframeworker(stkframe* frame, stackScanState* state, gcWork* gcw);
    void gcDrainMarkWorkerIdle(gcWork* gcw);
    void gcDrainMarkWorkerDedicated(gcWork* gcw, bool untilPreempt);
    void gcDrainMarkWorkerFractional(gcWork* gcw);
    void gcDrain(gcWork* gcw, gcDrainFlags flags);
    int64_t gcDrainN(gcWork* gcw, int64_t scanWork);
    void scanblock(uintptr_t b0, uintptr_t n0, uint8_t* ptrmask, gcWork* gcw, stackScanState* stk);
    void scanobject(uintptr_t b, gcWork* gcw);
    void scanConservative(uintptr_t b, uintptr_t n, uint8_t* ptrmask, gcWork* gcw, stackScanState* state);
    void shade(uintptr_t b);
    void greyobject(uintptr_t obj, uintptr_t base, uintptr_t off, mspan* span, gcWork* gcw, uintptr_t objIndex);
    void gcDumpObject(std::string label, uintptr_t obj, uintptr_t off);
    void gcmarknewobject(mspan* span, uintptr_t obj);
    void gcMarkTinyAllocs();
}

