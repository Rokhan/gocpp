// generated by GoCpp from file '$(ImportDir)/reflect/type.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::reflect
{
    using Kind = unsigned int;
    using ChanDir = int;
    const int kindDirectIface = 1 << 5;
    const int kindGCProg = 1 << 6;
    const int kindMask = (1 << 5) - 1;
    struct StructField;
    using StructTag = std::string;
    struct fieldScan;
    struct gocpp_id_6;
    struct gocpp_id_19;
    struct structTypeUncommon;
    struct gocpp_id_20;
    struct gocpp_id_23;
    struct gocpp_id_24;
    const long maxPtrmaskBytes = 2048;
    struct bitVector;
    const Kind Invalid = 0;
    const Kind Bool = 1;
    const Kind Int = 2;
    const Kind Int8 = 3;
    const Kind Int16 = 4;
    const Kind Int32 = 5;
    const Kind Int64 = 6;
    const Kind Uint = 7;
    const Kind Uint8 = 8;
    const Kind Uint16 = 9;
    const Kind Uint32 = 10;
    const Kind Uint64 = 11;
    const Kind Uintptr = 12;
    const Kind Float32 = 13;
    const Kind Float64 = 14;
    const Kind Complex64 = 15;
    const Kind Complex128 = 16;
    const Kind Array = 17;
    const Kind Chan = 18;
    const Kind Func = 19;
    const Kind Interface = 20;
    const Kind Map = 21;
    const Kind Pointer = 22;
    const Kind Slice = 23;
    const Kind String = 24;
    const Kind Struct = 25;
    const Kind UnsafePointer = 26;
    const ChanDir RecvDir = 1 << 0;
    const ChanDir SendDir = 1 << 1;
}
#include "golang/internal/abi/map.fwd.h"
#include "golang/internal/abi/type.fwd.h"
#include "golang/reflect/abi.fwd.h"
// #include "golang/reflect/value.fwd.h" [Ignored, known errors]
#include "golang/sync/pool.fwd.h"

namespace golang::reflect
{
    struct Type;
    using uncommonType = abi::UncommonType;
    struct common;
    struct rtype;
    using aNameOff = abi::NameOff;
    using aTypeOff = abi::TypeOff;
    using aTextOff = abi::TextOff;
    using arrayType = abi::ArrayType;
    using chanType = abi::ChanType;
    using funcType = abi::FuncType;
    struct interfaceType;
    struct mapType;
    struct ptrType;
    struct sliceType;
    using structField = abi::StructField;
    struct structType;
    struct Method;
    struct cacheKey;
    const uintptr_t bucketSize = abi::MapBucketCount;
    const uintptr_t maxKeySize = abi::MapMaxKeyBytes;
    const uintptr_t maxValSize = abi::MapMaxElemBytes;
    struct layoutKey;
    struct layoutType;
    const Kind Ptr = Pointer;
    const ChanDir BothDir = RecvDir | SendDir;
}
