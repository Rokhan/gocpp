// generated by GoCpp from file '$(ImportDir)/fmt/errors.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/fmt/errors.fwd.h"
#include "gocpp/support.h"


namespace golang::fmt
{
    struct gocpp::error Errorf(std::string format, gocpp::slice<go_any> a);
    
template<typename... Args>
    struct gocpp::error Errorf(std::string format, Args... a)
    {
        return Errorf(format, gocpp::ToSlice<go_any>(a...));
    }

    struct wrapError
    {
        std::string msg;
        gocpp::error err;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct wrapError& value);
    struct wrapErrors
    {
        std::string msg;
        gocpp::slice<gocpp::error> errs;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct wrapErrors& value);

    namespace rec
    {
        std::string Error(struct wrapError* e);
        struct gocpp::error Unwrap(struct wrapError* e);
        std::string Error(struct wrapErrors* e);
        gocpp::slice<gocpp::error> Unwrap(struct wrapErrors* e);
    }
}

