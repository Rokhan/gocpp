// generated by GoCpp from file '$(ImportDir)/runtime/coro.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/coro.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    
    std::ostream& coro::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << gp;
        os << " " << f;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct coro& value)
    {
        return value.PrintTo(os);
    }

    coro* newcoro(std::function<void (coro*)> f)
    {
        auto c = go_new(coro);
        c->f = f;
        auto pc = getcallerpc();
        auto gp = getg();
        systemstack([=]() mutable -> void
        {
            auto start = corostart;
            auto startfv = *(funcval**)(unsafe::Pointer(& start));
            gp = newproc1(startfv, gp, pc);
        }
);
        gp->coroarg = c;
        gp->waitreason = waitReasonCoroutine;
        casgstatus(gp, _Grunnable, _Gwaiting);
        set(gocpp::recv(c->gp), gp);
        return c;
    }

    void corostart()
    {
        auto gp = getg();
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        f(gocpp::recv(c), c);
        coroexit(c);
    }

    void coroexit(coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        gp->coroexit = true;
        mcall(coroswitch_m);
    }

    void coroswitch(coro* c)
    {
        auto gp = getg();
        gp->coroarg = c;
        mcall(coroswitch_m);
    }

    void coroswitch_m(g* gp)
    {
        auto c = gp->coroarg;
        gp->coroarg = nullptr;
        auto exit = gp->coroexit;
        gp->coroexit = false;
        auto mp = gp->m;
        if(exit)
        {
            gdestroy(gp);
            gp = nullptr;
        }
        else
        {
            gp->waitreason = waitReasonCoroutine;
            if(! CompareAndSwap(gocpp::recv(gp->atomicstatus), _Grunning, _Gwaiting))
            {
                casgstatus(gp, _Grunning, _Gwaiting);
            }
            setMNoWB(& gp->m, nullptr);
        }
        g* gnext = {};
        for(; ; )
        {
            auto next = c->gp;
            if(ptr(gocpp::recv(next)) == nullptr)
            {
                go_throw("coroswitch on exited coro");
            }
            guintptr self = {};
            set(gocpp::recv(self), gp);
            if(cas(gocpp::recv(c->gp), next, self))
            {
                gnext = ptr(gocpp::recv(next));
                break;
            }
        }
        setGNoWB(& mp->curg, gnext);
        setMNoWB(& gnext->m, mp);
        if(! CompareAndSwap(gocpp::recv(gnext->atomicstatus), _Gwaiting, _Grunning))
        {
            casgstatus(gnext, _Gwaiting, _Grunnable);
            casgstatus(gnext, _Grunnable, _Grunning);
        }
        gogo(& gnext->sched);
    }

}

