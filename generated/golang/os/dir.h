// generated by GoCpp from file '$(ImportDir)/os/dir.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/dir.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/poll/fd_mutex.h"
#include "golang/internal/poll/fd_poll_runtime.h"
#include "golang/internal/poll/fd_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/os/dir_windows.h"
#include "golang/os/file_windows.h"
#include "golang/os/types.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    extern bool testingForceReadDirLstat;
    std::tuple<gocpp::slice<os::DirEntry>, struct gocpp::error> ReadDir(std::string name);

    namespace rec
    {
        std::tuple<gocpp::slice<os::FileInfo>, struct gocpp::error> Readdir(struct File* f, int n);
        std::tuple<gocpp::slice<std::string>, struct gocpp::error> Readdirnames(struct File* f, int n);
        std::tuple<gocpp::slice<os::DirEntry>, struct gocpp::error> ReadDir(struct File* f, int n);
    }
}

