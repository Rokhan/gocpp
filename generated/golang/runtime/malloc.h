// generated by GoCpp from file '$(ImportDir)/runtime/malloc.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/malloc.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/internal/cpu/cpu.h"  [Ignored, known errors]
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
// #include "golang/runtime/mbitmap_allocheaders.h"  [Ignored, known errors]
// #include "golang/runtime/mcache.h"  [Ignored, known errors]
#include "golang/runtime/mcentral.h"
#include "golang/runtime/mcheckmark.h"
#include "golang/runtime/mfixalloc.h"
// #include "golang/runtime/mgcscavenge.h"  [Ignored, known errors]
#include "golang/runtime/mheap.h"
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mpallocbits.h"
#include "golang/runtime/mprof.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mspanset.h"
#include "golang/runtime/mstats.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/panic.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    void mallocinit();
    std::tuple<unsafe::Pointer, uintptr_t> sysAlloc(struct mheap* h, uintptr_t n, arenaHint** hintList, bool go_register);
    std::tuple<unsafe::Pointer, uintptr_t> sysReserveAligned(unsafe::Pointer v, uintptr_t size, uintptr_t align);
    void enableMetadataHugePages(struct mheap* h);
    gclinkptr nextFreeFast(mspan* s);
    std::tuple<gclinkptr, mspan*, bool> nextFree(struct mcache* c, spanClass spc);
    unsafe::Pointer mallocgc(uintptr_t size, _type* typ, bool needzero);
    g* deductAssistCredit(uintptr_t size);
    void memclrNoHeapPointersChunked(uintptr_t size, unsafe::Pointer x);
    unsafe::Pointer newobject(_type* typ);
    unsafe::Pointer reflect_unsafe_New(_type* typ);
    unsafe::Pointer reflectlite_unsafe_New(_type* typ);
    unsafe::Pointer newarray(_type* typ, int n);
    unsafe::Pointer reflect_unsafe_NewArray(_type* typ, int n);
    void profilealloc(m* mp, unsafe::Pointer x, uintptr_t size);
    uintptr_t nextSample();
    int32_t fastexprand(int mean);
    uintptr_t nextSampleNoFP();
    struct persistentAlloc
    {
        notInHeap* base;
        uintptr_t off;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct persistentAlloc& value);
    unsafe::Pointer persistentalloc(uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    notInHeap* persistentalloc1(uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    bool inPersistentAlloc(uintptr_t p);
    struct linearAlloc
    {
        uintptr_t next;
        uintptr_t mapped;
        uintptr_t end;
        bool mapMemory;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct linearAlloc& value);
    void init(struct linearAlloc* l, uintptr_t base, uintptr_t size, bool mapMemory);
    unsafe::Pointer alloc(struct linearAlloc* l, uintptr_t size, uintptr_t align, sysMemStat* sysStat);
    struct notInHeap
    {
        sys::NotInHeap _;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct notInHeap& value);
    notInHeap* add(struct notInHeap* p, uintptr_t bytes);
    uintptr_t computeRZlog(uintptr_t userSize);
}

