// generated by GoCpp from file '$(ImportDir)/reflect/abi.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/reflect/abi.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/abi/abi.h"
#include "golang/internal/abi/type.h"
#include "golang/reflect/type.h"

namespace golang::reflect
{
    extern int intArgRegs;
    extern int floatArgRegs;
    extern uintptr_t floatRegSize;
    struct abiStep
    {
        abiStepKind kind;
        uintptr_t offset;
        uintptr_t size;
        uintptr_t stkOff;
        int ireg;
        int freg;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct abiStep& value);
    struct abiSeq
    {
        gocpp::slice<abiStep> steps;
        gocpp::slice<int> valueStart;
        uintptr_t stackBytes;
        int iregs;
        int fregs;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct abiSeq& value);
    void dump(struct abiSeq* a);
    gocpp::slice<abiStep> stepsForValue(struct abiSeq* a, int i);
    abiStep* addArg(struct abiSeq* a, abi::Type* t);
    std::tuple<abiStep*, bool> addRcvr(struct abiSeq* a, abi::Type* rcvr);
    bool regAssign(struct abiSeq* a, abi::Type* t, uintptr_t offset);
    bool assignIntN(struct abiSeq* a, uintptr_t offset, uintptr_t size, int n, uint8_t ptrMap);
    bool assignFloatN(struct abiSeq* a, uintptr_t offset, uintptr_t size, int n);
    void stackAssign(struct abiSeq* a, uintptr_t size, uintptr_t alignment);
    struct abiDesc
    {
        abiSeq call;
        abiSeq ret;
        uintptr_t stackCallArgsSize;
        uintptr_t retOffset;
        uintptr_t spill;
        bitVector* stackPtrs;
        abi::IntArgRegBitmap inRegPtrs;
        abi::IntArgRegBitmap outRegPtrs;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct abiDesc& value);
    void dump(struct abiDesc* a);
    void dumpPtrBitMap(abi::IntArgRegBitmap b);
    abiDesc newAbiDesc(funcType* t, abi::Type* rcvr);
    void intFromReg(abi::RegArgs* r, int reg, uintptr_t argSize, unsafe::Pointer to);
    void intToReg(abi::RegArgs* r, int reg, uintptr_t argSize, unsafe::Pointer from);
    void floatFromReg(abi::RegArgs* r, int reg, uintptr_t argSize, unsafe::Pointer to);
    void floatToReg(abi::RegArgs* r, int reg, uintptr_t argSize, unsafe::Pointer from);
}

