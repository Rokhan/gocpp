// generated by GoCpp from file '$(ImportDir)/runtime/panic.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/panic.fwd.h"
#include "gocpp/support.h"

// #include "golang/internal/abi/symtab.h"  [Ignored, known errors]
#include "golang/internal/abi/type.h"
#include "golang/internal/chacha8rand/chacha8.h"
// #include "golang/runtime/cgocall.h"  [Ignored, known errors]
#include "golang/runtime/chan.h"
#include "golang/runtime/coro.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
// #include "golang/runtime/lockrank.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
#include "golang/runtime/mprof.h"
// #include "golang/runtime/os_windows.h"  [Ignored, known errors]
#include "golang/runtime/plugin.h"
#include "golang/runtime/proc.h"
#include "golang/runtime/runtime.h"
#include "golang/runtime/runtime2.h"
// #include "golang/runtime/signal_windows.h"  [Ignored, known errors]
#include "golang/runtime/stack.h"
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/time.h"  [Ignored, known errors]
#include "golang/runtime/trace2buf.h"
// #include "golang/runtime/trace2runtime.h"  [Ignored, known errors]
#include "golang/runtime/trace2status.h"
#include "golang/runtime/trace2time.h"

namespace golang::runtime
{
    void panicCheck1(uintptr_t pc, std::string msg);
    void panicCheck2(std::string err);
    void goPanicIndex(int x, int y);
    void goPanicIndexU(unsigned int x, int y);
    void goPanicSliceAlen(int x, int y);
    void goPanicSliceAlenU(unsigned int x, int y);
    void goPanicSliceAcap(int x, int y);
    void goPanicSliceAcapU(unsigned int x, int y);
    void goPanicSliceB(int x, int y);
    void goPanicSliceBU(unsigned int x, int y);
    void goPanicSlice3Alen(int x, int y);
    void goPanicSlice3AlenU(unsigned int x, int y);
    void goPanicSlice3Acap(int x, int y);
    void goPanicSlice3AcapU(unsigned int x, int y);
    void goPanicSlice3B(int x, int y);
    void goPanicSlice3BU(unsigned int x, int y);
    void goPanicSlice3C(int x, int y);
    void goPanicSlice3CU(unsigned int x, int y);
    void goPanicSliceConvert(int x, int y);
    void panicIndex(int x, int y);
    void panicIndexU(unsigned int x, int y);
    void panicSliceAlen(int x, int y);
    void panicSliceAlenU(unsigned int x, int y);
    void panicSliceAcap(int x, int y);
    void panicSliceAcapU(unsigned int x, int y);
    void panicSliceB(int x, int y);
    void panicSliceBU(unsigned int x, int y);
    void panicSlice3Alen(int x, int y);
    void panicSlice3AlenU(unsigned int x, int y);
    void panicSlice3Acap(int x, int y);
    void panicSlice3AcapU(unsigned int x, int y);
    void panicSlice3B(int x, int y);
    void panicSlice3BU(unsigned int x, int y);
    void panicSlice3C(int x, int y);
    void panicSlice3CU(unsigned int x, int y);
    void panicSliceConvert(int x, int y);
    extern std::string shiftError;
    void panicshift();
    extern std::string divideError;
    void panicdivide();
    extern std::string overflowError;
    void panicoverflow();
    extern std::string floatError;
    void panicfloat();
    extern std::string memoryError;
    void panicmem();
    void panicmemAddr(uintptr_t addr);
    void deferproc(std::function<void ()> fn);
    extern std::string rangeExitError;
    void panicrangeexit();
    go_any deferrangefunc();
    _defer* badDefer();
    void deferprocat(std::function<void ()> fn, go_any frame);
    _defer* deferconvert(_defer* d);
    void deferprocStack(_defer* d);
    _defer* newdefer();
    void freedefer(_defer* d);
    void freedeferfn();
    void deferreturn();
    void Goexit();
    void preprintpanics(_panic* p);
    void printpanics(_panic* p);
    std::tuple<uint32_t, unsafe::Pointer> readvarintUnsafe(unsafe::Pointer fd);
    struct PanicNilError
    {
        gocpp::array<PanicNilError*, 0> _;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct PanicNilError& value);
    std::string Error(PanicNilError*);
    void RuntimeError(PanicNilError*);
    extern godebugInc* panicnil;
    void gopanic(go_any e);
    void start(struct _panic* p, uintptr_t pc, unsafe::Pointer sp);
    std::tuple<std::function<void ()>, bool> nextDefer(struct _panic* p);
    bool nextFrame(struct _panic* p);
    bool initOpenCodedDefers(struct _panic* p, funcInfo fn, unsafe::Pointer varp);
    go_any gorecover(uintptr_t argp);
    void sync_throw(std::string s);
    void sync_fatal(std::string s);
    void go_throw(std::string s);
    void fatal(std::string s);
    void recovery(g* gp);
    void fatalthrow(throwType t);
    void fatalpanic(_panic* msgs);
    bool startpanic_m();
    bool dopanic_m(g* gp, uintptr_t pc, uintptr_t sp);
    bool canpanic();
    bool shouldPushSigpanic(g* gp, uintptr_t pc, uintptr_t lr);
    bool isAbortPC(uintptr_t pc);
}

