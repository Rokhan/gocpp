// generated by GoCpp from file '$(ImportDir)/image/png/paeth.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/png/paeth.h"
#include "gocpp/support.h"

namespace golang::png
{
    int abs(int x)
    {
        auto m = x >> (intSize - 1);
        return (x ^ m) - m;
    }

    uint8_t paeth(uint8_t a, uint8_t b, uint8_t c)
    {
        auto pc = int(c);
        auto pa = int(b) - pc;
        auto pb = int(a) - pc;
        pc = abs(pa + pb);
        pa = abs(pa);
        pb = abs(pb);
        if(pa <= pb && pa <= pc)
        {
            return a;
        }
        else
        if(pb <= pc)
        {
            return b;
        }
        return c;
    }

    void filterPaeth(gocpp::slice<unsigned char> cdat, gocpp::slice<unsigned char> pdat, int bytesPerPixel)
    {
        int a = {};
        int b = {};
        int c = {};
        int pa = {};
        int pb = {};
        int pc = {};
        for(auto i = 0; i < bytesPerPixel; i++)
        {
            std::tie(a, c) = std::tuple{0, 0};
            for(auto j = i; j < len(cdat); j += bytesPerPixel)
            {
                b = int(pdat[j]);
                pa = b - c;
                pb = a - c;
                pc = abs(pa + pb);
                pa = abs(pa);
                pb = abs(pb);
                if(pa <= pb && pa <= pc)
                {
                }
                else
                if(pb <= pc)
                {
                    a = b;
                }
                else
                {
                    a = c;
                }
                a += int(cdat[j]);
                a &= 0xff;
                cdat[j] = uint8_t(a);
                c = b;
            }
        }
    }

}

