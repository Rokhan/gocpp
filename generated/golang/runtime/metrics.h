// generated by GoCpp from file '$(ImportDir)/runtime/metrics.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/metrics.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/mstats.h"

namespace golang::runtime
{
    extern uint32_t metricsSema;
    struct metricFloat64Histogram
    {
        gocpp::slice<uint64_t> counts;
        gocpp::slice<double> buckets;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct metricFloat64Histogram& value);
    struct metricName
    {
        std::string name;
        golang::runtime::metricKind kind;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct metricName& value);
    extern gocpp::slice<double> sizeClassBuckets;
    extern gocpp::slice<double> timeHistBuckets;
    struct metricData
    {
        statDepSet deps;
        std::function<void (struct statAggregate* in, struct metricValue* out)> compute;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct metricData& value);
    extern bool metricsInit;
    struct sysStatsAggregate
    {
        uint64_t stacksSys;
        uint64_t mSpanSys;
        uint64_t mSpanInUse;
        uint64_t mCacheSys;
        uint64_t mCacheInUse;
        uint64_t buckHashSys;
        uint64_t gcMiscSys;
        uint64_t otherSys;
        uint64_t heapGoal;
        uint64_t gcCyclesDone;
        uint64_t gcCyclesForced;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct sysStatsAggregate& value);
    struct cpuStatsAggregate
    {

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct cpuStatsAggregate& value);
    struct heapStatsAggregate
    {
        uint64_t inObjects;
        uint64_t numObjects;
        uint64_t totalAllocated;
        uint64_t totalFreed;
        uint64_t totalAllocs;
        uint64_t totalFrees;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct heapStatsAggregate& value);
    struct gcStatsAggregate
    {
        uint64_t heapScan;
        uint64_t stackScan;
        uint64_t globalsScan;
        uint64_t totalScan;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct gcStatsAggregate& value);
    struct metricValue
    {
        golang::runtime::metricKind kind;
        uint64_t scalar;
        unsafe::Pointer pointer;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct metricValue& value);
    void metricsLock();
    void metricsUnlock();
    void initMetrics();
    void compute0(struct statAggregate* _1, struct metricValue* out);
    void godebug_registerMetric(std::string name, std::function<uint64_t ()> read);
    runtime::statDepSet makeStatDepSet(gocpp::slice<golang::runtime::statDep> deps);
    
    template<typename... Args>
    runtime::statDepSet makeStatDepSet(Args... deps)
    {
        return makeStatDepSet(gocpp::ToSlice<golang::runtime::statDep>(deps...));
    }
    
    template<typename... Args>
    runtime::statDepSet makeStatDepSet(golang::runtime::statDep value, Args... deps)
    {
        return makeStatDepSet(gocpp::ToSlice<golang::runtime::statDep>(value, deps...));
    }
    double nsToSec(int64_t ns);
    gocpp::slice<std::string> readMetricNames();
    void readMetrics(unsafe::Pointer samplesp, int len, int cap);
    void readMetricsLocked(unsafe::Pointer samplesp, int len, int cap);
    struct metricSample
    {
        std::string name;
        metricValue value;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct metricSample& value);
    extern gocpp::map<std::string, metricData> metrics;
    struct statAggregate
    {
        golang::runtime::statDepSet ensured;
        heapStatsAggregate heapStats;
        sysStatsAggregate sysStats;
        cpuStatsAggregate cpuStats;
        gcStatsAggregate gcStats;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct statAggregate& value);

    namespace rec
    {
        void compute(golang::runtime::metricReader f, struct statAggregate* _1, struct metricValue* out);
        runtime::statDepSet difference(golang::runtime::statDepSet s, golang::runtime::statDepSet b);
        runtime::statDepSet union(golang::runtime::statDepSet s, golang::runtime::statDepSet b);
        bool empty(golang::runtime::statDepSet* s);
        bool has(golang::runtime::statDepSet* s, golang::runtime::statDep d);
        void compute(struct heapStatsAggregate* a);
        void compute(struct sysStatsAggregate* a);
        void compute(struct cpuStatsAggregate* a);
        void compute(struct gcStatsAggregate* a);
        void ensure(struct statAggregate* a, golang::runtime::statDepSet* deps);
        struct metricFloat64Histogram* float64HistOrInit(struct metricValue* v, gocpp::slice<double> buckets);
    }
}

