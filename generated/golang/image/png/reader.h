// generated by GoCpp from file '$(ImportDir)/image/png/reader.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/png/reader.fwd.h"
#include "gocpp/support.h"

#include "golang/hash/hash.h"
#include "golang/image/color/color.h"
#include "golang/image/geom.h"
#include "golang/image/image.h"
#include "golang/io/io.h"

namespace golang::png
{
    struct interlaceScan
    {
        int xFactor;
        int yFactor;
        int xOffset;
        int yOffset;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct interlaceScan& value);
    extern std::string pngHeader;
    struct decoder
    {
        io::Reader r;
        image::Image img;
        hash::Hash32 crc;
        int width;
        int height;
        int depth;
        color::Palette palette;
        int cb;
        int stage;
        uint32_t idatLength;
        gocpp::array<unsigned char, 3 * 256> tmp;
        int interlace;
        bool useTransparent;
        gocpp::array<unsigned char, 6> transparent;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct decoder& value);
    extern FormatError chunkOrderError;
    bool cbPaletted(int cb);
    bool cbTrueColor(int cb);
    std::tuple<image::Image, struct gocpp::error> Decode(io::Reader r);
    std::tuple<image::Config, struct gocpp::error> DecodeConfig(io::Reader r);
    void init();
    extern gocpp::slice<interlaceScan> interlacing;

    namespace rec
    {
        std::string Error(golang::png::FormatError e);
        std::string Error(golang::png::UnsupportedError e);
        struct gocpp::error parseIHDR(struct decoder* d, uint32_t length);
        struct gocpp::error parsePLTE(struct decoder* d, uint32_t length);
        struct gocpp::error parsetRNS(struct decoder* d, uint32_t length);
        std::tuple<int, struct gocpp::error> Read(struct decoder* d, gocpp::slice<unsigned char> p);
        std::tuple<image::Image, struct gocpp::error> decode(struct decoder* d);
        std::tuple<image::Image, struct gocpp::error> readImagePass(struct decoder* d, io::Reader r, int pass, bool allocateOnly);
        void mergePassInto(struct decoder* d, image::Image dst, image::Image src, int pass);
        struct gocpp::error parseIDAT(struct decoder* d, uint32_t length);
        struct gocpp::error parseIEND(struct decoder* d, uint32_t length);
        struct gocpp::error parseChunk(struct decoder* d, bool configOnly);
        struct gocpp::error verifyChecksum(struct decoder* d);
        struct gocpp::error checkHeader(struct decoder* d);
    }
}

