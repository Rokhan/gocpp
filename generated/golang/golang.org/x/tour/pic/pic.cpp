// generated by GoCpp from file '$(ImportDir)/golang.org/x/tour/pic/pic.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/golang.org/x/tour/pic/pic.h"
#include "gocpp/support.h"

#include "golang/bufio/bufio.h"
#include "golang/encoding/base64/base64.h"
// #include "golang/image/png/writer.h"  [Ignored, known errors]
#include "golang/image/geom.h"
#include "golang/image/image.h"
// #include "golang/io/io.h"  [Ignored, known errors]

namespace golang::pic
{
    void Show(std::function<gocpp::slice<gocpp::slice<uint8_t>> (int dx, int dy)> f)
    {
        auto dx = 256;
        auto dy = 256;
        auto data = f(dx, dy);
        auto m = NewNRGBA(gocpp::recv(image), Rect(gocpp::recv(image), 0, 0, dx, dy));
        for(auto y = 0; y < dy; y++)
        {
            for(auto x = 0; x < dx; x++)
            {
                auto v = data[y][x];
                auto i = y * m->Stride + x * 4;
                m->Pix[i] = v;
                m->Pix[i + 1] = v;
                m->Pix[i + 2] = 255;
                m->Pix[i + 3] = 255;
            }
        }
        ShowImage(m);
    }

    void ShowImage(image::Image m)
    {
        gocpp::Defer defer;
        auto w = NewWriter(gocpp::recv(bufio), os.Stdout);
        defer.push_back([=]{ Flush(gocpp::recv(w)); });
        WriteString(gocpp::recv(io), w, "IMAGE:");
        auto b64 = NewEncoder(gocpp::recv(base64), base64.StdEncoding, w);
        auto err = Encode(gocpp::recv((gocpp::InitPtr<png::Encoder>([](png::Encoder& x) { x.CompressionLevel = png.BestCompression; }))), b64, m);
        if(err != nullptr)
        {
            gocpp::panic(err);
        }
        Close(gocpp::recv(b64));
        WriteString(gocpp::recv(io), w, "\n");
    }

}

