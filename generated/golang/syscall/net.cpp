// generated by GoCpp from file '$(ImportDir)/syscall/net.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/net.h"
#include "gocpp/support.h"

namespace golang::syscall
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // A RawConn is a raw network connection.
    
    template<typename T>
    RawConn::RawConn(T& ref)
    {
        value.reset(new RawConnImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    RawConn::RawConn(const T& ref)
    {
        value.reset(new RawConnImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    RawConn::RawConn(T* ptr)
    {
        value.reset(new RawConnImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& RawConn::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    struct gocpp::error RawConn::RawConnImpl<T, StoreT>::vControl(std::function<void (uintptr_t fd)> f)
    {
        return rec::Control(gocpp::PtrRecv<T, false>(value.get()), f);
    }
    template<typename T, typename StoreT>
    struct gocpp::error RawConn::RawConnImpl<T, StoreT>::vRead(std::function<bool (uintptr_t fd)> f)
    {
        return rec::Read(gocpp::PtrRecv<T, false>(value.get()), f);
    }
    template<typename T, typename StoreT>
    struct gocpp::error RawConn::RawConnImpl<T, StoreT>::vWrite(std::function<bool (uintptr_t fd)> f)
    {
        return rec::Write(gocpp::PtrRecv<T, false>(value.get()), f);
    }

    namespace rec
    {
        struct gocpp::error Control(const gocpp::PtrRecv<struct RawConn, false>& self, std::function<void (uintptr_t fd)> f)
        {
            return self.ptr->value->vControl(f);
        }

        struct gocpp::error Control(const gocpp::ObjRecv<struct RawConn>& self, std::function<void (uintptr_t fd)> f)
        {
            return self.obj.value->vControl(f);
        }

        struct gocpp::error Read(const gocpp::PtrRecv<struct RawConn, false>& self, std::function<bool (uintptr_t fd)> f)
        {
            return self.ptr->value->vRead(f);
        }

        struct gocpp::error Read(const gocpp::ObjRecv<struct RawConn>& self, std::function<bool (uintptr_t fd)> f)
        {
            return self.obj.value->vRead(f);
        }

        struct gocpp::error Write(const gocpp::PtrRecv<struct RawConn, false>& self, std::function<bool (uintptr_t fd)> f)
        {
            return self.ptr->value->vWrite(f);
        }

        struct gocpp::error Write(const gocpp::ObjRecv<struct RawConn>& self, std::function<bool (uintptr_t fd)> f)
        {
            return self.obj.value->vWrite(f);
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct RawConn& value)
    {
        return value.PrintTo(os);
    }

    // Conn is implemented by some types in the net and os packages to provide
    // access to the underlying file descriptor or handle.
    
    template<typename T>
    Conn::Conn(T& ref)
    {
        value.reset(new ConnImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    Conn::Conn(const T& ref)
    {
        value.reset(new ConnImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    Conn::Conn(T* ptr)
    {
        value.reset(new ConnImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& Conn::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    std::tuple<struct RawConn, struct gocpp::error> Conn::ConnImpl<T, StoreT>::vSyscallConn()
    {
        return rec::SyscallConn(gocpp::PtrRecv<T, false>(value.get()));
    }

    namespace rec
    {
        std::tuple<struct RawConn, struct gocpp::error> SyscallConn(const gocpp::PtrRecv<struct Conn, false>& self)
        {
            return self.ptr->value->vSyscallConn();
        }

        std::tuple<struct RawConn, struct gocpp::error> SyscallConn(const gocpp::ObjRecv<struct Conn>& self)
        {
            return self.obj.value->vSyscallConn();
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct Conn& value)
    {
        return value.PrintTo(os);
    }

}

