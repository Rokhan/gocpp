// generated by GoCpp from file '$(ImportDir)/runtime/malloc.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const int _64bit = (1 << (~ uintptr_t(0) >> 63)) / 2;
    const long _TinySize = 16;
    const int8_t _TinySizeClass = int8_t(2);
    const int _FixAllocChunk = 16 << 10;
    const int _StackCacheSize = 32 * 1024;
    const long _MaxGcproc = 32;
    const uintptr_t minLegalPointer = 4096;
    const int minHeapForMetadataHugePages = 1 << 30;
    struct persistentAlloc;
    struct gocpp_id_0;
    const int persistentChunkSize = 256 << 10;
    struct linearAlloc;
    const int maxTinySize = _TinySize;
    const int8_t tinySizeClass = _TinySizeClass;
}
#include "golang/internal/goarch/goarch.fwd.h"
#include "golang/internal/goarch/zgoarch_amd64.fwd.h"
#include "golang/internal/goos/zgoos_windows.fwd.h"
#include "golang/runtime/internal/sys/nih.fwd.h"
#include "golang/runtime/sizeclasses.fwd.h"

namespace golang::runtime
{
    const int maxSmallSize = _MaxSmallSize;
    const int pageShift = _PageShift;
    const int _PageSize = 1 << _PageShift;
    const int _NumStackOrders = 4 - goarch::PtrSize / 4 * goos::IsWindows - 1 * goos::IsPlan9;
    const int heapAddrBits = (_64bit * (1 - goarch::IsWasm) * (1 - goos::IsIos * goarch::IsArm64)) * 48 + (1 - _64bit + goarch::IsWasm) * (32 - (goarch::IsMips + goarch::IsMipsle)) + 40 * goos::IsIos * goarch::IsArm64;
    const int logHeapArenaBytes = (6 + 20) * (_64bit * (1 - goos::IsWindows) * (1 - goarch::IsWasm) * (1 - goos::IsIos * goarch::IsArm64)) + (2 + 20) * (_64bit * goos::IsWindows) + (2 + 20) * (1 - _64bit) + (2 + 20) * goarch::IsWasm + (2 + 20) * goos::IsIos * goarch::IsArm64;
    const int arenaL1Bits = 6 * (_64bit * goos::IsWindows);
    const int arenaBaseOffset = 0xffff800000000000 * goarch::IsAmd64 + 0x0a00000000000000 * goos::IsAix;
    struct notInHeap;
    const int pageSize = _PageSize;
    const int _PageMask = _PageSize - 1;
    const int maxAlloc = (1 << heapAddrBits) - (1 - _64bit) * 1;
    const int heapArenaBytes = 1 << logHeapArenaBytes;
    const int arenaL2Bits = heapAddrBits - logHeapArenaBytes - arenaL1Bits;
    const uintptr_t arenaBaseOffsetUintptr = uintptr_t(arenaBaseOffset);
    const int heapArenaWords = heapArenaBytes / goarch::PtrSize;
    const int pagesPerArena = heapArenaBytes / pageSize;
    const int arenaL1Shift = arenaL2Bits;
    const int arenaBits = arenaL1Bits + arenaL2Bits;
    const int heapArenaBitmapWords = heapArenaWords / (8 * goarch::PtrSize);
}
#include "golang/internal/goexperiment/exp_allocheaders_on.fwd.h"
#include "golang/runtime/asan0.fwd.h"
#include "golang/runtime/error.fwd.h"
#include "golang/runtime/extern.fwd.h"
#include "golang/runtime/fastlog2.fwd.h"
#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "golang/runtime/internal/atomic/stubs.fwd.h"
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/internal/math/math.fwd.h"
#include "golang/runtime/internal/sys/intrinsics.fwd.h"
// #include "golang/runtime/lock_sema.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/mbitmap.fwd.h"
// #include "golang/runtime/mbitmap_allocheaders.fwd.h" [Ignored, known errors]
// #include "golang/runtime/mcache.fwd.h" [Ignored, known errors]
#include "golang/runtime/mem.fwd.h"
#include "golang/runtime/mem_windows.fwd.h"
#include "golang/runtime/mfinal.fwd.h"
#include "golang/runtime/mfixalloc.fwd.h"
#include "golang/runtime/mgc.fwd.h"
#include "golang/runtime/mgcmark.fwd.h"
#include "golang/runtime/mheap.fwd.h"
#include "golang/runtime/mpagealloc.fwd.h"
#include "golang/runtime/mprof.fwd.h"
#include "golang/runtime/msan0.fwd.h"
#include "golang/runtime/mstats.fwd.h"
#include "golang/runtime/panic.fwd.h"
// #include "golang/runtime/print.fwd.h" [Ignored, known errors]
#include "golang/runtime/proc.fwd.h"
// #include "golang/runtime/race0.fwd.h" [Ignored, known errors]
// #include "golang/runtime/rand.fwd.h" [Ignored, known errors]
// #include "golang/runtime/runtime1.fwd.h" [Ignored, known errors]
#include "golang/runtime/runtime2.fwd.h"
#include "golang/runtime/slice.fwd.h"
#include "golang/runtime/stack.fwd.h"
#include "golang/runtime/string.fwd.h"
// #include "golang/runtime/stubs.fwd.h" [Ignored, known errors]
#include "golang/runtime/stubs_nonlinux.fwd.h"
#include "golang/runtime/tagptr.fwd.h"
#include "golang/runtime/tagptr_64bit.fwd.h"
#include "golang/runtime/type.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"
