// generated by GoCpp from file '$(ImportDir)/runtime/extern.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/extern.h"
#include "gocpp/support.h"

#include "golang/internal/goarch/zgoarch_amd64.h"
#include "golang/internal/goos/zgoos_windows.h"
#include "golang/runtime/env_posix.h"
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
// #include "golang/runtime/traceback.h"  [Ignored, known errors]

namespace golang::runtime
{
    std::tuple<uintptr_t, std::string, int, bool> Caller(int skip)
    {
        uintptr_t pc;
        std::string file;
        int line;
        bool ok;
        auto rpc = gocpp::make(gocpp::Tag<gocpp::slice<uintptr_t>>(), 1);
        auto n = callers(skip + 1, rpc.make_slice(0, ));
        if(n < 1)
        {
            uintptr_t pc;
            std::string file;
            int line;
            bool ok;
            return {pc, file, line, ok};
        }
        auto [frame, _] = Next(gocpp::recv(CallersFrames(rpc)));
        return {frame.PC, frame.File, frame.Line, frame.PC != 0};
    }

    int Callers(int skip, gocpp::slice<uintptr_t> pc)
    {
        if(len(pc) == 0)
        {
            return 0;
        }
        return callers(skip, pc);
    }

    std::string defaultGOROOT;
    std::string GOROOT()
    {
        auto s = gogetenv("GOROOT");
        if(s != "")
        {
            return s;
        }
        return defaultGOROOT;
    }

    std::string buildVersion;
    std::string Version()
    {
        return buildVersion;
    }

    std::string GOOS = goos.GOOS;
    std::string GOARCH = goarch.GOARCH;
}

