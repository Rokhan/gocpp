// generated by GoCpp from file '$(ImportDir)/compress/flate/huffman_bit_writer.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/compress/flate/huffman_bit_writer.fwd.h"
#include "gocpp/support.h"

#include "golang/compress/flate/deflate.h"
#include "golang/compress/flate/huffman_code.h"
#include "golang/compress/flate/inflate.h"
#include "golang/compress/flate/token.h"
// #include "golang/io/io.h"  [Ignored, known errors]

namespace golang::flate
{
    extern int offsetCodeCount;
    extern int endBlockMarker;
    extern int lengthCodesStart;
    extern int codegenCodeCount;
    extern int badCode;
    extern int bufferFlushSize;
    extern int bufferSize;
    extern gocpp::slice<int8_t> lengthExtraBits;
    extern gocpp::slice<uint32_t> lengthBase;
    extern gocpp::slice<int8_t> offsetExtraBits;
    extern gocpp::slice<uint32_t> offsetBase;
    extern gocpp::slice<uint32_t> codegenOrder;
    struct huffmanBitWriter
    {
        io::Writer writer;
        uint64_t bits;
        unsigned int nbits;
        gocpp::array<unsigned char, bufferSize> bytes;
        gocpp::array<int32_t, codegenCodeCount> codegenFreq;
        int nbytes;
        gocpp::slice<int32_t> literalFreq;
        gocpp::slice<int32_t> offsetFreq;
        gocpp::slice<uint8_t> codegen;
        huffmanEncoder* literalEncoding;
        huffmanEncoder* offsetEncoding;
        huffmanEncoder* codegenEncoding;
        std::string err;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const huffmanBitWriter& value);
    huffmanBitWriter* newHuffmanBitWriter(io::Writer w);
    void reset(huffmanBitWriter* w, io::Writer writer);
    void flush(huffmanBitWriter* w);
    void write(huffmanBitWriter* w, gocpp::slice<unsigned char> b);
    void writeBits(huffmanBitWriter* w, int32_t b, unsigned int nb);
    void writeBytes(huffmanBitWriter* w, gocpp::slice<unsigned char> bytes);
    void generateCodegen(huffmanBitWriter* w, int numLiterals, int numOffsets, huffmanEncoder* litEnc, huffmanEncoder* offEnc);
    std::tuple<int, int> dynamicSize(huffmanBitWriter* w, huffmanEncoder* litEnc, huffmanEncoder* offEnc, int extraBits);
    int fixedSize(huffmanBitWriter* w, int extraBits);
    std::tuple<int, bool> storedSize(huffmanBitWriter* w, gocpp::slice<unsigned char> in);
    void writeCode(huffmanBitWriter* w, hcode c);
    void writeDynamicHeader(huffmanBitWriter* w, int numLiterals, int numOffsets, int numCodegens, bool isEof);
    void writeStoredHeader(huffmanBitWriter* w, int length, bool isEof);
    void writeFixedHeader(huffmanBitWriter* w, bool isEof);
    void writeBlock(huffmanBitWriter* w, gocpp::slice<token> tokens, bool eof, gocpp::slice<unsigned char> input);
    void writeBlockDynamic(huffmanBitWriter* w, gocpp::slice<token> tokens, bool eof, gocpp::slice<unsigned char> input);
    std::tuple<int, int> indexTokens(huffmanBitWriter* w, gocpp::slice<token> tokens);
    void writeTokens(huffmanBitWriter* w, gocpp::slice<token> tokens, gocpp::slice<hcode> leCodes, gocpp::slice<hcode> oeCodes);
    void init();
    void writeBlockHuff(huffmanBitWriter* w, bool eof, gocpp::slice<unsigned char> input);
    void histogram(gocpp::slice<unsigned char> b, gocpp::slice<int32_t> h);
}

