// generated by GoCpp from file '$(ImportDir)/errors/wrap.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/errors/wrap.h"
#include "gocpp/support.h"

#include "golang/internal/abi/type.h"
#include "golang/internal/reflectlite/type.h"
#include "golang/internal/reflectlite/value.h"

namespace golang::errors
{
    
        template<typename T>
        gocpp_id_0::gocpp_id_0(T& ref)
        {
            value.reset(new gocpp_id_0Impl<T, std::unique_ptr<T>>(new T(ref)));
        }

        template<typename T>
        gocpp_id_0::gocpp_id_0(const T& ref)
        {
            value.reset(new gocpp_id_0Impl<T, std::unique_ptr<T>>(new T(ref)));
        }

        template<typename T>
        gocpp_id_0::gocpp_id_0(T* ptr)
        {
            value.reset(new gocpp_id_0Impl<T, gocpp::ptr<T>>(ptr));
        }

        std::ostream& gocpp_id_0::PrintTo(std::ostream& os) const
        {
            return os;
        }

        template<typename T, typename StoreT>
        struct gocpp::error gocpp_id_0::gocpp_id_0Impl<T, StoreT>::vUnwrap()
        {
            return Unwrap(gocpp::PtrRecv<T, false>(value.get()));
        }

        struct gocpp::error Unwrap(const gocpp::PtrRecv<gocpp_id_0, false>& self)
        {
            return self.ptr->value->vUnwrap();
        }

        struct gocpp::error Unwrap(const gocpp::ObjRecv<gocpp_id_0>& self)
        {
            return self.obj.value->vUnwrap();
        }

        std::ostream& operator<<(std::ostream& os, const struct gocpp_id_0& value)
        {
            return value.PrintTo(os);
        }


    struct gocpp::error Unwrap(struct gocpp::error err)
    {
        auto [u, ok] = gocpp::getValue<gocpp_id_0>(err);
        if(! ok)
        {
            return nullptr;
        }
        return Unwrap(gocpp::recv(u));
    }

    bool Is(struct gocpp::error err, struct gocpp::error target)
    {
        if(target == nullptr)
        {
            return err == target;
        }
        auto isComparable = Comparable(gocpp::recv(reflectlite::TypeOf(target)));
        return is(err, target, isComparable);
    }

    
            template<typename T>
            gocpp_id_1::gocpp_id_1(T& ref)
            {
                value.reset(new gocpp_id_1Impl<T, std::unique_ptr<T>>(new T(ref)));
            }

            template<typename T>
            gocpp_id_1::gocpp_id_1(const T& ref)
            {
                value.reset(new gocpp_id_1Impl<T, std::unique_ptr<T>>(new T(ref)));
            }

            template<typename T>
            gocpp_id_1::gocpp_id_1(T* ptr)
            {
                value.reset(new gocpp_id_1Impl<T, gocpp::ptr<T>>(ptr));
            }

            std::ostream& gocpp_id_1::PrintTo(std::ostream& os) const
            {
                return os;
            }

            template<typename T, typename StoreT>
            bool gocpp_id_1::gocpp_id_1Impl<T, StoreT>::vIs(gocpp::error)
            {
                return Is(gocpp::PtrRecv<T, false>(value.get()));
            }

            bool Is(const gocpp::PtrRecv<gocpp_id_1, false>& self, gocpp::error)
            {
                return self.ptr->value->vIs();
            }

            bool Is(const gocpp::ObjRecv<gocpp_id_1>& self, gocpp::error)
            {
                return self.obj.value->vIs();
            }

            std::ostream& operator<<(std::ostream& os, const struct gocpp_id_1& value)
            {
                return value.PrintTo(os);
            }


    
                template<typename T>
                gocpp_id_3::gocpp_id_3(T& ref)
                {
                    value.reset(new gocpp_id_3Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_3::gocpp_id_3(const T& ref)
                {
                    value.reset(new gocpp_id_3Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_3::gocpp_id_3(T* ptr)
                {
                    value.reset(new gocpp_id_3Impl<T, gocpp::ptr<T>>(ptr));
                }

                std::ostream& gocpp_id_3::PrintTo(std::ostream& os) const
                {
                    return os;
                }

                template<typename T, typename StoreT>
                struct gocpp::error gocpp_id_3::gocpp_id_3Impl<T, StoreT>::vUnwrap()
                {
                    return Unwrap(gocpp::PtrRecv<T, false>(value.get()));
                }

                struct gocpp::error Unwrap(const gocpp::PtrRecv<gocpp_id_3, false>& self)
                {
                    return self.ptr->value->vUnwrap();
                }

                struct gocpp::error Unwrap(const gocpp::ObjRecv<gocpp_id_3>& self)
                {
                    return self.obj.value->vUnwrap();
                }

                std::ostream& operator<<(std::ostream& os, const struct gocpp_id_3& value)
                {
                    return value.PrintTo(os);
                }


    
                template<typename T>
                gocpp_id_4::gocpp_id_4(T& ref)
                {
                    value.reset(new gocpp_id_4Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_4::gocpp_id_4(const T& ref)
                {
                    value.reset(new gocpp_id_4Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_4::gocpp_id_4(T* ptr)
                {
                    value.reset(new gocpp_id_4Impl<T, gocpp::ptr<T>>(ptr));
                }

                std::ostream& gocpp_id_4::PrintTo(std::ostream& os) const
                {
                    return os;
                }

                template<typename T, typename StoreT>
                gocpp::slice<gocpp::error> gocpp_id_4::gocpp_id_4Impl<T, StoreT>::vUnwrap()
                {
                    return Unwrap(gocpp::PtrRecv<T, false>(value.get()));
                }

                gocpp::slice<gocpp::error> Unwrap(const gocpp::PtrRecv<gocpp_id_4, false>& self)
                {
                    return self.ptr->value->vUnwrap();
                }

                gocpp::slice<gocpp::error> Unwrap(const gocpp::ObjRecv<gocpp_id_4>& self)
                {
                    return self.obj.value->vUnwrap();
                }

                std::ostream& operator<<(std::ostream& os, const struct gocpp_id_4& value)
                {
                    return value.PrintTo(os);
                }


    bool is(struct gocpp::error err, struct gocpp::error target, bool targetComparable)
    {
        for(; ; )
        {
            if(targetComparable && err == target)
            {
                return true;
            }
            if(auto [x, ok] = gocpp::getValue<gocpp_id_1>(err); ok && Is(gocpp::recv(x), target))
            {
                return true;
            }
            //Go type switch emulation
            {
                const auto& gocpp_id_2 = gocpp::type_info(err);
                int conditionId = -1;
                if(gocpp_id_2 == typeid(gocpp_id_3)) { conditionId = 0; }
                else if(gocpp_id_2 == typeid(gocpp_id_4)) { conditionId = 1; }
                switch(conditionId)
                {
                    case 0:
                    {
                        gocpp_id_3 x = gocpp::any_cast<gocpp_id_3>(err);
                        err = Unwrap(gocpp::recv(x));
                        if(err == nullptr)
                        {
                            return false;
                        }
                        break;
                    }
                    case 1:
                    {
                        gocpp_id_4 x = gocpp::any_cast<gocpp_id_4>(err);
                        for(auto [gocpp_ignored, err] : Unwrap(gocpp::recv(x)))
                        {
                            if(is(err, target, targetComparable))
                            {
                                return true;
                            }
                        }
                        return false;
                        break;
                    }
                    default:
                    {
                        auto x = err;
                        return false;
                        break;
                    }
                }
            }
        }
    }

    bool As(struct gocpp::error err, go_any target)
    {
        if(err == nullptr)
        {
            return false;
        }
        if(target == nullptr)
        {
            gocpp::panic("errors: target cannot be nil");
        }
        auto val = reflectlite::ValueOf(target);
        auto typ = Type(gocpp::recv(val));
        if(Kind(gocpp::recv(typ)) != reflectlite::Ptr || IsNil(gocpp::recv(val)))
        {
            gocpp::panic("errors: target must be a non-nil pointer");
        }
        auto targetType = Elem(gocpp::recv(typ));
        if(Kind(gocpp::recv(targetType)) != reflectlite::Interface && ! Implements(gocpp::recv(targetType), errorType))
        {
            gocpp::panic("errors: *target must be interface or implement error");
        }
        return as(err, target, val, targetType);
    }

    
            template<typename T>
            gocpp_id_5::gocpp_id_5(T& ref)
            {
                value.reset(new gocpp_id_5Impl<T, std::unique_ptr<T>>(new T(ref)));
            }

            template<typename T>
            gocpp_id_5::gocpp_id_5(const T& ref)
            {
                value.reset(new gocpp_id_5Impl<T, std::unique_ptr<T>>(new T(ref)));
            }

            template<typename T>
            gocpp_id_5::gocpp_id_5(T* ptr)
            {
                value.reset(new gocpp_id_5Impl<T, gocpp::ptr<T>>(ptr));
            }

            std::ostream& gocpp_id_5::PrintTo(std::ostream& os) const
            {
                return os;
            }

            template<typename T, typename StoreT>
            bool gocpp_id_5::gocpp_id_5Impl<T, StoreT>::vAs(go_any)
            {
                return As(gocpp::PtrRecv<T, false>(value.get()));
            }

            bool As(const gocpp::PtrRecv<gocpp_id_5, false>& self, go_any)
            {
                return self.ptr->value->vAs();
            }

            bool As(const gocpp::ObjRecv<gocpp_id_5>& self, go_any)
            {
                return self.obj.value->vAs();
            }

            std::ostream& operator<<(std::ostream& os, const struct gocpp_id_5& value)
            {
                return value.PrintTo(os);
            }


    
                template<typename T>
                gocpp_id_7::gocpp_id_7(T& ref)
                {
                    value.reset(new gocpp_id_7Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_7::gocpp_id_7(const T& ref)
                {
                    value.reset(new gocpp_id_7Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_7::gocpp_id_7(T* ptr)
                {
                    value.reset(new gocpp_id_7Impl<T, gocpp::ptr<T>>(ptr));
                }

                std::ostream& gocpp_id_7::PrintTo(std::ostream& os) const
                {
                    return os;
                }

                template<typename T, typename StoreT>
                struct gocpp::error gocpp_id_7::gocpp_id_7Impl<T, StoreT>::vUnwrap()
                {
                    return Unwrap(gocpp::PtrRecv<T, false>(value.get()));
                }

                struct gocpp::error Unwrap(const gocpp::PtrRecv<gocpp_id_7, false>& self)
                {
                    return self.ptr->value->vUnwrap();
                }

                struct gocpp::error Unwrap(const gocpp::ObjRecv<gocpp_id_7>& self)
                {
                    return self.obj.value->vUnwrap();
                }

                std::ostream& operator<<(std::ostream& os, const struct gocpp_id_7& value)
                {
                    return value.PrintTo(os);
                }


    
                template<typename T>
                gocpp_id_8::gocpp_id_8(T& ref)
                {
                    value.reset(new gocpp_id_8Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_8::gocpp_id_8(const T& ref)
                {
                    value.reset(new gocpp_id_8Impl<T, std::unique_ptr<T>>(new T(ref)));
                }

                template<typename T>
                gocpp_id_8::gocpp_id_8(T* ptr)
                {
                    value.reset(new gocpp_id_8Impl<T, gocpp::ptr<T>>(ptr));
                }

                std::ostream& gocpp_id_8::PrintTo(std::ostream& os) const
                {
                    return os;
                }

                template<typename T, typename StoreT>
                gocpp::slice<gocpp::error> gocpp_id_8::gocpp_id_8Impl<T, StoreT>::vUnwrap()
                {
                    return Unwrap(gocpp::PtrRecv<T, false>(value.get()));
                }

                gocpp::slice<gocpp::error> Unwrap(const gocpp::PtrRecv<gocpp_id_8, false>& self)
                {
                    return self.ptr->value->vUnwrap();
                }

                gocpp::slice<gocpp::error> Unwrap(const gocpp::ObjRecv<gocpp_id_8>& self)
                {
                    return self.obj.value->vUnwrap();
                }

                std::ostream& operator<<(std::ostream& os, const struct gocpp_id_8& value)
                {
                    return value.PrintTo(os);
                }


    bool as(struct gocpp::error err, go_any target, struct reflectlite::Value targetVal, struct reflectlite::Type targetType)
    {
        for(; ; )
        {
            if(AssignableTo(gocpp::recv(reflectlite::TypeOf(err)), targetType))
            {
                Set(gocpp::recv(Elem(gocpp::recv(targetVal))), reflectlite::ValueOf(err));
                return true;
            }
            if(auto [x, ok] = gocpp::getValue<gocpp_id_5>(err); ok && As(gocpp::recv(x), target))
            {
                return true;
            }
            //Go type switch emulation
            {
                const auto& gocpp_id_6 = gocpp::type_info(err);
                int conditionId = -1;
                if(gocpp_id_6 == typeid(gocpp_id_7)) { conditionId = 0; }
                else if(gocpp_id_6 == typeid(gocpp_id_8)) { conditionId = 1; }
                switch(conditionId)
                {
                    case 0:
                    {
                        gocpp_id_7 x = gocpp::any_cast<gocpp_id_7>(err);
                        err = Unwrap(gocpp::recv(x));
                        if(err == nullptr)
                        {
                            return false;
                        }
                        break;
                    }
                    case 1:
                    {
                        gocpp_id_8 x = gocpp::any_cast<gocpp_id_8>(err);
                        for(auto [gocpp_ignored, err] : Unwrap(gocpp::recv(x)))
                        {
                            if(err == nullptr)
                            {
                                continue;
                            }
                            if(as(err, target, targetVal, targetType))
                            {
                                return true;
                            }
                        }
                        return false;
                        break;
                    }
                    default:
                    {
                        auto x = err;
                        return false;
                        break;
                    }
                }
            }
        }
    }

    reflectlite::Type errorType = Elem(gocpp::recv(reflectlite::TypeOf((gocpp::error*)(nullptr))));
}

