// generated by GoCpp from file 'tests/TourOfGo/methods/stringer.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/methods/stringer.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Person::operator T()
    {
        T result;
        result.Name = this->Name;
        result.Age = this->Age;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Person::operator==(const T& ref) const
    {
        if (Name != ref.Name) return false;
        if (Age != ref.Age) return false;
        return true;
    }

    std::ostream& Person::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Name;
        os << " " << Age;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Person& value)
    {
        return value.PrintTo(os);
    }

    std::string rec::String(struct Person p)
    {
        return mocklib::Sprintf("%v (%v years)"s, p.Name, p.Age);
    }

    void main()
    {
        auto a = Person {"Arthur Dent"s, 42};
        auto z = Person {"Zaphod Beeblebrox"s, 9001};
        mocklib::Println(a, z);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::setprecision(5) << std::fixed;
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
