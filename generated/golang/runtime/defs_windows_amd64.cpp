// generated by GoCpp from file '$(ImportDir)/runtime/defs_windows_amd64.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/defs_windows_amd64.h"
#include "gocpp/support.h"

// #include "golang/runtime/print.h"  [Ignored, known errors]

namespace golang::runtime
{
    
    std::ostream& m128a::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << low;
        os << " " << high;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct m128a& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& context::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << p1home;
        os << " " << p2home;
        os << " " << p3home;
        os << " " << p4home;
        os << " " << p5home;
        os << " " << p6home;
        os << " " << contextflags;
        os << " " << mxcsr;
        os << " " << segcs;
        os << " " << segds;
        os << " " << seges;
        os << " " << segfs;
        os << " " << seggs;
        os << " " << segss;
        os << " " << eflags;
        os << " " << dr0;
        os << " " << dr1;
        os << " " << dr2;
        os << " " << dr3;
        os << " " << dr6;
        os << " " << dr7;
        os << " " << rax;
        os << " " << rcx;
        os << " " << rdx;
        os << " " << rbx;
        os << " " << rsp;
        os << " " << rbp;
        os << " " << rsi;
        os << " " << rdi;
        os << " " << r8;
        os << " " << r9;
        os << " " << r10;
        os << " " << r11;
        os << " " << r12;
        os << " " << r13;
        os << " " << r14;
        os << " " << r15;
        os << " " << rip;
        os << " " << anon0;
        os << " " << vectorregister;
        os << " " << vectorcontrol;
        os << " " << debugcontrol;
        os << " " << lastbranchtorip;
        os << " " << lastbranchfromrip;
        os << " " << lastexceptiontorip;
        os << " " << lastexceptionfromrip;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct context& value)
    {
        return value.PrintTo(os);
    }

    uintptr_t ip(struct context* c)
    {
        return uintptr_t(c->rip);
    }

    uintptr_t sp(struct context* c)
    {
        return uintptr_t(c->rsp);
    }

    uintptr_t lr(struct context* c)
    {
        return 0;
    }

    void set_lr(struct context* c, uintptr_t x)
    {
    }

    void set_ip(struct context* c, uintptr_t x)
    {
        c->rip = uint64_t(x);
    }

    void set_sp(struct context* c, uintptr_t x)
    {
        c->rsp = uint64_t(x);
    }

    void set_fp(struct context* c, uintptr_t x)
    {
        c->rbp = uint64_t(x);
    }

    void prepareContextForSigResume(context* c)
    {
        c->r8 = c->rsp;
        c->r9 = c->rip;
    }

    void dumpregs(context* r)
    {
        print("rax     ", hex(r->rax), "\n");
        print("rbx     ", hex(r->rbx), "\n");
        print("rcx     ", hex(r->rcx), "\n");
        print("rdx     ", hex(r->rdx), "\n");
        print("rdi     ", hex(r->rdi), "\n");
        print("rsi     ", hex(r->rsi), "\n");
        print("rbp     ", hex(r->rbp), "\n");
        print("rsp     ", hex(r->rsp), "\n");
        print("r8      ", hex(r->r8), "\n");
        print("r9      ", hex(r->r9), "\n");
        print("r10     ", hex(r->r10), "\n");
        print("r11     ", hex(r->r11), "\n");
        print("r12     ", hex(r->r12), "\n");
        print("r13     ", hex(r->r13), "\n");
        print("r14     ", hex(r->r14), "\n");
        print("r15     ", hex(r->r15), "\n");
        print("rip     ", hex(r->rip), "\n");
        print("rflags  ", hex(r->eflags), "\n");
        print("cs      ", hex(r->segcs), "\n");
        print("fs      ", hex(r->segfs), "\n");
        print("gs      ", hex(r->seggs), "\n");
    }

    
    std::ostream& _DISPATCHER_CONTEXT::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << controlPc;
        os << " " << imageBase;
        os << " " << functionEntry;
        os << " " << establisherFrame;
        os << " " << targetIp;
        os << " " << context;
        os << " " << languageHandler;
        os << " " << handlerData;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct _DISPATCHER_CONTEXT& value)
    {
        return value.PrintTo(os);
    }

    context* ctx(struct _DISPATCHER_CONTEXT* c)
    {
        return c->context;
    }

}

