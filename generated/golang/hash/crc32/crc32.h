// generated by GoCpp from file '$(ImportDir)/hash/crc32/crc32.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/crc32/crc32.fwd.h"
#include "gocpp/support.h"

#include "golang/hash/crc32/crc32_generic.h"
#include "golang/sync/atomic/type.h"
#include "golang/sync/once.h"
#include "golang/hash/crc32/crc32_amd64.h"
#include "golang/hash/hash.h"
#include "golang/errors/errors.h"

namespace golang::crc32
{
    extern int Size;
    extern int IEEE;
    extern int Castagnoli;
    extern int Koopman;
    using Table = gocpp::array<uint32_t, 256>;
    void castagnoliInit();
    extern crc32.Table* IEEETable;
    void ieeeInit();
    Table* MakeTable(uint32_t poly);
    struct digest
    {
        uint32_t crc;
        Table* tab;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const digest& value);
    hash::Hash32 New(Table* tab);
    hash::Hash32 NewIEEE();
    int Size(digest* d);
    int BlockSize(digest* d);
    void Reset(digest* d);
    extern std::string magic;
    extern int marshaledSize;
    std::tuple<gocpp::slice<unsigned char>, std::string> MarshalBinary(digest* d);
    std::string UnmarshalBinary(digest* d, gocpp::slice<unsigned char> b);
    gocpp::slice<unsigned char> appendUint32(gocpp::slice<unsigned char> b, uint32_t x);
    uint32_t readUint32(gocpp::slice<unsigned char> b);
    uint32_t update(uint32_t crc, Table* tab, gocpp::slice<unsigned char> p, bool checkInitIEEE);
    uint32_t Update(uint32_t crc, Table* tab, gocpp::slice<unsigned char> p);
    std::tuple<int, std::string> Write(digest* d, gocpp::slice<unsigned char> p);
    uint32_t Sum32(digest* d);
    gocpp::slice<unsigned char> Sum(digest* d, gocpp::slice<unsigned char> in);
    uint32_t Checksum(gocpp::slice<unsigned char> data, Table* tab);
    uint32_t ChecksumIEEE(gocpp::slice<unsigned char> data);
    uint32_t tableSum(Table* t);
}

