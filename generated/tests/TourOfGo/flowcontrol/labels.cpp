// generated by GoCpp from file 'tests/TourOfGo/flowcontrol/labels.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/flowcontrol/labels.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    void main()
    {
        testGoTo();
        testFor(0);
        testFor(1);
        testFor(2);
        testRange(0);
        testRange(1);
        testRange(2);
    }

    void testFor(int k)
    {
        loop1:
        for(auto i = 0; i < 3; i++)
        {
            for(auto j = 0; j < 3; j++)
            {
                mocklib::Println("for", i, j);
                //Go switch emulation
                {
                    auto condition = k;
                    int conditionId = -1;
                    if(condition == 1) { conditionId = 0; }
                    else if(condition == 2) { conditionId = 1; }
                    switch(conditionId)
                    {
                        case 0:
                            goto loop1_break;
                            break;
                        case 1:
                            goto loop1_continue;
                            break;
                    }
                }
            }
            if(false) {
            loop1_continue:
                continue;
            loop1_break:
                break;
            }
        }
        mocklib::Println("end");
        mocklib::Println();
    }

    void testRange(int k)
    {
        loop1:
        for(auto [i, gocpp_ignored] : gocpp::slice<int> {0, 1, 2})
        {
            for(auto [j, gocpp_ignored] : gocpp::slice<int> {0, 1, 2})
            {
                mocklib::Println("range", i, j);
                //Go switch emulation
                {
                    auto condition = k;
                    int conditionId = -1;
                    if(condition == 1) { conditionId = 0; }
                    else if(condition == 2) { conditionId = 1; }
                    switch(conditionId)
                    {
                        case 0:
                            goto loop1_break;
                            break;
                        case 1:
                            goto loop1_continue;
                            break;
                    }
                }
            }
            if(false) {
            loop1_continue:
                continue;
            loop1_break:
                break;
            }
        }
        mocklib::Println("end");
        mocklib::Println();
    }

    void testGoTo()
    {
        auto i = 0;
        label1:
        i++;
        if(i < 5)
        {
            mocklib::Println("goto label1");
            goto label1;
        }
        label2:
        if(i < 10)
        {
            i++;
            mocklib::Println("goto label2");
            goto label2;
        }
        label3:
        for(auto j = 0; j < 10; j++)
        {
            i++;
            if(i < 15)
            {
                mocklib::Printf("goto label3, i = %v, j = %v\n", i, j);
                goto label3;
            }
            mocklib::Printf("............ i = %v, j = %v\n", i, j);
            if(false) {
            label3_continue:
                continue;
            label3_break:
                break;
            }
        }
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
