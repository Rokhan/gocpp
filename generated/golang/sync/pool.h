// generated by GoCpp from file '$(ImportDir)/sync/pool.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/pool.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
// #include "golang/sync/cond.h"  [Ignored, known errors]
#include "golang/sync/mutex.h"
#include "golang/sync/poolqueue.h"

namespace golang::sync
{
    struct Pool
    {
        /* noCopy noCopy; [Known incomplete type] */
        unsafe::Pointer local;
        uintptr_t localSize;
        unsafe::Pointer victim;
        uintptr_t victimSize;
        std::function<go_any ()> New;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Pool& value);
    struct poolLocalInternal
    {
        go_any go_private;
        poolChain shared;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct poolLocalInternal& value);
    struct poolLocal
    {
        gocpp::array<unsigned char, 128 - gocpp::Sizeof<poolLocalInternal>() % 128> pad;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct poolLocal& value);
    uint32_t runtime_randn(uint32_t n);
    unsafe::Pointer poolRaceAddr(go_any x);
    void Put(struct Pool* p, go_any x);
    go_any Get(struct Pool* p);
    go_any getSlow(struct Pool* p, int pid);
    std::tuple<struct poolLocal*, int> pin(struct Pool* p);
    std::tuple<struct poolLocal*, int> pinSlow(struct Pool* p);
    void poolCleanup();
    void init();
    struct poolLocal* indexLocal(unsafe::Pointer l, int i);
    void runtime_registerPoolCleanup(std::function<void ()> cleanup);
    int runtime_procPin();
    void runtime_procUnpin();
    uintptr_t runtime_LoadAcquintptr(uintptr_t* ptr);
    uintptr_t runtime_StoreReluintptr(uintptr_t* ptr, uintptr_t val);
}

