// generated by GoCpp from file '$(ImportDir)/runtime/runtime2.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const int _Gidle = 0;
    const int _Grunnable = 1;
    const int _Grunning = 2;
    const int _Gsyscall = 3;
    const int _Gwaiting = 4;
    const int _Gmoribund_unused = 5;
    const int _Gdead = 6;
    const int _Genqueue_unused = 7;
    const int _Gcopystack = 8;
    const int _Gpreempted = 9;
    const long _Gscan = 0x1000;
    const int _Pidle = 0;
    const int _Prunning = 1;
    const int _Psyscall = 2;
    const int _Pgcstop = 3;
    const int _Pdead = 4;
    struct note;
    struct funcval;
    using guintptr = uintptr_t;
    using puintptr = uintptr_t;
    using muintptr = uintptr_t;
    struct libcall;
    struct stack;
    const long gTrackingPeriod = 8;
    const long tlsSlots = 6;
    const long freeMStack = 0;
    const long freeMRef = 1;
    const long freeMWait = 2;
    const int _SigNotify = 1 << 0;
    const int _SigKill = 1 << 1;
    const int _SigThrow = 1 << 2;
    const int _SigPanic = 1 << 3;
    const int _SigDefault = 1 << 4;
    const int _SigGoExit = 1 << 5;
    const int _SigSetStack = 1 << 6;
    const int _SigUnblock = 1 << 7;
    const int _SigIgn = 1 << 8;
    struct funcinl;
    struct lfnode;
    struct savedOpenDeferState;
    struct ancestorInfo;
    using waitReason = uint8_t;
    const int _Gscanrunnable = _Gscan + _Grunnable;
    const int _Gscanrunning = _Gscan + _Grunning;
    const int _Gscansyscall = _Gscan + _Gsyscall;
    const int _Gscanwaiting = _Gscan + _Gwaiting;
    const int _Gscanpreempted = _Gscan + _Gpreempted;
    const waitReason waitReasonZero = 0;
    const waitReason waitReasonGCAssistMarking = 1;
    const waitReason waitReasonIOWait = 2;
    const waitReason waitReasonChanReceiveNilChan = 3;
    const waitReason waitReasonChanSendNilChan = 4;
    const waitReason waitReasonDumpingHeap = 5;
    const waitReason waitReasonGarbageCollection = 6;
    const waitReason waitReasonGarbageCollectionScan = 7;
    const waitReason waitReasonPanicWait = 8;
    const waitReason waitReasonSelect = 9;
    const waitReason waitReasonSelectNoCases = 10;
    const waitReason waitReasonGCAssistWait = 11;
    const waitReason waitReasonGCSweepWait = 12;
    const waitReason waitReasonGCScavengeWait = 13;
    const waitReason waitReasonChanReceive = 14;
    const waitReason waitReasonChanSend = 15;
    const waitReason waitReasonFinalizerWait = 16;
    const waitReason waitReasonForceGCIdle = 17;
    const waitReason waitReasonSemacquire = 18;
    const waitReason waitReasonSleep = 19;
    const waitReason waitReasonSyncCondWait = 20;
    const waitReason waitReasonSyncMutexLock = 21;
    const waitReason waitReasonSyncRWMutexRLock = 22;
    const waitReason waitReasonSyncRWMutexLock = 23;
    const waitReason waitReasonTraceReaderBlocked = 24;
    const waitReason waitReasonWaitForGCCycle = 25;
    const waitReason waitReasonGCWorkerIdle = 26;
    const waitReason waitReasonGCWorkerActive = 27;
    const waitReason waitReasonPreempted = 28;
    const waitReason waitReasonDebugCall = 29;
    const waitReason waitReasonGCMarkTermination = 30;
    const waitReason waitReasonStoppingTheWorld = 31;
    const waitReason waitReasonFlushProcCaches = 32;
    const waitReason waitReasonTraceGoroutineStatus = 33;
    const waitReason waitReasonTraceProcStatus = 34;
    const waitReason waitReasonPageTraceFlush = 35;
    const waitReason waitReasonCoroutine = 36;
}
// #include "golang/internal/abi/symtab.fwd.h" [Ignored, known errors]
#include "golang/internal/chacha8rand/chacha8.fwd.h"
#include "golang/internal/goarch/goarch.fwd.h"
// #include "golang/runtime/cgocall.fwd.h" [Ignored, known errors]
#include "golang/runtime/chan.fwd.h"
#include "golang/runtime/coro.fwd.h"
#include "golang/runtime/debuglog_off.fwd.h"
#include "golang/runtime/histogram.fwd.h"
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/internal/sys/nih.fwd.h"
// #include "golang/runtime/lockrank.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/malloc.fwd.h"
// #include "golang/runtime/mcache.fwd.h" [Ignored, known errors]
#include "golang/runtime/mgc.fwd.h"
// #include "golang/runtime/mgclimit.fwd.h" [Ignored, known errors]
#include "golang/runtime/mgcwork.fwd.h"
#include "golang/runtime/mheap.fwd.h"
#include "golang/runtime/mpagecache.fwd.h"
#include "golang/runtime/mprof.fwd.h"
#include "golang/runtime/mwbbuf.fwd.h"
// #include "golang/runtime/os_windows.fwd.h" [Ignored, known errors]
// #include "golang/runtime/pagetrace_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/panic.fwd.h"
#include "golang/runtime/pinner.fwd.h"
#include "golang/runtime/proc.fwd.h"
// #include "golang/runtime/signal_windows.fwd.h" [Ignored, known errors]
// #include "golang/runtime/symtab.fwd.h" [Ignored, known errors]
// #include "golang/runtime/time.fwd.h" [Ignored, known errors]
// #include "golang/runtime/trace2runtime.fwd.h" [Ignored, known errors]
#include "golang/runtime/type.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::runtime
{
    struct mutex;
    struct iface;
    struct eface;
    struct gobuf;
    struct sudog;
    struct heldLockInfo;
    struct g;
    const int tlsSize = tlsSlots * goarch::PtrSize;
    struct m;
    struct p;
    struct schedt;
    struct _func;
    struct itab;
    struct forcegcstate;
    struct _defer;
    struct _panic;
}
