// generated by GoCpp from file '$(ImportDir)/runtime/mranges.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mranges.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/mstats.h"

namespace golang::runtime
{
    struct addrRange makeAddrRange(uintptr_t base, uintptr_t limit);
    struct offAddr
    {
        uintptr_t a;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct offAddr& value);
    struct atomicOffAddr
    {
        atomic::Int64 a;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct atomicOffAddr& value);
    struct addrRange
    {
        /* offAddr base; [Known incomplete type] */
        /* offAddr limit; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct addrRange& value);
    extern offAddr minOffAddr;
    extern offAddr maxOffAddr;
    struct addrRanges
    {
        gocpp::slice<addrRange> ranges;
        uintptr_t totalBytes;
        golang::runtime::sysMemStat* sysStat;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct addrRanges& value);

    namespace rec
    {
        uintptr_t size(struct addrRange a);
        bool contains(struct addrRange a, uintptr_t addr);
        struct addrRange subtract(struct addrRange a, struct addrRange b);
        std::tuple<uintptr_t, bool> takeFromFront(struct addrRange* a, uintptr_t len, uint8_t align);
        std::tuple<uintptr_t, bool> takeFromBack(struct addrRange* a, uintptr_t len, uint8_t align);
        struct addrRange removeGreaterEqual(struct addrRange a, uintptr_t addr);
        struct offAddr add(struct offAddr l, uintptr_t bytes);
        struct offAddr sub(struct offAddr l, uintptr_t bytes);
        uintptr_t diff(struct offAddr l1, struct offAddr l2);
        bool lessThan(struct offAddr l1, struct offAddr l2);
        bool lessEqual(struct offAddr l1, struct offAddr l2);
        bool equal(struct offAddr l1, struct offAddr l2);
        uintptr_t addr(struct offAddr l);
        void Clear(struct atomicOffAddr* b);
        void StoreMin(struct atomicOffAddr* b, uintptr_t addr);
        void StoreUnmark(struct atomicOffAddr* b, uintptr_t markedAddr, uintptr_t newAddr);
        void StoreMarked(struct atomicOffAddr* b, uintptr_t addr);
        std::tuple<uintptr_t, bool> Load(struct atomicOffAddr* b);
        void init(struct addrRanges* a, golang::runtime::sysMemStat* sysStat);
        int findSucc(struct addrRanges* a, uintptr_t addr);
        std::tuple<uintptr_t, bool> findAddrGreaterEqual(struct addrRanges* a, uintptr_t addr);
        bool contains(struct addrRanges* a, uintptr_t addr);
        void add(struct addrRanges* a, struct addrRange r);
        struct addrRange removeLast(struct addrRanges* a, uintptr_t nBytes);
        void removeGreaterEqual(struct addrRanges* a, uintptr_t addr);
        void cloneInto(struct addrRanges* a, struct addrRanges* b);
    }
}

