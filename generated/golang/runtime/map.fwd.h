// generated by GoCpp from file '$(ImportDir)/runtime/map.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    const long loadFactorDen = 2;
    struct gocpp_id_0;
    const long emptyRest = 0;
    const long emptyOne = 1;
    const long evacuatedX = 2;
    const long evacuatedY = 3;
    const long evacuatedEmpty = 4;
    const long minTopHash = 5;
    const long iterator = 1;
    const long oldIterator = 2;
    const long hashWriting = 4;
    const long sameSizeGrow = 8;
    struct mapextra;
    struct bmap;
}
#include "golang/internal/abi/map.fwd.h"
#include "golang/internal/goarch/goarch.fwd.h"
#include "golang/runtime/type.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::runtime
{
    const int bucketCntBits = abi::MapBucketCountBits;
    const int bucketCnt = abi::MapBucketCount;
    const int maxKeySize = abi::MapMaxKeyBytes;
    const int maxElemSize = abi::MapMaxElemBytes;
    const uintptr_t dataOffset = unsafe::Offsetof(gocpp_id_0 {}.v);
    const int noCheck = (1 << (8 * goarch::PtrSize)) - 1;
    struct hmap;
    struct hiter;
    struct evacDst;
    const int loadFactorNum = loadFactorDen * bucketCnt * 13 / 16;
}
#include "golang/internal/abi/funcpc.fwd.h"
#include "golang/internal/abi/type.fwd.h"
// #include "golang/runtime/alg.fwd.h" [Ignored, known errors]
#include "golang/runtime/asan0.fwd.h"
#include "golang/runtime/error.fwd.h"
#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "golang/runtime/internal/math/math.fwd.h"
#include "golang/runtime/malloc.fwd.h"
#include "golang/runtime/map_faststr.fwd.h"
#include "golang/runtime/mbarrier.fwd.h"
#include "golang/runtime/msan0.fwd.h"
#include "golang/runtime/msize_allocheaders.fwd.h"
#include "golang/runtime/panic.fwd.h"
// #include "golang/runtime/race0.fwd.h" [Ignored, known errors]
// #include "golang/runtime/rand.fwd.h" [Ignored, known errors]
#include "golang/runtime/runtime2.fwd.h"
#include "golang/runtime/slice.fwd.h"
// #include "golang/runtime/stubs.fwd.h" [Ignored, known errors]
