// generated by GoCpp from file '$(ImportDir)/runtime/mprof.go'
#pragma once

#include "gocpp/support.fwd.h"

#include "golang/internal/abi/funcpc.fwd.h"
#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/internal/sys/consts.fwd.h"
#include "golang/runtime/internal/sys/nih.fwd.h"
#include "golang/runtime/asan0.fwd.h"
#include "golang/runtime/cputicks.fwd.h"
// #include "golang/runtime/lock_sema.fwd.h"  [Ignored, known errors]
// #include "golang/runtime/lockrank_off.fwd.h"  [Ignored, known errors]
#include "golang/runtime/malloc.fwd.h"
#include "golang/runtime/mem.fwd.h"
#include "golang/runtime/mfinal.fwd.h"
#include "golang/runtime/mheap.fwd.h"
#include "golang/runtime/msan0.fwd.h"
// #include "golang/runtime/os_windows.fwd.h"  [Ignored, known errors]
#include "golang/runtime/panic.fwd.h"
// #include "golang/runtime/print.fwd.h"  [Ignored, known errors]
#include "golang/runtime/proc.fwd.h"
// #include "golang/runtime/race0.fwd.h"  [Ignored, known errors]
// #include "golang/runtime/rand.fwd.h"  [Ignored, known errors]
#include "golang/runtime/runtime.fwd.h"
// #include "golang/runtime/runtime1.fwd.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.fwd.h"
#include "golang/runtime/sema.fwd.h"
// #include "golang/runtime/stubs.fwd.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.fwd.h"
// #include "golang/runtime/traceback.fwd.h"  [Ignored, known errors]
#include "golang/runtime/type.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::runtime
{
    struct BlockProfileRecord;
    struct MemProfileRecord;
    struct StackRecord;
    struct blockRecord;
    struct bucket;
    using bucketType = int;
    using buckhashArray = gocpp::array<atomic::UnsafePointer, buckHashSize>;
    using goroutineProfileState = uint32_t;
    using goroutineProfileStateHolder = atomic::Uint32;
    struct lockTimer;
    struct mLockProfile;
    struct mProfCycleHolder;
    struct memRecord;
    struct memRecordCycle;
}

