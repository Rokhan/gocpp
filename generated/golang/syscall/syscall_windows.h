// generated by GoCpp from file '$(ImportDir)/syscall/syscall_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/syscall_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"
#include "golang/syscall/dll_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::syscall
{
    gocpp::slice<uint16_t> StringToUTF16(std::string s);
    std::tuple<gocpp::slice<uint16_t>, struct gocpp::error> UTF16FromString(std::string s);
    std::string UTF16ToString(gocpp::slice<uint16_t> s);
    std::string utf16PtrToString(uint16_t* p);
    uint16_t* StringToUTF16Ptr(std::string s);
    std::tuple<uint16_t*, struct gocpp::error> UTF16PtrFromString(std::string s);
    uint32_t langid(uint16_t pri, uint16_t sub);
    std::tuple<uint32_t, struct gocpp::error> FormatMessage(uint32_t flags, uint32_t msgsrc, uint32_t msgid, uint32_t langid, gocpp::slice<uint16_t> buf, unsigned char* args);
    std::string Error(Errno e);
    bool Is(Errno e, struct gocpp::error target);
    bool Temporary(Errno e);
    bool Timeout(Errno e);
    uintptr_t compileCallback(go_any fn, bool cleanstack);
    uintptr_t NewCallback(go_any fn);
    uintptr_t NewCallbackCDecl(go_any fn);
    struct SecurityAttributes* makeInheritSa();
    std::tuple<Handle, struct gocpp::error> Open(std::string path, int mode, uint32_t perm);
    std::tuple<int, struct gocpp::error> Read(Handle fd, gocpp::slice<unsigned char> p);
    std::tuple<int, struct gocpp::error> Write(Handle fd, gocpp::slice<unsigned char> p);
    struct gocpp::error ReadFile(Handle fd, gocpp::slice<unsigned char> p, uint32_t* done, struct Overlapped* overlapped);
    struct gocpp::error WriteFile(Handle fd, gocpp::slice<unsigned char> p, uint32_t* done, struct Overlapped* overlapped);
    extern LazyProc* procSetFilePointerEx;
    struct gocpp::error setFilePointerEx(Handle handle, int64_t distToMove, int64_t* newFilePointer, uint32_t whence);
    std::tuple<int64_t, struct gocpp::error> Seek(Handle fd, int64_t offset, int whence);
    struct gocpp::error Close(Handle fd);
    extern Handle Stdin;
    extern Handle Stdout;
    extern Handle Stderr;
    Handle getStdHandle(int h);
    std::tuple<std::string, struct gocpp::error> Getwd();
    struct gocpp::error Chdir(std::string path);
    struct gocpp::error Mkdir(std::string path, uint32_t mode);
    struct gocpp::error Rmdir(std::string path);
    struct gocpp::error Unlink(std::string path);
    struct gocpp::error Rename(std::string oldpath, std::string newpath);
    std::tuple<std::string, struct gocpp::error> ComputerName();
    struct gocpp::error Ftruncate(Handle fd, int64_t length);
    struct gocpp::error Gettimeofday(struct Timeval* tv);
    struct gocpp::error Pipe(gocpp::slice<Handle> p);
    struct gocpp::error Utimes(std::string path, gocpp::slice<Timeval> tv);
    struct gocpp::error UtimesNano(std::string path, gocpp::slice<Timespec> ts);
    struct gocpp::error Fsync(Handle fd);
    struct gocpp::error Chmod(std::string path, uint32_t mode);
    struct gocpp::error LoadCancelIoEx();
    struct gocpp::error LoadSetFileCompletionNotificationModes();
    struct RawSockaddrInet4
    {
        uint16_t Family;
        uint16_t Port;
        gocpp::array<unsigned char, 4> Addr;
        gocpp::array<uint8_t, 8> Zero;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RawSockaddrInet4& value);
    struct RawSockaddrInet6
    {
        uint16_t Family;
        uint16_t Port;
        uint32_t Flowinfo;
        gocpp::array<unsigned char, 16> Addr;
        uint32_t Scope_id;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RawSockaddrInet6& value);
    struct RawSockaddr
    {
        uint16_t Family;
        gocpp::array<int8_t, 14> Data;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RawSockaddr& value);
    struct RawSockaddrAny
    {
        RawSockaddr Addr;
        gocpp::array<int8_t, 100> Pad;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RawSockaddrAny& value);
    struct Sockaddr : gocpp::Interface
    {
        Sockaddr(){}
        Sockaddr(Sockaddr& i) = default;
        Sockaddr(const Sockaddr& i) = default;
        Sockaddr& operator=(Sockaddr& i) = default;
        Sockaddr& operator=(const Sockaddr& i) = default;

        template<typename T>
        Sockaddr(T& ref);

        template<typename T>
        Sockaddr(const T& ref);

        template<typename T>
        Sockaddr(T* ptr);

        using isGoInterface = void;

        std::ostream& PrintTo(std::ostream& os) const;

        struct ISockaddr
        {
            virtual std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> vsockaddr() = 0;
        };

        template<typename T, typename StoreT>
        struct SockaddrImpl : ISockaddr
        {
            explicit SockaddrImpl(T* ptr)
            {
                value.reset(ptr);
            }

            std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> vsockaddr() override;

            StoreT value;
        };

        std::shared_ptr<ISockaddr> value;
    };

    std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> sockaddr(const gocpp::PtrRecv<Sockaddr, false>& self);
    std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> sockaddr(const gocpp::ObjRecv<Sockaddr>& self);

    std::ostream& operator<<(std::ostream& os, const struct Sockaddr& value);
    struct SockaddrInet4
    {
        int Port;
        gocpp::array<unsigned char, 4> Addr;
        RawSockaddrInet4 raw;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SockaddrInet4& value);
    std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> sockaddr(struct SockaddrInet4* sa);
    struct SockaddrInet6
    {
        int Port;
        uint32_t ZoneId;
        gocpp::array<unsigned char, 16> Addr;
        RawSockaddrInet6 raw;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SockaddrInet6& value);
    std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> sockaddr(struct SockaddrInet6* sa);
    struct RawSockaddrUnix
    {
        uint16_t Family;
        gocpp::array<int8_t, UNIX_PATH_MAX> Path;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct RawSockaddrUnix& value);
    struct SockaddrUnix
    {
        std::string Name;
        RawSockaddrUnix raw;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct SockaddrUnix& value);
    std::tuple<unsafe::Pointer, int32_t, struct gocpp::error> sockaddr(struct SockaddrUnix* sa);
    std::tuple<struct Sockaddr, struct gocpp::error> Sockaddr(struct RawSockaddrAny* rsa);
    std::tuple<Handle, struct gocpp::error> Socket(int domain, int typ, int proto);
    struct gocpp::error SetsockoptInt(Handle fd, int level, int opt, int value);
    struct gocpp::error Bind(Handle fd, struct Sockaddr sa);
    struct gocpp::error Connect(Handle fd, struct Sockaddr sa);
    std::tuple<struct Sockaddr, struct gocpp::error> Getsockname(Handle fd);
    std::tuple<struct Sockaddr, struct gocpp::error> Getpeername(Handle fd);
    struct gocpp::error Listen(Handle s, int n);
    struct gocpp::error Shutdown(Handle fd, int how);
    struct gocpp::error WSASendto(Handle s, struct WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, struct Sockaddr to, struct Overlapped* overlapped, unsigned char* croutine);
    struct gocpp::error wsaSendtoInet4(Handle s, struct WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, struct SockaddrInet4* to, struct Overlapped* overlapped, unsigned char* croutine);
    struct gocpp::error wsaSendtoInet6(Handle s, struct WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, struct SockaddrInet6* to, struct Overlapped* overlapped, unsigned char* croutine);
    struct gocpp::error LoadGetAddrInfo();
    struct gocpp::error LoadConnectEx();
    struct gocpp::error connectEx(Handle s, unsafe::Pointer name, int32_t namelen, unsigned char* sendBuf, uint32_t sendDataLen, uint32_t* bytesSent, struct Overlapped* overlapped);
    struct gocpp::error ConnectEx(Handle fd, struct Sockaddr sa, unsigned char* sendBuf, uint32_t sendDataLen, uint32_t* bytesSent, struct Overlapped* overlapped);
    struct Rusage
    {
        Filetime CreationTime;
        Filetime ExitTime;
        Filetime KernelTime;
        Filetime UserTime;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Rusage& value);
    struct WaitStatus
    {
        uint32_t ExitCode;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct WaitStatus& value);
    bool Exited(struct WaitStatus w);
    int ExitStatus(struct WaitStatus w);
    Signal Signal(struct WaitStatus w);
    bool CoreDump(struct WaitStatus w);
    bool Stopped(struct WaitStatus w);
    bool Continued(struct WaitStatus w);
    Signal StopSignal(struct WaitStatus w);
    bool Signaled(struct WaitStatus w);
    int TrapCause(struct WaitStatus w);
    struct Timespec
    {
        int64_t Sec;
        int64_t Nsec;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Timespec& value);
    int64_t TimespecToNsec(struct Timespec ts);
    struct Timespec NsecToTimespec(int64_t nsec);
    std::tuple<Handle, struct Sockaddr, struct gocpp::error> Accept(Handle fd);
    std::tuple<int, struct Sockaddr, struct gocpp::error> Recvfrom(Handle fd, gocpp::slice<unsigned char> p, int flags);
    struct gocpp::error Sendto(Handle fd, gocpp::slice<unsigned char> p, int flags, struct Sockaddr to);
    struct gocpp::error SetsockoptTimeval(Handle fd, int level, int opt, struct Timeval* tv);
    struct Linger
    {
        int32_t Onoff;
        int32_t Linger;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Linger& value);
    struct sysLinger
    {
        uint16_t Onoff;
        uint16_t Linger;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct sysLinger& value);
    struct IPMreq
    {
        gocpp::array<unsigned char, 4> Multiaddr;
        gocpp::array<unsigned char, 4> Interface;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct IPMreq& value);
    struct IPv6Mreq
    {
        gocpp::array<unsigned char, 16> Multiaddr;
        uint32_t Interface;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct IPv6Mreq& value);
    std::tuple<int, struct gocpp::error> GetsockoptInt(Handle fd, int level, int opt);
    struct gocpp::error SetsockoptLinger(Handle fd, int level, int opt, struct Linger* l);
    struct gocpp::error SetsockoptInet4Addr(Handle fd, int level, int opt, gocpp::array<unsigned char, 4> value);
    struct gocpp::error SetsockoptIPMreq(Handle fd, int level, int opt, struct IPMreq* mreq);
    struct gocpp::error SetsockoptIPv6Mreq(Handle fd, int level, int opt, struct IPv6Mreq* mreq);
    int Getpid();
    std::tuple<Handle, struct gocpp::error> FindFirstFile(uint16_t* name, struct Win32finddata* data);
    struct gocpp::error FindNextFile(Handle handle, struct Win32finddata* data);
    std::tuple<struct ProcessEntry32*, struct gocpp::error> getProcessEntry(int pid);
    int Getppid();
    std::tuple<gocpp::slice<uint16_t>, struct gocpp::error> fdpath(Handle fd, gocpp::slice<uint16_t> buf);
    struct gocpp::error Fchdir(Handle fd);
    struct gocpp::error Link(std::string oldpath, std::string newpath);
    struct gocpp::error Symlink(std::string path, std::string link);
    struct gocpp::error Fchmod(Handle fd, uint32_t mode);
    struct gocpp::error Chown(std::string path, int uid, int gid);
    struct gocpp::error Lchown(std::string path, int uid, int gid);
    struct gocpp::error Fchown(Handle fd, int uid, int gid);
    int Getuid();
    int Geteuid();
    int Getgid();
    int Getegid();
    std::tuple<gocpp::slice<int>, struct gocpp::error> Getgroups();
    void Signal(Signal s);
    std::string String(Signal s);
    struct gocpp::error LoadCreateSymbolicLink();
    std::tuple<int, struct gocpp::error> Readlink(std::string path, gocpp::slice<unsigned char> buf);
    std::tuple<Handle, struct gocpp::error> CreateIoCompletionPort(Handle filehandle, Handle cphandle, uint32_t key, uint32_t threadcnt);
    struct gocpp::error GetQueuedCompletionStatus(Handle cphandle, uint32_t* qty, uint32_t* key, struct Overlapped** overlapped, uint32_t timeout);
    struct gocpp::error PostQueuedCompletionStatus(Handle cphandle, uint32_t qty, uint32_t key, struct Overlapped* overlapped);
    std::tuple<struct _PROC_THREAD_ATTRIBUTE_LIST*, struct gocpp::error> newProcThreadAttributeList(uint32_t maxAttrCount);
    struct gocpp::error RegEnumKeyEx(Handle key, uint32_t index, uint16_t* name, uint32_t* nameLen, uint32_t* reserved, uint16_t* go_class, uint32_t* classLen, struct Filetime* lastWriteTime);
    struct gocpp::error GetStartupInfo(struct StartupInfo* startupInfo);
}

