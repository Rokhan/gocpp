// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/net_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/net_windows.h"
#include "gocpp/support.h"

#include "golang/sync/oncefunc.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::windows
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace sync::rec;
        using namespace syscall::rec;
    }

    struct gocpp::error WSASendtoInet4(syscall::Handle s, struct syscall::WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, struct syscall::SockaddrInet4* to, struct syscall::Overlapped* overlapped, unsigned char* croutine)
    /* convertBlockStmt, nil block */;

    struct gocpp::error WSASendtoInet6(syscall::Handle s, struct syscall::WSABuf* bufs, uint32_t bufcnt, uint32_t* sent, uint32_t flags, struct syscall::SockaddrInet6* to, struct syscall::Overlapped* overlapped, unsigned char* croutine)
    /* convertBlockStmt, nil block */;

    
    template<typename T> requires gocpp::GoStruct<T>
    TCP_INITIAL_RTO_PARAMETERS::operator T()
    {
        T result;
        result.Rtt = this->Rtt;
        result.MaxSynRetransmissions = this->MaxSynRetransmissions;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool TCP_INITIAL_RTO_PARAMETERS::operator==(const T& ref) const
    {
        if (Rtt != ref.Rtt) return false;
        if (MaxSynRetransmissions != ref.MaxSynRetransmissions) return false;
        return true;
    }

    std::ostream& TCP_INITIAL_RTO_PARAMETERS::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Rtt;
        os << " " << MaxSynRetransmissions;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct TCP_INITIAL_RTO_PARAMETERS& value)
    {
        return value.PrintTo(os);
    }

    std::function<bool (void)> Support_TCP_INITIAL_RTO_NO_SYN_RETRANSMISSIONS = sync::OnceValue([]() mutable -> bool
    {
        uint32_t maj = {};
        uint32_t min = {};
        uint32_t build = {};
        rtlGetNtVersionNumbers(& maj, & min, & build);
        return maj >= 10 && build & 0xffff >= 16299;
    });
    void rtlGetNtVersionNumbers(uint32_t* majorVersion, uint32_t* minorVersion, uint32_t* buildNumber)
    /* convertBlockStmt, nil block */;

}

