// generated by GoCpp from file '$(ImportDir)/sync/runtime.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/runtime.h"
#include "gocpp/support.h"

// #include "golang/sync/runtime2.h"  [Ignored, known errors]

namespace golang::sync
{
    void runtime_Semacquire(uint32_t* s)
    /* convertBlockStmt, nil block */;

    void runtime_SemacquireMutex(uint32_t* s, bool lifo, int skipframes)
    /* convertBlockStmt, nil block */;

    void runtime_SemacquireRWMutexR(uint32_t* s, bool lifo, int skipframes)
    /* convertBlockStmt, nil block */;

    void runtime_SemacquireRWMutex(uint32_t* s, bool lifo, int skipframes)
    /* convertBlockStmt, nil block */;

    void runtime_Semrelease(uint32_t* s, bool handoff, int skipframes)
    /* convertBlockStmt, nil block */;

    uint32_t runtime_notifyListAdd(notifyList* l)
    /* convertBlockStmt, nil block */;

    void runtime_notifyListWait(notifyList* l, uint32_t t)
    /* convertBlockStmt, nil block */;

    void runtime_notifyListNotifyAll(notifyList* l)
    /* convertBlockStmt, nil block */;

    void runtime_notifyListNotifyOne(notifyList* l)
    /* convertBlockStmt, nil block */;

    void runtime_notifyListCheck(uintptr_t size)
    /* convertBlockStmt, nil block */;

    void init()
    {
        notifyList n = {};
        runtime_notifyListCheck(gocpp::Sizeof<notifyList>());
    }

    bool runtime_canSpin(int i)
    /* convertBlockStmt, nil block */;

    void runtime_doSpin()
    /* convertBlockStmt, nil block */;

    int64_t runtime_nanotime()
    /* convertBlockStmt, nil block */;

}

