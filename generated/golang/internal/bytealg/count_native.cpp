// generated by GoCpp from file '$(ImportDir)/internal/bytealg/count_native.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/bytealg/count_native.h"
#include "gocpp/support.h"

namespace golang::bytealg
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    //go:noescape
    int Count(gocpp::slice<unsigned char> b, unsigned char c)
    /* convertBlockStmt, nil block */;

    //go:noescape
    int CountString(std::string s, unsigned char c)
    /* convertBlockStmt, nil block */;

    // A backup implementation to use by assembly.
    int countGeneric(gocpp::slice<unsigned char> b, unsigned char c)
    {
        auto n = 0;
        for(auto [gocpp_ignored, x] : b)
        {
            if(x == c)
            {
                n++;
            }
        }
        return n;
    }

    int countGenericString(std::string s, unsigned char c)
    {
        auto n = 0;
        for(auto i = 0; i < len(s); i++)
        {
            if(s[i] == c)
            {
                n++;
            }
        }
        return n;
    }

}

