// generated by GoCpp from file '$(ImportDir)/runtime/mpagecache.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mpagecache.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
// #include "golang/runtime/lockrank_off.h"  [Ignored, known errors]
// #include "golang/runtime/mgcscavenge.h"  [Ignored, known errors]
#include "golang/runtime/mpagealloc.h"
#include "golang/runtime/mpallocbits.h"
#include "golang/runtime/mranges.h"
#include "golang/runtime/mstats.h"
#include "golang/runtime/runtime2.h"

namespace golang::runtime
{
    struct pageCache
    {
        uintptr_t base;
        uint64_t cache;
        uint64_t scav;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct pageCache& value);

    namespace rec
    {
        bool empty(struct pageCache* c);
        std::tuple<uintptr_t, uintptr_t> alloc(struct pageCache* c, uintptr_t npages);
        std::tuple<uintptr_t, uintptr_t> allocN(struct pageCache* c, uintptr_t npages);
        void flush(struct pageCache* c, struct pageAlloc* p);
        struct pageCache allocToCache(struct pageAlloc* p);
    }
}

