// generated by GoCpp from file '$(ImportDir)/internal/cpu/cpu_x86.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/cpu/cpu_x86.h"
#include "gocpp/support.h"

#include "golang/internal/cpu/cpu.h"

namespace golang::cpu
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace cpu::rec;
    }

    std::tuple<uint32_t, uint32_t, uint32_t, uint32_t> cpuid(uint32_t eaxArg, uint32_t ecxArg)
    /* convertBlockStmt, nil block */;

    std::tuple<uint32_t, uint32_t> xgetbv()
    /* convertBlockStmt, nil block */;

    int32_t getGOAMD64level()
    /* convertBlockStmt, nil block */;

    uint32_t maxExtendedFunctionInformation;
    void doinit()
    {
        options = gocpp::slice<option> {gocpp::Init<>([=](auto& x) {
            x.Name = "adx";
            x.Feature = & X86.HasADX;
        }), gocpp::Init<>([=](auto& x) {
            x.Name = "aes";
            x.Feature = & X86.HasAES;
        }), gocpp::Init<>([=](auto& x) {
            x.Name = "erms";
            x.Feature = & X86.HasERMS;
        }), gocpp::Init<>([=](auto& x) {
            x.Name = "pclmulqdq";
            x.Feature = & X86.HasPCLMULQDQ;
        }), gocpp::Init<>([=](auto& x) {
            x.Name = "rdtscp";
            x.Feature = & X86.HasRDTSCP;
        }), gocpp::Init<>([=](auto& x) {
            x.Name = "sha";
            x.Feature = & X86.HasSHA;
        })};
        auto level = getGOAMD64level();
        if(level < 2)
        {
            options = append(options, gocpp::Init<option>([=](auto& x) {
                x.Name = "popcnt";
                x.Feature = & X86.HasPOPCNT;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "sse3";
                x.Feature = & X86.HasSSE3;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "sse41";
                x.Feature = & X86.HasSSE41;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "sse42";
                x.Feature = & X86.HasSSE42;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "ssse3";
                x.Feature = & X86.HasSSSE3;
            }));
        }
        if(level < 3)
        {
            options = append(options, gocpp::Init<option>([=](auto& x) {
                x.Name = "avx";
                x.Feature = & X86.HasAVX;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "avx2";
                x.Feature = & X86.HasAVX2;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "bmi1";
                x.Feature = & X86.HasBMI1;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "bmi2";
                x.Feature = & X86.HasBMI2;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "fma";
                x.Feature = & X86.HasFMA;
            }));
        }
        if(level < 4)
        {
            options = append(options, gocpp::Init<option>([=](auto& x) {
                x.Name = "avx512f";
                x.Feature = & X86.HasAVX512F;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "avx512bw";
                x.Feature = & X86.HasAVX512BW;
            }), gocpp::Init<option>([=](auto& x) {
                x.Name = "avx512vl";
                x.Feature = & X86.HasAVX512VL;
            }));
        }
        auto [maxID, gocpp_id_3, gocpp_id_4, gocpp_id_5] = cpuid(0, 0);
        if(maxID < 1)
        {
            return;
        }
        std::tie(maxExtendedFunctionInformation, gocpp_id_6, gocpp_id_7, gocpp_id_8) = cpuid(0x80000000, 0);
        auto [gocpp_id_12, gocpp_id_13, ecx1, gocpp_id_14] = cpuid(1, 0);
        X86.HasSSE3 = isSet(ecx1, cpuid_SSE3);
        X86.HasPCLMULQDQ = isSet(ecx1, cpuid_PCLMULQDQ);
        X86.HasSSSE3 = isSet(ecx1, cpuid_SSSE3);
        X86.HasSSE41 = isSet(ecx1, cpuid_SSE41);
        X86.HasSSE42 = isSet(ecx1, cpuid_SSE42);
        X86.HasPOPCNT = isSet(ecx1, cpuid_POPCNT);
        X86.HasAES = isSet(ecx1, cpuid_AES);
        X86.HasOSXSAVE = isSet(ecx1, cpuid_OSXSAVE);
        X86.HasFMA = isSet(ecx1, cpuid_FMA) && X86.HasOSXSAVE;
        auto osSupportsAVX = false;
        auto osSupportsAVX512 = false;
        if(X86.HasOSXSAVE)
        {
            auto [eax, gocpp_id_16] = xgetbv();
            osSupportsAVX = isSet(eax, 1 << 1) && isSet(eax, 1 << 2);
            osSupportsAVX512 = osSupportsAVX && isSet(eax, 1 << 5) && isSet(eax, 1 << 6) && isSet(eax, 1 << 7);
        }
        X86.HasAVX = isSet(ecx1, cpuid_AVX) && osSupportsAVX;
        if(maxID < 7)
        {
            return;
        }
        auto [gocpp_id_20, ebx7, gocpp_id_21, gocpp_id_22] = cpuid(7, 0);
        X86.HasBMI1 = isSet(ebx7, cpuid_BMI1);
        X86.HasAVX2 = isSet(ebx7, cpuid_AVX2) && osSupportsAVX;
        X86.HasBMI2 = isSet(ebx7, cpuid_BMI2);
        X86.HasERMS = isSet(ebx7, cpuid_ERMS);
        X86.HasADX = isSet(ebx7, cpuid_ADX);
        X86.HasSHA = isSet(ebx7, cpuid_SHA);
        X86.HasAVX512F = isSet(ebx7, cpuid_AVX512F) && osSupportsAVX512;
        if(X86.HasAVX512F)
        {
            X86.HasAVX512BW = isSet(ebx7, cpuid_AVX512BW);
            X86.HasAVX512VL = isSet(ebx7, cpuid_AVX512VL);
        }
        uint32_t maxExtendedInformation = {};
        std::tie(maxExtendedInformation, gocpp_id_23, gocpp_id_24, gocpp_id_25) = cpuid(0x80000000, 0);
        if(maxExtendedInformation < 0x80000001)
        {
            return;
        }
        auto [gocpp_id_29, gocpp_id_30, gocpp_id_31, edxExt1] = cpuid(0x80000001, 0);
        X86.HasRDTSCP = isSet(edxExt1, cpuid_RDTSCP);
    }

    bool isSet(uint32_t hwc, uint32_t value)
    {
        return hwc & value != 0;
    }

    std::string Name()
    {
        if(maxExtendedFunctionInformation < 0x80000004)
        {
            return "";
        }
        auto data = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), 0, 3 * 4 * 4);
        uint32_t eax = {};
        uint32_t ebx = {};
        uint32_t ecx = {};
        uint32_t edx = {};
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000002, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000003, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        std::tie(eax, ebx, ecx, edx) = cpuid(0x80000004, 0);
        data = appendBytes(data, eax, ebx, ecx, edx);
        for(; len(data) > 0 && data[0] == ' '; )
        {
            data = data.make_slice(1);
        }
        for(auto [i, c] : data)
        {
            if(c == '\x00')
            {
                data = data.make_slice(0, i);
                break;
            }
        }
        return string(data);
    }

    gocpp::slice<unsigned char> appendBytes(gocpp::slice<unsigned char> b, gocpp::slice<uint32_t> args)
    {
        for(auto [gocpp_ignored, arg] : args)
        {
            b = append(b, unsigned char((arg >> 0)), unsigned char((arg >> 8)), unsigned char((arg >> 16)), unsigned char((arg >> 24)));
        }
        return b;
    }

}

