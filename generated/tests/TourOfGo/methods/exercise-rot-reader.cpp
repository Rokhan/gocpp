// generated by GoCpp from file 'tests/TourOfGo/methods/exercise-rot-reader.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/methods/exercise-rot-reader.h"
#include "gocpp/support.h"

#include "golang/io/io.h"
#include "golang/strings/reader.h"

namespace golang::main
{
    
    std::ostream& rot13Reader::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << r;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct rot13Reader& value)
    {
        return value.PrintTo(os);
    }

    std::tuple<int, std::string> Read(struct rot13Reader r13, gocpp::slice<unsigned char> buf)
    {
        auto [n, err] = Read(gocpp::recv(r13.r), buf);
        if(err != nullptr)
        {
            return {n, err};
        }
        for(auto i = 0; i < n; i++)
        {
            buf[i] += 13;
        }
        return {n, nullptr};
    }

    void main()
    {
        auto s = strings::NewReader("Lbh penpxrq gur pbqr!");
        auto r = rot13Reader {s};
        io::Copy(os::Stdout, & r);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
