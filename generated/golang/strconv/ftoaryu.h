// generated by GoCpp from file '$(ImportDir)/strconv/ftoaryu.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strconv/ftoaryu.fwd.h"
#include "gocpp/support.h"

#include "golang/strconv/ftoa.h"

namespace golang::strconv
{
    void ryuFtoaFixed32(decimalSlice* d, uint32_t mant, int exp, int prec);
    void ryuFtoaFixed64(decimalSlice* d, uint64_t mant, int exp, int prec);
    extern gocpp::array_base<uint64_t> uint64pow10;
    void formatDecimal(decimalSlice* d, uint64_t m, bool trunc, bool roundUp, int prec);
    void ryuFtoaShortest(decimalSlice* d, uint64_t mant, int exp, floatInfo* flt);
    int mulByLog2Log10(int x);
    int mulByLog10Log2(int x);
    std::tuple<uint64_t, uint64_t, uint64_t, int> computeBounds(uint64_t mant, int exp, floatInfo* flt);
    void ryuDigits(decimalSlice* d, uint64_t lower, uint64_t central, uint64_t upper, bool c0, bool cup);
    void ryuDigits32(decimalSlice* d, uint32_t lower, uint32_t central, uint32_t upper, bool c0, bool cup, int endindex);
    std::tuple<uint32_t, int, bool> mult64bitPow10(uint32_t m, int e2, int q);
    std::tuple<uint64_t, int, bool> mult128bitPow10(uint64_t m, int e2, int q);
    bool divisibleByPower5(uint64_t m, int k);
    std::tuple<uint32_t, uint32_t> divmod1e9(uint64_t x);
}

