// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/registry/key.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/registry/key.fwd.h"
#include "gocpp/support.h"

#include "golang/syscall/types_windows.h"

namespace golang::registry
{
    struct gocpp::error Close(Key k);
    std::tuple<Key, struct gocpp::error> OpenKey(Key k, std::string path, uint32_t access);
    std::tuple<gocpp::slice<std::string>, struct gocpp::error> ReadSubKeyNames(Key k);
    std::tuple<Key, bool, struct gocpp::error> CreateKey(Key k, std::string path, uint32_t access);
    struct gocpp::error DeleteKey(Key k, std::string path);
    struct KeyInfo
    {
        uint32_t SubKeyCount;
        uint32_t MaxSubKeyLen;
        uint32_t ValueCount;
        uint32_t MaxValueNameLen;
        uint32_t MaxValueLen;
        syscall::Filetime lastWriteTime;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct KeyInfo& value);
    std::tuple<struct KeyInfo*, struct gocpp::error> Stat(Key k);
}

