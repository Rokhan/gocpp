// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/sysdll/sysdll.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/sysdll/sysdll.h"
#include "gocpp/support.h"

// Package sysdll is an internal leaf package that records and reports
// which Windows DLL names are used by Go itself. These DLLs are then
// only loaded from the System32 directory. See Issue 14959.
namespace golang::sysdll
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // IsSystemDLL reports whether the named dll key (a base name, like
    // "foo.dll") is a system DLL which should only be loaded from the
    // Windows SYSTEM32 directory.
    //
    // Filenames are case sensitive, but that doesn't matter because
    // the case registered with Add is also the same case used with
    // LoadDLL later.
    //
    // It has no associated mutex and should only be mutated serially
    // (currently: during init), and not concurrent with DLL loading.
    gocpp::map<std::string, bool> IsSystemDLL = gocpp::map<std::string, bool> {};
    // Add notes that dll is a system32 DLL which should only be loaded
    // from the Windows SYSTEM32 directory. It returns its argument back,
    // for ease of use in generated code.
    std::string Add(std::string dll)
    {
        IsSystemDLL[dll] = true;
        return dll;
    }

}

