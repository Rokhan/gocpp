// generated by GoCpp from file '$(ImportDir)/internal/syscall/windows/zsyscall_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/syscall/windows/zsyscall_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/syscall/windows/memory_windows.h"
#include "golang/internal/syscall/windows/psapi_windows.h"
#include "golang/internal/syscall/windows/security_windows.h"
#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/dll_windows.h"
#include "golang/syscall/security_windows.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"

namespace golang::windows
{
    extern gocpp::error errERROR_IO_PENDING;
    extern gocpp::error errERROR_EINVAL;
    struct gocpp::error errnoErr(syscall::Errno e);
    extern syscall::LazyDLL* modadvapi32;
    extern syscall::LazyDLL* modbcryptprimitives;
    extern syscall::LazyDLL* modiphlpapi;
    extern syscall::LazyDLL* modkernel32;
    extern syscall::LazyDLL* modnetapi32;
    extern syscall::LazyDLL* modpsapi;
    extern syscall::LazyDLL* moduserenv;
    extern syscall::LazyDLL* modws2_32;
    extern syscall::LazyProc* procAdjustTokenPrivileges;
    extern syscall::LazyProc* procDuplicateTokenEx;
    extern syscall::LazyProc* procImpersonateSelf;
    extern syscall::LazyProc* procLookupPrivilegeValueW;
    extern syscall::LazyProc* procOpenSCManagerW;
    extern syscall::LazyProc* procOpenServiceW;
    extern syscall::LazyProc* procOpenThreadToken;
    extern syscall::LazyProc* procQueryServiceStatus;
    extern syscall::LazyProc* procRevertToSelf;
    extern syscall::LazyProc* procSetTokenInformation;
    extern syscall::LazyProc* procProcessPrng;
    extern syscall::LazyProc* procGetAdaptersAddresses;
    extern syscall::LazyProc* procCreateEventW;
    extern syscall::LazyProc* procGetACP;
    extern syscall::LazyProc* procGetComputerNameExW;
    extern syscall::LazyProc* procGetConsoleCP;
    extern syscall::LazyProc* procGetCurrentThread;
    extern syscall::LazyProc* procGetFileInformationByHandleEx;
    extern syscall::LazyProc* procGetFinalPathNameByHandleW;
    extern syscall::LazyProc* procGetModuleFileNameW;
    extern syscall::LazyProc* procGetTempPath2W;
    extern syscall::LazyProc* procGetVolumeInformationByHandleW;
    extern syscall::LazyProc* procGetVolumeNameForVolumeMountPointW;
    extern syscall::LazyProc* procLockFileEx;
    extern syscall::LazyProc* procModule32FirstW;
    extern syscall::LazyProc* procModule32NextW;
    extern syscall::LazyProc* procMoveFileExW;
    extern syscall::LazyProc* procMultiByteToWideChar;
    extern syscall::LazyProc* procRtlLookupFunctionEntry;
    extern syscall::LazyProc* procRtlVirtualUnwind;
    extern syscall::LazyProc* procSetFileInformationByHandle;
    extern syscall::LazyProc* procUnlockFileEx;
    extern syscall::LazyProc* procVirtualQuery;
    extern syscall::LazyProc* procNetShareAdd;
    extern syscall::LazyProc* procNetShareDel;
    extern syscall::LazyProc* procNetUserGetLocalGroups;
    extern syscall::LazyProc* procGetProcessMemoryInfo;
    extern syscall::LazyProc* procCreateEnvironmentBlock;
    extern syscall::LazyProc* procDestroyEnvironmentBlock;
    extern syscall::LazyProc* procGetProfilesDirectoryW;
    extern syscall::LazyProc* procWSASocketW;
    std::tuple<uint32_t, struct gocpp::error> adjustTokenPrivileges(syscall::Token token, bool disableAllPrivileges, struct TOKEN_PRIVILEGES* newstate, uint32_t buflen, struct TOKEN_PRIVILEGES* prevstate, uint32_t* returnlen);
    struct gocpp::error DuplicateTokenEx(syscall::Token hExistingToken, uint32_t dwDesiredAccess, syscall::SecurityAttributes* lpTokenAttributes, uint32_t impersonationLevel, golang::windows::TokenType tokenType, syscall::Token* phNewToken);
    struct gocpp::error ImpersonateSelf(uint32_t impersonationlevel);
    struct gocpp::error LookupPrivilegeValue(uint16_t* systemname, uint16_t* name, struct LUID* luid);
    std::tuple<syscall::Handle, struct gocpp::error> OpenSCManager(uint16_t* machineName, uint16_t* databaseName, uint32_t access);
    std::tuple<syscall::Handle, struct gocpp::error> OpenService(syscall::Handle mgr, uint16_t* serviceName, uint32_t access);
    struct gocpp::error OpenThreadToken(syscall::Handle h, uint32_t access, bool openasself, syscall::Token* token);
    struct gocpp::error QueryServiceStatus(syscall::Handle hService, struct SERVICE_STATUS* lpServiceStatus);
    struct gocpp::error RevertToSelf();
    struct gocpp::error SetTokenInformation(syscall::Token tokenHandle, uint32_t tokenInformationClass, uintptr_t tokenInformation, uint32_t tokenInformationLength);
    struct gocpp::error ProcessPrng(gocpp::slice<unsigned char> buf);
    struct gocpp::error GetAdaptersAddresses(uint32_t family, uint32_t flags, uintptr_t reserved, struct IpAdapterAddresses* adapterAddresses, uint32_t* sizePointer);
    std::tuple<syscall::Handle, struct gocpp::error> CreateEvent(struct SecurityAttributes* eventAttrs, uint32_t manualReset, uint32_t initialState, uint16_t* name);
    uint32_t GetACP();
    struct gocpp::error GetComputerNameEx(uint32_t nameformat, uint16_t* buf, uint32_t* n);
    uint32_t GetConsoleCP();
    std::tuple<syscall::Handle, struct gocpp::error> GetCurrentThread();
    struct gocpp::error GetFileInformationByHandleEx(syscall::Handle handle, uint32_t go_class, unsigned char* info, uint32_t bufsize);
    std::tuple<uint32_t, struct gocpp::error> GetFinalPathNameByHandle(syscall::Handle file, uint16_t* filePath, uint32_t filePathSize, uint32_t flags);
    std::tuple<uint32_t, struct gocpp::error> GetModuleFileName(syscall::Handle module, uint16_t* fn, uint32_t len);
    std::tuple<uint32_t, struct gocpp::error> GetTempPath2(uint32_t buflen, uint16_t* buf);
    struct gocpp::error GetVolumeInformationByHandle(syscall::Handle file, uint16_t* volumeNameBuffer, uint32_t volumeNameSize, uint32_t* volumeNameSerialNumber, uint32_t* maximumComponentLength, uint32_t* fileSystemFlags, uint16_t* fileSystemNameBuffer, uint32_t fileSystemNameSize);
    struct gocpp::error GetVolumeNameForVolumeMountPoint(uint16_t* volumeMountPoint, uint16_t* volumeName, uint32_t bufferlength);
    struct gocpp::error LockFileEx(syscall::Handle file, uint32_t flags, uint32_t reserved, uint32_t bytesLow, uint32_t bytesHigh, syscall::Overlapped* overlapped);
    struct gocpp::error Module32First(syscall::Handle snapshot, struct ModuleEntry32* moduleEntry);
    struct gocpp::error Module32Next(syscall::Handle snapshot, struct ModuleEntry32* moduleEntry);
    struct gocpp::error MoveFileEx(uint16_t* from, uint16_t* to, uint32_t flags);
    std::tuple<int32_t, struct gocpp::error> MultiByteToWideChar(uint32_t codePage, uint32_t dwFlags, unsigned char* str, int32_t nstr, uint16_t* wchar, int32_t nwchar);
    uintptr_t RtlLookupFunctionEntry(uintptr_t pc, uintptr_t* baseAddress, unsigned char* table);
    uintptr_t RtlVirtualUnwind(uint32_t handlerType, uintptr_t baseAddress, uintptr_t pc, uintptr_t entry, uintptr_t ctxt, uintptr_t* data, uintptr_t* frame, unsigned char* ctxptrs);
    struct gocpp::error SetFileInformationByHandle(syscall::Handle handle, uint32_t fileInformationClass, unsafe::Pointer buf, uint32_t bufsize);
    struct gocpp::error UnlockFileEx(syscall::Handle file, uint32_t reserved, uint32_t bytesLow, uint32_t bytesHigh, syscall::Overlapped* overlapped);
    struct gocpp::error VirtualQuery(uintptr_t address, struct MemoryBasicInformation* buffer, uintptr_t length);
    struct gocpp::error NetShareAdd(uint16_t* serverName, uint32_t level, unsigned char* buf, uint16_t* parmErr);
    struct gocpp::error NetShareDel(uint16_t* serverName, uint16_t* netName, uint32_t reserved);
    struct gocpp::error NetUserGetLocalGroups(uint16_t* serverName, uint16_t* userName, uint32_t level, uint32_t flags, unsigned char** buf, uint32_t prefMaxLen, uint32_t* entriesRead, uint32_t* totalEntries);
    struct gocpp::error GetProcessMemoryInfo(syscall::Handle handle, struct PROCESS_MEMORY_COUNTERS* memCounters, uint32_t cb);
    struct gocpp::error CreateEnvironmentBlock(uint16_t** block, syscall::Token token, bool inheritExisting);
    struct gocpp::error DestroyEnvironmentBlock(uint16_t* block);
    struct gocpp::error GetProfilesDirectory(uint16_t* dir, uint32_t* dirLen);
    std::tuple<syscall::Handle, struct gocpp::error> WSASocket(int32_t af, int32_t typ, int32_t protocol, syscall::WSAProtocolInfo* protinfo, uint32_t group, uint32_t flags);

    namespace rec
    {
    }
}

