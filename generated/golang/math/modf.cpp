// generated by GoCpp from file '$(ImportDir)/math/modf.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/modf.h"
#include "gocpp/support.h"

#include "golang/math/bits.h"
#include "golang/math/modf_noasm.h"
#include "golang/math/unsafe.h"

namespace golang::math
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    // Modf returns integer and fractional floating-point numbers
    // that sum to f. Both values have the same sign as f.
    //
    // Special cases are:
    //
    //	Modf(±Inf) = ±Inf, NaN
    //	Modf(NaN) = NaN, NaN
    std::tuple<double, double> Modf(double f)
    {
        double int;
        double frac;
        if(haveArchModf)
        {
            return archModf(f);
        }
        return modf(f);
    }

    std::tuple<double, double> modf(double f)
    {
        double int;
        double frac;
        if(f < 1)
        {
            //Go switch emulation
            {
                int conditionId = -1;
                if(f < 0) { conditionId = 0; }
                else if(f == 0) { conditionId = 1; }
                switch(conditionId)
                {
                    case 0:
                        std::tie(int, frac) = Modf(- f);
                        return {- int, - frac};
                        break;
                    case 1:
                        return {f, f};
                        break;
                }
            }
            return {0, f};
        }
        auto x = Float64bits(f);
        auto e = (unsigned int)(x >> shift) & mask - bias;
        if(e < 64 - 12)
        {
            x &^= (1 << (64 - 12 - e)) - 1;
        }
        int = Float64frombits(x);
        frac = f - int;
        return {int, frac};
    }

}

