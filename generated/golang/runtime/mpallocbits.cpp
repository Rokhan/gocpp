// generated by GoCpp from file '$(ImportDir)/runtime/mpallocbits.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mpallocbits.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/mpagealloc.h"

namespace golang::runtime
{
    unsigned int get(pageBits* b, unsigned int i)
    {
        return (unsigned int)((b[i / 64] >> (i % 64)) & 1);
    }

    uint64_t block64(pageBits* b, unsigned int i)
    {
        return b[i / 64];
    }

    void set(pageBits* b, unsigned int i)
    {
        b[i / 64] |= 1 << (i % 64);
    }

    void setRange(pageBits* b, unsigned int i, unsigned int n)
    {
        _ = b[i / 64];
        if(n == 1)
        {
            set(gocpp::recv(b), i);
            return;
        }
        auto j = i + n - 1;
        if(i / 64 == j / 64)
        {
            b[i / 64] |= ((uint64_t(1) << n) - 1) << (i % 64);
            return;
        }
        _ = b[j / 64];
        b[i / 64] |= ^ uint64_t(0) << (i % 64);
        for(auto k = i / 64 + 1; k < j / 64; k++)
        {
            b[k] = ^ uint64_t(0);
        }
        b[j / 64] |= (uint64_t(1) << (j % 64 + 1)) - 1;
    }

    void setAll(pageBits* b)
    {
        for(auto [i, gocpp_ignored] : b)
        {
            b[i] = ^ uint64_t(0);
        }
    }

    void setBlock64(pageBits* b, unsigned int i, uint64_t v)
    {
        b[i / 64] |= v;
    }

    void clear(pageBits* b, unsigned int i)
    {
        b[i / 64] &^= 1 << (i % 64);
    }

    void clearRange(pageBits* b, unsigned int i, unsigned int n)
    {
        _ = b[i / 64];
        if(n == 1)
        {
            clear(gocpp::recv(b), i);
            return;
        }
        auto j = i + n - 1;
        if(i / 64 == j / 64)
        {
            b[i / 64] &^= ((uint64_t(1) << n) - 1) << (i % 64);
            return;
        }
        _ = b[j / 64];
        b[i / 64] &^= ^ uint64_t(0) << (i % 64);
        for(auto k = i / 64 + 1; k < j / 64; k++)
        {
            b[k] = 0;
        }
        b[j / 64] &^= (uint64_t(1) << (j % 64 + 1)) - 1;
    }

    void clearAll(pageBits* b)
    {
        for(auto [i, gocpp_ignored] : b)
        {
            b[i] = 0;
        }
    }

    void clearBlock64(pageBits* b, unsigned int i, uint64_t v)
    {
        b[i / 64] &^= v;
    }

    unsigned int popcntRange(pageBits* b, unsigned int i, unsigned int n)
    {
        unsigned int s;
        if(n == 1)
        {
            unsigned int s;
            return (unsigned int)((b[i / 64] >> (i % 64)) & 1);
        }
        _ = b[i / 64];
        auto j = i + n - 1;
        if(i / 64 == j / 64)
        {
            unsigned int s;
            return (unsigned int)(OnesCount64(gocpp::recv(sys), (b[i / 64] >> (i % 64)) & ((1 << n) - 1)));
        }
        _ = b[j / 64];
        s += (unsigned int)(OnesCount64(gocpp::recv(sys), b[i / 64] >> (i % 64)));
        for(auto k = i / 64 + 1; k < j / 64; k++)
        {
            unsigned int s;
            s += (unsigned int)(OnesCount64(gocpp::recv(sys), b[k]));
        }
        s += (unsigned int)(OnesCount64(gocpp::recv(sys), b[j / 64] & ((1 << (j % 64 + 1)) - 1)));
        return s;
    }

    pallocSum summarize(pallocBits* b)
    {
        unsigned int start = {};
        unsigned int most = {};
        unsigned int cur = {};
        auto notSetYet = ^ (unsigned int)(0);
        start = notSetYet;
        for(auto i = 0; i < len(b); i++)
        {
            auto x = b[i];
            if(x == 0)
            {
                cur += 64;
                continue;
            }
            auto t = (unsigned int)(TrailingZeros64(gocpp::recv(sys), x));
            auto l = (unsigned int)(LeadingZeros64(gocpp::recv(sys), x));
            cur += t;
            if(start == notSetYet)
            {
                start = cur;
            }
            most = max(most, cur);
            cur = l;
        }
        if(start == notSetYet)
        {
            auto n = (unsigned int)(64 * len(b));
            return packPallocSum(n, n, n);
        }
        most = max(most, cur);
        if(most >= 64 - 2)
        {
            return packPallocSum(start, most, cur);
        }
        for(auto i = 0; i < len(b); i++)
        {
            auto x = b[i];
            x >>= TrailingZeros64(gocpp::recv(sys), x) & 63;
            if(x & (x + 1) == 0)
            {
                continue;
            }
            auto p = most;
            auto k = (unsigned int)(1);
            for(; ; )
            {
                for(; p > 0; )
                {
                    if(p <= k)
                    {
                        x |= x >> (p & 63);
                        if(x & (x + 1) == 0)
                        {
                            goto outer_continue;
                        }
                        break;
                    }
                    x |= x >> (k & 63);
                    if(x & (x + 1) == 0)
                    {
                        goto outer_continue;
                    }
                    p -= k;
                    k *= 2;
                }
                auto j = (unsigned int)(TrailingZeros64(gocpp::recv(sys), ^ x));
                x >>= j & 63;
                j = (unsigned int)(TrailingZeros64(gocpp::recv(sys), x));
                x >>= j & 63;
                most += j;
                if(x & (x + 1) == 0)
                {
                    goto outer_continue;
                }
                p = j;
            }
            if(false) {
            outer_continue:
                continue;
            outer_break:
                break;
            }
        }
        return packPallocSum(start, most, cur);
    }

    std::tuple<unsigned int, unsigned int> find(pallocBits* b, uintptr_t npages, unsigned int searchIdx)
    {
        if(npages == 1)
        {
            auto addr = find1(gocpp::recv(b), searchIdx);
            return {addr, addr};
        }
        else
        if(npages <= 64)
        {
            return findSmallN(gocpp::recv(b), npages, searchIdx);
        }
        return findLargeN(gocpp::recv(b), npages, searchIdx);
    }

    unsigned int find1(pallocBits* b, unsigned int searchIdx)
    {
        _ = b[0];
        for(auto i = searchIdx / 64; i < (unsigned int)(len(b)); i++)
        {
            auto x = b[i];
            if(^ x == 0)
            {
                continue;
            }
            return i * 64 + (unsigned int)(TrailingZeros64(gocpp::recv(sys), ^ x));
        }
        return ^ (unsigned int)(0);
    }

    std::tuple<unsigned int, unsigned int> findSmallN(pallocBits* b, uintptr_t npages, unsigned int searchIdx)
    {
        auto [end, newSearchIdx] = std::tuple{(unsigned int)(0), ^ (unsigned int)(0)};
        for(auto i = searchIdx / 64; i < (unsigned int)(len(b)); i++)
        {
            auto bi = b[i];
            if(^ bi == 0)
            {
                end = 0;
                continue;
            }
            if(newSearchIdx == ^ (unsigned int)(0))
            {
                newSearchIdx = i * 64 + (unsigned int)(TrailingZeros64(gocpp::recv(sys), ^ bi));
            }
            auto start = (unsigned int)(TrailingZeros64(gocpp::recv(sys), bi));
            if(end + start >= (unsigned int)(npages))
            {
                return {i * 64 - end, newSearchIdx};
            }
            auto j = findBitRange64(^ bi, (unsigned int)(npages));
            if(j < 64)
            {
                return {i * 64 + j, newSearchIdx};
            }
            end = (unsigned int)(LeadingZeros64(gocpp::recv(sys), bi));
        }
        return {^ (unsigned int)(0), newSearchIdx};
    }

    std::tuple<unsigned int, unsigned int> findLargeN(pallocBits* b, uintptr_t npages, unsigned int searchIdx)
    {
        auto [start, size, newSearchIdx] = std::tuple{^ (unsigned int)(0), (unsigned int)(0), ^ (unsigned int)(0)};
        for(auto i = searchIdx / 64; i < (unsigned int)(len(b)); i++)
        {
            auto x = b[i];
            if(x == ^ uint64_t(0))
            {
                size = 0;
                continue;
            }
            if(newSearchIdx == ^ (unsigned int)(0))
            {
                newSearchIdx = i * 64 + (unsigned int)(TrailingZeros64(gocpp::recv(sys), ^ x));
            }
            if(size == 0)
            {
                size = (unsigned int)(LeadingZeros64(gocpp::recv(sys), x));
                start = i * 64 + 64 - size;
                continue;
            }
            auto s = (unsigned int)(TrailingZeros64(gocpp::recv(sys), x));
            if(s + size >= (unsigned int)(npages))
            {
                size += s;
                return {start, newSearchIdx};
            }
            if(s < 64)
            {
                size = (unsigned int)(LeadingZeros64(gocpp::recv(sys), x));
                start = i * 64 + 64 - size;
                continue;
            }
            size += 64;
        }
        if(size < (unsigned int)(npages))
        {
            return {^ (unsigned int)(0), newSearchIdx};
        }
        return {start, newSearchIdx};
    }

    void allocRange(pallocBits* b, unsigned int i, unsigned int n)
    {
        setRange(gocpp::recv((*pageBits)(b)), i, n);
    }

    void allocAll(pallocBits* b)
    {
        setAll(gocpp::recv((*pageBits)(b)));
    }

    void free1(pallocBits* b, unsigned int i)
    {
        clear(gocpp::recv((*pageBits)(b)), i);
    }

    void free(pallocBits* b, unsigned int i, unsigned int n)
    {
        clearRange(gocpp::recv((*pageBits)(b)), i, n);
    }

    void freeAll(pallocBits* b)
    {
        clearAll(gocpp::recv((*pageBits)(b)));
    }

    uint64_t pages64(pallocBits* b, unsigned int i)
    {
        return block64(gocpp::recv((*pageBits)(b)), i);
    }

    void allocPages64(pallocBits* b, unsigned int i, uint64_t alloc)
    {
        setBlock64(gocpp::recv((*pageBits)(b)), i, alloc);
    }

    unsigned int findBitRange64(uint64_t c, unsigned int n)
    {
        auto p = n - 1;
        auto k = (unsigned int)(1);
        for(; p > 0; )
        {
            if(p <= k)
            {
                c &= c >> (p & 63);
                break;
            }
            c &= c >> (k & 63);
            if(c == 0)
            {
                return 64;
            }
            p -= k;
            k *= 2;
        }
        return (unsigned int)(TrailingZeros64(gocpp::recv(sys), c));
    }

    
    std::ostream& pallocData::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << scavenged;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const pallocData& value)
    {
        return value.PrintTo(os);
    }

    void allocRange(pallocData* m, unsigned int i, unsigned int n)
    {
        allocRange(gocpp::recv(m->pallocBits), i, n);
        clearRange(gocpp::recv(m->scavenged), i, n);
    }

    void allocAll(pallocData* m)
    {
        allocAll(gocpp::recv(m->pallocBits));
        clearAll(gocpp::recv(m->scavenged));
    }

}

