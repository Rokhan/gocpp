// generated by GoCpp from file '$(ImportDir)/encoding/base64/base64.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/encoding/base64/base64.fwd.h"
#include "gocpp/support.h"

#include "golang/io/io.h"

namespace golang::base64
{
    struct Encoding
    {
        gocpp::array<unsigned char, 64> encode;
        gocpp::array<uint8_t, 256> decodeMap;
        gocpp::rune padChar;
        bool strict;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Encoding& value);
    extern std::string decodeMapInitialize;
    struct Encoding* NewEncoding(std::string encoder);
    struct Encoding* WithPadding(struct Encoding enc, gocpp::rune padding);
    struct Encoding* Strict(struct Encoding enc);
    extern Encoding* StdEncoding;
    extern Encoding* URLEncoding;
    extern Encoding* RawStdEncoding;
    extern Encoding* RawURLEncoding;
    void Encode(struct Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    gocpp::slice<unsigned char> AppendEncode(struct Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::string EncodeToString(struct Encoding* enc, gocpp::slice<unsigned char> src);
    struct encoder
    {
        gocpp::error err;
        Encoding* enc;
        io::Writer w;
        gocpp::array<unsigned char, 3> buf;
        int nbuf;
        gocpp::array<unsigned char, 1024> out;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct encoder& value);
    std::tuple<int, struct gocpp::error> Write(struct encoder* e, gocpp::slice<unsigned char> p);
    struct gocpp::error Close(struct encoder* e);
    struct io::WriteCloser NewEncoder(struct Encoding* enc, struct io::Writer w);
    int EncodedLen(struct Encoding* enc, int n);
    std::string Error(CorruptInputError e);
    std::tuple<int, int, struct gocpp::error> decodeQuantum(struct Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src, int si);
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> AppendDecode(struct Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> DecodeString(struct Encoding* enc, std::string s);
    struct decoder
    {
        gocpp::error err;
        gocpp::error readErr;
        Encoding* enc;
        io::Reader r;
        gocpp::array<unsigned char, 1024> buf;
        int nbuf;
        gocpp::slice<unsigned char> out;
        gocpp::array<unsigned char, 1024 / 4 * 3> outbuf;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct decoder& value);
    std::tuple<int, struct gocpp::error> Read(struct decoder* d, gocpp::slice<unsigned char> p);
    std::tuple<int, struct gocpp::error> Decode(struct Encoding* enc, gocpp::slice<unsigned char> dst, gocpp::slice<unsigned char> src);
    std::tuple<uint32_t, bool> assemble32(unsigned char n1, unsigned char n2, unsigned char n3, unsigned char n4);
    std::tuple<uint64_t, bool> assemble64(unsigned char n1, unsigned char n2, unsigned char n3, unsigned char n4, unsigned char n5, unsigned char n6, unsigned char n7, unsigned char n8);
    struct newlineFilteringReader
    {
        io::Reader wrapped;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct newlineFilteringReader& value);
    std::tuple<int, struct gocpp::error> Read(struct newlineFilteringReader* r, gocpp::slice<unsigned char> p);
    struct io::Reader NewDecoder(struct Encoding* enc, struct io::Reader r);
    int DecodedLen(struct Encoding* enc, int n);
    int decodedLen(int n, gocpp::rune padChar);
}

