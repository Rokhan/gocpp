// generated by GoCpp from file '$(ImportDir)/sync/once.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/once.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"

namespace golang::sync
{
    namespace rec
    {
        using namespace mocklib::rec;
        using atomic::rec::Load;
        using atomic::rec::Store;
    }

    // Once is an object that will perform exactly one action.
    //
    // A Once must not be copied after first use.
    //
    // In the terminology of the Go memory model,
    // the return from f “synchronizes before”
    // the return from any call of once.Do(f).
    
    template<typename T> requires gocpp::GoStruct<T>
    Once::operator T()
    {
        T result;
        result.done = this->done;
        result.m = this->m;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Once::operator==(const T& ref) const
    {
        if (done != ref.done) return false;
        if (m != ref.m) return false;
        return true;
    }

    std::ostream& Once::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << done;
        os << " " << m;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Once& value)
    {
        return value.PrintTo(os);
    }

    // Do calls the function f if and only if Do is being called for the
    // first time for this instance of Once. In other words, given
    //
    //	var once Once
    //
    // if once.Do(f) is called multiple times, only the first call will invoke f,
    // even if f has a different value in each invocation. A new instance of
    // Once is required for each function to execute.
    //
    // Do is intended for initialization that must be run exactly once. Since f
    // is niladic, it may be necessary to use a function literal to capture the
    // arguments to a function to be invoked by Do:
    //
    //	config.once.Do(func() { config.init(filename) })
    //
    // Because no call to Do returns until the one call to f returns, if f causes
    // Do to be called, it will deadlock.
    //
    // If f panics, Do considers it to have returned; future calls of Do return
    // without calling f.
    void rec::Do(struct Once* o, std::function<void ()> f)
    {
        if(rec::Load(gocpp::recv(o->done)) == 0)
        {
            rec::doSlow(gocpp::recv(o), f);
        }
    }

    void rec::doSlow(struct Once* o, std::function<void ()> f)
    {
        gocpp::Defer defer;
        try
        {
            rec::Lock(gocpp::recv(o->m));
            defer.push_back([=]{ rec::Unlock(gocpp::recv(o->m)); });
            if(rec::Load(gocpp::recv(o->done)) == 0)
            {
                defer.push_back([=]{ rec::Store(gocpp::recv(o->done), 1); });
                f();
            }
        }
        catch(gocpp::GoPanic& gp)
        {
            defer.handlePanic(gp);
        }
    }

}

