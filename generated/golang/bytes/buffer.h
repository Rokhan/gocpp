// generated by GoCpp from file '$(ImportDir)/bytes/buffer.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/bytes/buffer.fwd.h"
#include "gocpp/support.h"

#include "golang/io/io.h"

namespace golang::bytes
{
    struct Buffer
    {
        gocpp::slice<unsigned char> buf;
        int off;
        golang::bytes::readOp lastRead;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Buffer& value);
    extern gocpp::error ErrTooLarge;
    extern gocpp::error errNegativeRead;
    extern gocpp::error errUnreadByte;
    gocpp::slice<unsigned char> growSlice(gocpp::slice<unsigned char> b, int n);
    struct Buffer* NewBuffer(gocpp::slice<unsigned char> buf);
    struct Buffer* NewBufferString(std::string s);

    namespace rec
    {
        gocpp::slice<unsigned char> Bytes(struct Buffer* b);
        gocpp::slice<unsigned char> AvailableBuffer(struct Buffer* b);
        std::string String(struct Buffer* b);
        bool empty(struct Buffer* b);
        int Len(struct Buffer* b);
        int Cap(struct Buffer* b);
        int Available(struct Buffer* b);
        void Truncate(struct Buffer* b, int n);
        void Reset(struct Buffer* b);
        std::tuple<int, bool> tryGrowByReslice(struct Buffer* b, int n);
        int grow(struct Buffer* b, int n);
        void Grow(struct Buffer* b, int n);
        std::tuple<int, struct gocpp::error> Write(struct Buffer* b, gocpp::slice<unsigned char> p);
        std::tuple<int, struct gocpp::error> WriteString(struct Buffer* b, std::string s);
        std::tuple<int64_t, struct gocpp::error> ReadFrom(struct Buffer* b, io::Reader r);
        std::tuple<int64_t, struct gocpp::error> WriteTo(struct Buffer* b, io::Writer w);
        struct gocpp::error WriteByte(struct Buffer* b, unsigned char c);
        std::tuple<int, struct gocpp::error> WriteRune(struct Buffer* b, gocpp::rune r);
        std::tuple<int, struct gocpp::error> Read(struct Buffer* b, gocpp::slice<unsigned char> p);
        gocpp::slice<unsigned char> Next(struct Buffer* b, int n);
        std::tuple<unsigned char, struct gocpp::error> ReadByte(struct Buffer* b);
        std::tuple<gocpp::rune, int, struct gocpp::error> ReadRune(struct Buffer* b);
        struct gocpp::error UnreadRune(struct Buffer* b);
        struct gocpp::error UnreadByte(struct Buffer* b);
        std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> ReadBytes(struct Buffer* b, unsigned char delim);
        std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> readSlice(struct Buffer* b, unsigned char delim);
        std::tuple<std::string, struct gocpp::error> ReadString(struct Buffer* b, unsigned char delim);
    }
}

