// generated by GoCpp from file '$(ImportDir)/math/ldexp.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/math/ldexp.h"
#include "gocpp/support.h"

#include "golang/math/bits.h"
#include "golang/math/unsafe.h"
#include "golang/math/stubs.h"
#include "golang/math/copysign.h"

namespace golang::math
{
    double Ldexp(double frac, int exp)
    {
        if(haveArchLdexp)
        {
            return archLdexp(frac, exp);
        }
        return ldexp(frac, exp);
    }

    double ldexp(double frac, int exp)
    {
        //Go switch emulation
        {
            int conditionId = -1;
            if(frac == 0) { conditionId = 0; }
            else if(IsInf(frac, 0) || IsNaN(frac)) { conditionId = 1; }
            switch(conditionId)
            {
                case 0:
                    return frac;
                    break;
                case 1:
                    return frac;
                    break;
            }
        }
        auto [frac, e] = normalize(frac);
        exp += e;
        auto x = Float64bits(frac);
        exp += int(x >> shift) & mask - bias;
        if(exp < - 1075)
        {
            return Copysign(0, frac);
        }
        if(exp > 1023)
        {
            if(frac < 0)
            {
                return Inf(- 1);
            }
            return Inf(1);
        }
        double m = 1;
        if(exp < - 1022)
        {
            exp += 53;
            m = 1.0 / (1 << 53);
        }
        x &^= mask << shift;
        x |= uint64_t(exp + bias) << shift;
        return m * Float64frombits(x);
    }

}

