// generated by GoCpp from file '$(ImportDir)/strconv/itoa.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/strconv/itoa.h"
#include "gocpp/support.h"

#include "golang/math/bits/bits.h"

namespace golang::strconv
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    std::string FormatUint(uint64_t i, int base)
    {
        if(fastSmalls && i < nSmalls && base == 10)
        {
            return small(int(i));
        }
        auto [gocpp_id_1, s] = formatBits(nullptr, i, base, false, false);
        return s;
    }

    std::string FormatInt(int64_t i, int base)
    {
        if(fastSmalls && 0 <= i && i < nSmalls && base == 10)
        {
            return small(int(i));
        }
        auto [gocpp_id_3, s] = formatBits(nullptr, uint64_t(i), base, i < 0, false);
        return s;
    }

    std::string Itoa(int i)
    {
        return FormatInt(int64_t(i), 10);
    }

    gocpp::slice<unsigned char> AppendInt(gocpp::slice<unsigned char> dst, int64_t i, int base)
    {
        if(fastSmalls && 0 <= i && i < nSmalls && base == 10)
        {
            return append(dst, small(int(i)));
        }
        std::tie(dst, gocpp_id_4) = formatBits(dst, uint64_t(i), base, i < 0, true);
        return dst;
    }

    gocpp::slice<unsigned char> AppendUint(gocpp::slice<unsigned char> dst, uint64_t i, int base)
    {
        if(fastSmalls && i < nSmalls && base == 10)
        {
            return append(dst, small(int(i)));
        }
        std::tie(dst, gocpp_id_5) = formatBits(dst, i, base, false, true);
        return dst;
    }

    std::string small(int i)
    {
        if(i < 10)
        {
            return digits.make_slice(i, i + 1);
        }
        return smallsString.make_slice(i * 2, i * 2 + 2);
    }

    std::string smallsString = "00010203040506070809" + "10111213141516171819" + "20212223242526272829" + "30313233343536373839" + "40414243444546474849" + "50515253545556575859" + "60616263646566676869" + "70717273747576777879" + "80818283848586878889" + "90919293949596979899";
    std::string digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    std::tuple<gocpp::slice<unsigned char>, std::string> formatBits(gocpp::slice<unsigned char> dst, uint64_t u, int base, bool neg, bool append_)
    {
        gocpp::slice<unsigned char> d;
        std::string s;
        if(base < 2 || base > len(digits))
        {
            gocpp::panic("strconv: illegal AppendInt/FormatInt base");
        }
        gocpp::array<unsigned char, 64 + 1> a = {};
        auto i = len(a);
        if(neg)
        {
            u = - u;
        }
        if(base == 10)
        {
            if(host32bit)
            {
                for(; u >= 1e9; )
                {
                    auto q = u / 1e9;
                    auto us = (unsigned int)(u - q * 1e9);
                    for(auto j = 4; j > 0; j--)
                    {
                        auto is = us % 100 * 2;
                        us /= 100;
                        i -= 2;
                        a[i + 1] = smallsString[is + 1];
                        a[i + 0] = smallsString[is + 0];
                    }
                    i--;
                    a[i] = smallsString[us * 2 + 1];
                    u = q;
                }
            }
            auto us = (unsigned int)(u);
            for(; us >= 100; )
            {
                auto is = us % 100 * 2;
                us /= 100;
                i -= 2;
                a[i + 1] = smallsString[is + 1];
                a[i + 0] = smallsString[is + 0];
            }
            auto is = us * 2;
            i--;
            a[i] = smallsString[is + 1];
            if(us >= 10)
            {
                i--;
                a[i] = smallsString[is];
            }
        }
        else
        if(isPowerOfTwo(base))
        {
            auto shift = (unsigned int)(bits::TrailingZeros((unsigned int)(base))) & 7;
            auto b = uint64_t(base);
            auto m = (unsigned int)(base) - 1;
            for(; u >= b; )
            {
                i--;
                a[i] = digits[(unsigned int)(u) & m];
                u >>= shift;
            }
            i--;
            a[i] = digits[(unsigned int)(u)];
        }
        else
        {
            auto b = uint64_t(base);
            for(; u >= b; )
            {
                i--;
                auto q = u / b;
                a[i] = digits[(unsigned int)(u - q * b)];
                u = q;
            }
            i--;
            a[i] = digits[(unsigned int)(u)];
        }
        if(neg)
        {
            i--;
            a[i] = '-';
        }
        if(append_)
        {
            d = append(dst, a.make_slice(i));
            return {d, s};
        }
        s = std::string(a.make_slice(i));
        return {d, s};
    }

    bool isPowerOfTwo(int x)
    {
        return x & (x - 1) == 0;
    }

}

