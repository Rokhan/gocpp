// generated by GoCpp from file '$(ImportDir)/sync/map.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/sync/map.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"

namespace golang::sync
{
    struct Map
    {
        Mutex mu;
        atomic::Pointer<readOnly> read;
        gocpp::map<go_any, entry*> dirty;
        int misses;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Map& value);
    struct readOnly
    {
        gocpp::map<go_any, entry*> m;
        bool amended;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct readOnly& value);
    extern go_any* expunged;
    struct entry
    {
        atomic::Pointer<go_any> p;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct entry& value);
    entry* newEntry(go_any i);
    readOnly loadReadOnly(struct Map* m);
    std::tuple<go_any, bool> Load(struct Map* m, go_any key);
    std::tuple<go_any, bool> load(struct entry* e);
    void Store(struct Map* m, go_any key, go_any value);
    bool tryCompareAndSwap(struct entry* e, go_any old, go_any go_new);
    bool unexpungeLocked(struct entry* e);
    go_any* swapLocked(struct entry* e, go_any* i);
    std::tuple<go_any, bool> LoadOrStore(struct Map* m, go_any key, go_any value);
    std::tuple<go_any, bool, bool> tryLoadOrStore(struct entry* e, go_any i);
    std::tuple<go_any, bool> LoadAndDelete(struct Map* m, go_any key);
    void Delete(struct Map* m, go_any key);
    std::tuple<go_any, bool> go_delete(struct entry* e);
    std::tuple<go_any*, bool> trySwap(struct entry* e, go_any* i);
    std::tuple<go_any, bool> Swap(struct Map* m, go_any key, go_any value);
    bool CompareAndSwap(struct Map* m, go_any key, go_any old, go_any go_new);
    bool CompareAndDelete(struct Map* m, go_any key, go_any old);
    void Range(struct Map* m, std::function<bool (go_any key, go_any value)> f);
    void missLocked(struct Map* m);
    void dirtyLocked(struct Map* m);
    bool tryExpungeLocked(struct entry* e);
}

