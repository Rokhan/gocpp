// generated by GoCpp from file '$(ImportDir)/syscall/wtf8_windows.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/syscall/wtf8_windows.h"
#include "gocpp/support.h"

#include "golang/unicode/utf16/utf16.h"
#include "golang/unicode/utf8/utf8.h"

namespace golang::syscall
{
    namespace rec
    {
        using namespace mocklib::rec;
    }

    gocpp::slice<uint16_t> encodeWTF16(std::string s, gocpp::slice<uint16_t> buf)
    {
        for(auto i = 0; i < len(s); )
        {
            auto [r, size] = utf8::DecodeRuneInString(s.make_slice(i));
            if(r == utf8::RuneError)
            {
                if(auto sc = s.make_slice(i); len(sc) >= 3 && sc[0] == 0xED && 0xA0 <= sc[1] && sc[1] <= 0xBF && 0x80 <= sc[2] && sc[2] <= 0xBF)
                {
                    r = (gocpp::rune(sc[0] & mask3) << 12) + (gocpp::rune(sc[1] & maskx) << 6) + gocpp::rune(sc[2] & maskx);
                    buf = append(buf, uint16_t(r));
                    i += 3;
                    continue;
                }
            }
            i += size;
            buf = utf16::AppendRune(buf, r);
        }
        return buf;
    }

    gocpp::slice<unsigned char> decodeWTF16(gocpp::slice<uint16_t> s, gocpp::slice<unsigned char> buf)
    {
        for(auto i = 0; i < len(s); i++)
        {
            gocpp::rune ar = {};
            //Go switch emulation
            {
                auto r = s[i];
                int conditionId = -1;
                if(r < surr1) { conditionId = 0; }
                if(surr3 <= r) { conditionId = 1; }
                else if(surr1 <= r && r < surr2 && i + 1 < len(s) && surr2 <= s[i + 1] && s[i + 1] < surr3) { conditionId = 2; }
                switch(conditionId)
                {
                    case 0:
                    case 1:
                        ar = gocpp::rune(r);
                        break;
                    case 2:
                        ar = utf16::DecodeRune(gocpp::rune(r), gocpp::rune(s[i + 1]));
                        i++;
                        break;
                    default:
                        ar = gocpp::rune(r);
                        if(ar > utf8::MaxRune)
                        {
                            ar = utf8::RuneError;
                        }
                        buf = append(buf, t3 | (unsigned char)(ar >> 12), tx | (unsigned char)(ar >> 6) & maskx, tx | (unsigned char)(ar) & maskx);
                        continue;
                        break;
                }
            }
            buf = utf8::AppendRune(buf, ar);
        }
        return buf;
    }

}

