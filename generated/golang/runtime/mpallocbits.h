// generated by GoCpp from file '$(ImportDir)/runtime/mpallocbits.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/mpallocbits.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/mpagealloc.h"

namespace golang::runtime
{
    unsigned int findBitRange64(uint64_t c, unsigned int n);
    struct pallocData
    {
        golang::runtime::pallocBits pallocBits;
        golang::runtime::pageBits scavenged;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct pallocData& value);

    namespace rec
    {
        unsigned int get(golang::runtime::pageBits* b, unsigned int i);
        uint64_t block64(golang::runtime::pageBits* b, unsigned int i);
        void set(golang::runtime::pageBits* b, unsigned int i);
        void setRange(golang::runtime::pageBits* b, unsigned int i, unsigned int n);
        void setAll(golang::runtime::pageBits* b);
        void setBlock64(golang::runtime::pageBits* b, unsigned int i, uint64_t v);
        void clear(golang::runtime::pageBits* b, unsigned int i);
        void clearRange(golang::runtime::pageBits* b, unsigned int i, unsigned int n);
        void clearAll(golang::runtime::pageBits* b);
        void clearBlock64(golang::runtime::pageBits* b, unsigned int i, uint64_t v);
        unsigned int popcntRange(golang::runtime::pageBits* b, unsigned int i, unsigned int n);
        runtime::pallocSum summarize(golang::runtime::pallocBits* b);
        std::tuple<unsigned int, unsigned int> find(golang::runtime::pallocBits* b, uintptr_t npages, unsigned int searchIdx);
        unsigned int find1(golang::runtime::pallocBits* b, unsigned int searchIdx);
        std::tuple<unsigned int, unsigned int> findSmallN(golang::runtime::pallocBits* b, uintptr_t npages, unsigned int searchIdx);
        std::tuple<unsigned int, unsigned int> findLargeN(golang::runtime::pallocBits* b, uintptr_t npages, unsigned int searchIdx);
        void allocRange(golang::runtime::pallocBits* b, unsigned int i, unsigned int n);
        void allocAll(golang::runtime::pallocBits* b);
        void free1(golang::runtime::pallocBits* b, unsigned int i);
        void free(golang::runtime::pallocBits* b, unsigned int i, unsigned int n);
        void freeAll(golang::runtime::pallocBits* b);
        uint64_t pages64(golang::runtime::pallocBits* b, unsigned int i);
        void allocPages64(golang::runtime::pallocBits* b, unsigned int i, uint64_t alloc);
        void allocRange(struct pallocData* m, unsigned int i, unsigned int n);
        void allocAll(struct pallocData* m);
    }
}

