// generated by GoCpp from file '$(ImportDir)/reflect/type.go'
#pragma once

#include "gocpp/support.fwd.h"

#include "golang/internal/abi/funcpc.fwd.h"
#include "golang/internal/abi/map.fwd.h"
#include "golang/internal/abi/type.fwd.h"
// #include "golang/internal/goarch/goarch.fwd.h"  [Ignored, known errors]
#include "golang/reflect/abi.fwd.h"
#include "golang/reflect/value.fwd.h"
#include "golang/strconv/itoa.fwd.h"
#include "golang/strconv/quote.fwd.h"
#include "golang/sync/map.fwd.h"
#include "golang/sync/mutex.fwd.h"
// #include "golang/sync/pool.fwd.h"  [Ignored, known errors]
#include "golang/unicode/utf8/utf8.fwd.h"
#include "golang/unicode/digit.fwd.h"
#include "golang/unicode/graphic.fwd.h"
#include "golang/unsafe/unsafe.fwd.h"

namespace golang::reflect
{
    using arrayType = abi::ArrayType;
    using chanType = abi::ChanType;
    using funcType = abi::FuncType;
    using aNameOff = abi::NameOff;
    using structField = abi::StructField;
    using aTextOff = abi::TextOff;
    using aTypeOff = abi::TypeOff;
    using uncommonType = abi::UncommonType;
    using ChanDir = int;
    using Kind = unsigned int;
    struct Method;
    struct StructField;
    using StructTag = std::string;
    struct Type;
    struct bitVector;
    struct cacheKey;
    struct common;
    struct fieldScan;
    struct interfaceType;
    struct layoutKey;
    struct layoutType;
    struct mapType;
    struct ptrType;
    struct rtype;
    struct sliceType;
    struct structType;
    struct structTypeUncommon;
}

