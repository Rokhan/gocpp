// generated by GoCpp from file '$(ImportDir)/image/png/reader.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/image/png/reader.fwd.h"
#include "gocpp/support.h"

#include "golang/compress/zlib/reader.h"
#include "golang/encoding/binary/binary.h"
// #include "golang/fmt/print.h"  [Ignored, known errors]
#include "golang/hash/crc32/crc32.h"
#include "golang/hash/hash.h"
#include "golang/image/color/color.h"
#include "golang/image/png/paeth.h"
#include "golang/image/format.h"
#include "golang/image/geom.h"
#include "golang/image/image.h"
// #include "golang/io/io.h"  [Ignored, known errors]

namespace golang::png
{
    extern int ctGrayscale;
    extern int ctTrueColor;
    extern int ctPaletted;
    extern int ctGrayscaleAlpha;
    extern int ctTrueColorAlpha;
    extern int cbInvalid;
    extern int cbG1;
    extern int cbG2;
    extern int cbG4;
    extern int cbG8;
    extern int cbGA8;
    extern int cbTC8;
    extern int cbP1;
    extern int cbP2;
    extern int cbP4;
    extern int cbP8;
    extern int cbTCA8;
    extern int cbG16;
    extern int cbGA16;
    extern int cbTC16;
    extern int cbTCA16;
    bool cbPaletted(int cb);
    bool cbTrueColor(int cb);
    extern int ftNone;
    extern int ftSub;
    extern int ftUp;
    extern int ftAverage;
    extern int ftPaeth;
    extern int nFilter;
    extern int itNone;
    extern int itAdam7;
    struct interlaceScan
    {
        int xFactor;
        int yFactor;
        int xOffset;
        int yOffset;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const interlaceScan& value);
    extern gocpp::slice<interlaceScan> interlacing;
    extern int dsStart;
    extern int dsSeenIHDR;
    extern int dsSeenPLTE;
    extern int dsSeentRNS;
    extern int dsSeenIDAT;
    extern int dsSeenIEND;
    extern std::string pngHeader;
    struct decoder
    {
        io::Reader r;
        image::Image img;
        hash::Hash32 crc;
        int width;
        int height;
        int depth;
        color::Palette palette;
        int cb;
        int stage;
        uint32_t idatLength;
        gocpp::array<unsigned char, 3 * 256> tmp;
        int interlace;
        bool useTransparent;
        gocpp::array<unsigned char, 6> transparent;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const decoder& value);
    std::string Error(FormatError e);
    extern png.FormatError chunkOrderError;
    std::string Error(UnsupportedError e);
    std::string parseIHDR(decoder* d, uint32_t length);
    std::string parsePLTE(decoder* d, uint32_t length);
    std::string parsetRNS(decoder* d, uint32_t length);
    std::tuple<int, std::string> Read(decoder* d, gocpp::slice<unsigned char> p);
    std::tuple<image::Image, std::string> decode(decoder* d);
    std::tuple<image::Image, std::string> readImagePass(decoder* d, io::Reader r, int pass, bool allocateOnly);
    void mergePassInto(decoder* d, image::Image dst, image::Image src, int pass);
    std::string parseIDAT(decoder* d, uint32_t length);
    std::string parseIEND(decoder* d, uint32_t length);
    std::string parseChunk(decoder* d, bool configOnly);
    std::string verifyChecksum(decoder* d);
    std::string checkHeader(decoder* d);
    std::tuple<image::Image, std::string> Decode(io::Reader r);
    std::tuple<image::Config, std::string> DecodeConfig(io::Reader r);
    void init();
}

