// generated by GoCpp from file 'tests/TourOfGo/methods/interfaces-are-satisfied-implicitly.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/methods/interfaces-are-satisfied-implicitly.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"

namespace golang::main
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fmt::rec;
    }

    
    template<typename T>
    I::I(T& ref)
    {
        value.reset(new IImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    I::I(const T& ref)
    {
        value.reset(new IImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    I::I(T* ptr)
    {
        value.reset(new IImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& I::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    void I::IImpl<T, StoreT>::vM()
    {
        return rec::M(gocpp::PtrRecv<T, false>(value.get()));
    }

    namespace rec
    {
        void M(const gocpp::PtrRecv<I, false>& self)
        {
            return self.ptr->value->vM();
        }

        void M(const gocpp::ObjRecv<I>& self)
        {
            return self.obj.value->vM();
        }
    }

    std::ostream& operator<<(std::ostream& os, const struct I& value)
    {
        return value.PrintTo(os);
    }

    
    template<typename U> requires gocpp::GoStruct<U>
    T::operator U()
    {
        U result;
        result.S = this->S;
        return result;
    }

    template<typename U> requires gocpp::GoStruct<U>
    bool T::operator==(const U& ref) const
    {
        if (S != ref.S) return false;
        return true;
    }

    std::ostream& T::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << S;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct T& value)
    {
        return value.PrintTo(os);
    }

    void rec::M(struct T t)
    {
        mocklib::Println(t.S);
    }

    void main()
    {
        I i = T {"hello"};
        rec::M(gocpp::recv(i));
        auto t = T {"hello"};
        I j = t;
        rec::M(gocpp::recv(j));
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
