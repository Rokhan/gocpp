// generated by GoCpp from file '$(ImportDir)/hash/adler32/adler32.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/adler32/adler32.fwd.h"
#include "gocpp/support.h"

#include "golang/hash/hash.h"
#include "golang/io/io.h"

namespace golang::adler32
{
    extern std::string magic;
    hash::Hash32 New();
    gocpp::slice<unsigned char> appendUint32(gocpp::slice<unsigned char> b, uint32_t x);
    uint32_t readUint32(gocpp::slice<unsigned char> b);
    adler32::digest update(golang::adler32::digest d, gocpp::slice<unsigned char> p);
    uint32_t Checksum(gocpp::slice<unsigned char> data);

    namespace rec
    {
        void Reset(golang::adler32::digest* d);
        int Size(golang::adler32::digest* d);
        int BlockSize(golang::adler32::digest* d);
        std::tuple<gocpp::slice<unsigned char>, struct gocpp::error> MarshalBinary(golang::adler32::digest* d);
        struct gocpp::error UnmarshalBinary(golang::adler32::digest* d, gocpp::slice<unsigned char> b);
        std::tuple<int, struct gocpp::error> Write(golang::adler32::digest* d, gocpp::slice<unsigned char> p);
        uint32_t Sum32(golang::adler32::digest* d);
        gocpp::slice<unsigned char> Sum(golang::adler32::digest* d, gocpp::slice<unsigned char> in);
    }
}

