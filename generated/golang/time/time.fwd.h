// generated by GoCpp from file '$(ImportDir)/time/time.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::time
{
    const int hasMonotonic = 1 << 63;
    const int nsecMask = (1 << 30) - 1;
    const long nsecShift = 30;
    using Month = int;
    using Weekday = int;
    const long absoluteZeroYear = - 292277022399;
    const long internalYear = 1;
    using Duration = int64_t;
    const long secondsPerMinute = 60;
    const int daysPer400Years = 365 * 400 + 97;
    const int daysPer100Years = 365 * 100 + 24;
    const int daysPer4Years = 365 * 4 + 1;
    const unsigned char timeBinaryVersionV1 = 0 + 1;
    const unsigned char timeBinaryVersionV2 = 1 + 1;
    const time::Month January = 1 + 0;
    const time::Month February = 1 + 1;
    const time::Month March = 1 + 2;
    const time::Month April = 1 + 3;
    const time::Month May = 1 + 4;
    const time::Month June = 1 + 5;
    const time::Month July = 1 + 6;
    const time::Month August = 1 + 7;
    const time::Month September = 1 + 8;
    const time::Month October = 1 + 9;
    const time::Month November = 1 + 10;
    const time::Month December = 1 + 11;
    const time::Weekday Sunday = 0;
    const time::Weekday Monday = 1;
    const time::Weekday Tuesday = 2;
    const time::Weekday Wednesday = 3;
    const time::Weekday Thursday = 4;
    const time::Weekday Friday = 5;
    const time::Weekday Saturday = 6;
    const time::Duration minDuration = - 1 << 63;
    const time::Duration maxDuration = (1 << 63) - 1;
    const time::Duration Nanosecond = 1;
    const int secondsPerHour = 60 * secondsPerMinute;
}
#include "golang/time/zoneinfo.fwd.h"

namespace golang::time
{
    struct Time;
    const Duration Microsecond = 1000 * Nanosecond;
    const int secondsPerDay = 24 * secondsPerHour;
    const int64_t absoluteToInternal = (absoluteZeroYear - internalYear) * 365.2425 * secondsPerDay;
    const int64_t unixToInternal = (1969 * 365 + 1969 / 4 - 1969 / 100 + 1969 / 400) * secondsPerDay;
    const int64_t wallToInternal = (1884 * 365 + 1884 / 4 - 1884 / 100 + 1884 / 400) * secondsPerDay;
    const Duration Millisecond = 1000 * Microsecond;
    const int secondsPerWeek = 7 * secondsPerDay;
    const int64_t maxWall = wallToInternal + ((1 << 33) - 1);
    const int64_t minWall = wallToInternal;
    const int64_t internalToAbsolute = - absoluteToInternal;
    const int64_t internalToUnix = - unixToInternal;
    const Duration Second = 1000 * Millisecond;
    const Duration Minute = 60 * Second;
    const Duration Hour = 60 * Minute;
}
