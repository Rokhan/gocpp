// generated by GoCpp from file '$(ImportDir)/runtime/mgcsweep.go'
#pragma once

#include "gocpp/support.fwd.h"


namespace golang::runtime
{
    using sweepClass = uint32_t;
    const int sweepDrainedMask = 1 << 31;
    struct sweepLocker;
    const sweepClass sweepClassDone = sweepClass(~ uint32_t(0));
}
#include "golang/runtime/internal/atomic/types.fwd.h"
#include "golang/runtime/mheap.fwd.h"
#include "golang/runtime/runtime2.fwd.h"

namespace golang::runtime
{
    struct sweepdata;
    const int numSweepClasses = numSpanClasses * 2;
    struct activeSweep;
    struct sweepLocked;
}
#include "golang/internal/abi/type.fwd.h"
#include "golang/internal/goexperiment/exp_allocheaders_on.fwd.h"
#include "golang/runtime/asan0.fwd.h"
#include "golang/runtime/internal/atomic/atomic_amd64.fwd.h"
#include "golang/runtime/internal/atomic/stubs.fwd.h"
// #include "golang/runtime/lock_sema.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank.fwd.h" [Ignored, known errors]
// #include "golang/runtime/lockrank_off.fwd.h" [Ignored, known errors]
#include "golang/runtime/malloc.fwd.h"
#include "golang/runtime/mbitmap.fwd.h"
#include "golang/runtime/mcentral.fwd.h"
#include "golang/runtime/mem.fwd.h"
// #include "golang/runtime/mgcscavenge.fwd.h" [Ignored, known errors]
#include "golang/runtime/mgcwork.fwd.h"
#include "golang/runtime/mprof.fwd.h"
#include "golang/runtime/msan0.fwd.h"
#include "golang/runtime/mspanset.fwd.h"
#include "golang/runtime/mstats.fwd.h"
// #include "golang/runtime/os_windows.fwd.h" [Ignored, known errors]
#include "golang/runtime/panic.fwd.h"
#include "golang/runtime/pinner.fwd.h"
// #include "golang/runtime/print.fwd.h" [Ignored, known errors]
#include "golang/runtime/proc.fwd.h"
// #include "golang/runtime/race0.fwd.h" [Ignored, known errors]
// #include "golang/runtime/stubs.fwd.h" [Ignored, known errors]
// #include "golang/runtime/trace2runtime.fwd.h" [Ignored, known errors]
#include "golang/unsafe/unsafe.fwd.h"
