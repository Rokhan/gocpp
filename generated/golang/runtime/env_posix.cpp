// generated by GoCpp from file '$(ImportDir)/runtime/env_posix.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/env_posix.h"
#include "gocpp/support.h"

#include "golang/runtime/extern.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/runtime1.h"  [Ignored, known errors]
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    std::string gogetenv(std::string key)
    {
        auto env = environ();
        if(env == nullptr)
        {
            go_throw("getenv before env init");
        }
        for(auto [gocpp_ignored, s] : env)
        {
            if(len(s) > len(key) && s[len(key)] == '=' && envKeyEqual(s.make_slice(0, len(key)), key))
            {
                return s.make_slice(len(key) + 1);
            }
        }
        return "";
    }

    bool envKeyEqual(std::string a, std::string b)
    {
        if(GOOS == "windows")
        {
            for(auto i = 0; i < len(a); i++)
            {
                auto [ca, cb] = std::tuple{a[i], b[i]};
                if(ca == cb || lowerASCII(ca) == lowerASCII(cb))
                {
                    continue;
                }
                return false;
            }
            return true;
        }
        return a == b;
    }

    unsigned char lowerASCII(unsigned char c)
    {
        if('A' <= c && c <= 'Z')
        {
            return c + ('a' - 'A');
        }
        return c;
    }

    unsafe::Pointer _cgo_setenv;
    unsafe::Pointer _cgo_unsetenv;
    void setenv_c(std::string k, std::string v)
    {
        if(_cgo_setenv == nullptr)
        {
            return;
        }
        auto arg = gocpp::array<unsafe::Pointer, 2> {cstring(k), cstring(v)};
        asmcgocall(_cgo_setenv, unsafe::Pointer(& arg));
    }

    void unsetenv_c(std::string k)
    {
        if(_cgo_unsetenv == nullptr)
        {
            return;
        }
        auto arg = gocpp::array<unsafe::Pointer, 1> {cstring(k)};
        asmcgocall(_cgo_unsetenv, unsafe::Pointer(& arg));
    }

    unsafe::Pointer cstring(std::string s)
    {
        auto p = gocpp::make(gocpp::Tag<gocpp::slice<unsigned char>>(), len(s) + 1);
        copy(p, s);
        return unsafe::Pointer(& p[0]);
    }

}

