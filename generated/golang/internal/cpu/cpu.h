// generated by GoCpp from file '$(ImportDir)/internal/cpu/cpu.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/internal/cpu/cpu.fwd.h"
#include "gocpp/support.h"


namespace golang::cpu
{
    struct CacheLinePad
    {
        gocpp::array<unsigned char, CacheLinePadSize> _;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct CacheLinePad& value);
    extern uintptr_t CacheLineSize;
    void Initialize(std::string env);
    struct option
    {
        std::string Name;
        bool* Feature;
        bool Specified;
        bool Enable;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct option& value);
    void processOptions(std::string env);
    int indexByte(std::string s, unsigned char c);
}

