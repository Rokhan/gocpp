// generated by GoCpp from file '$(ImportDir)/os/types_windows.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/os/types_windows.fwd.h"
#include "gocpp/support.h"

#include "golang/internal/syscall/windows/syscall_windows.h"
#include "golang/io/fs/fs.h"
#include "golang/sync/mutex.h"
#include "golang/syscall/syscall_windows.h"
#include "golang/syscall/types_windows.h"
#include "golang/time/time.h"
#include "golang/time/zoneinfo.h"

namespace golang::os
{
    struct fileStat
    {
        std::string name;
        uint32_t FileAttributes;
        syscall::Filetime CreationTime;
        syscall::Filetime LastAccessTime;
        syscall::Filetime LastWriteTime;
        uint32_t FileSizeHigh;
        uint32_t FileSizeLow;
        uint32_t ReparseTag;
        uint32_t filetype;
        std::string path;
        uint32_t vol;
        uint32_t idxhi;
        uint32_t idxlo;
        bool appendNameToPath;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct fileStat& value);
    std::tuple<struct fileStat*, struct gocpp::error> newFileStatFromGetFileInformationByHandle(std::string path, syscall::Handle h);
    struct fileStat* newFileStatFromFileIDBothDirInfo(struct windows::FILE_ID_BOTH_DIR_INFO* d);
    struct fileStat* newFileStatFromFileFullDirInfo(struct windows::FILE_FULL_DIR_INFO* d);
    struct fileStat* newFileStatFromWin32finddata(struct syscall::Win32finddata* d);
    bool isReparseTagNameSurrogate(struct fileStat* fs);
    bool isSymlink(struct fileStat* fs);
    int64_t Size(struct fileStat* fs);
    FileMode Mode(struct fileStat* fs);
    struct mocklib::Date ModTime(struct fileStat* fs);
    go_any Sys(struct fileStat* fs);
    struct gocpp::error loadFileId(struct fileStat* fs);
    struct gocpp::error saveInfoFromPath(struct fileStat* fs, std::string path);
    bool sameFile(struct fileStat* fs1, struct fileStat* fs2);
    struct mocklib::Date atime(struct FileInfo fi);
}

