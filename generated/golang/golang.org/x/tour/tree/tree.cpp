// generated by GoCpp from file '$(ImportDir)/golang.org/x/tour/tree/tree.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "golang/golang.org/x/tour/tree/tree.h"
#include "gocpp/support.h"

#include "golang/fmt/print.h"
#include "golang/math/rand/rand.h"

namespace golang::tree
{
    namespace rec
    {
        using namespace mocklib::rec;
        using namespace fmt::rec;
        using namespace rand::rec;
    }

    
    template<typename T> requires gocpp::GoStruct<T>
    Tree::operator T()
    {
        T result;
        result.Left = this->Left;
        result.Value = this->Value;
        result.Right = this->Right;
        return result;
    }

    template<typename T> requires gocpp::GoStruct<T>
    bool Tree::operator==(const T& ref) const
    {
        if (Left != ref.Left) return false;
        if (Value != ref.Value) return false;
        if (Right != ref.Right) return false;
        return true;
    }

    std::ostream& Tree::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << "" << Left;
        os << " " << Value;
        os << " " << Right;
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct Tree& value)
    {
        return value.PrintTo(os);
    }

    struct Tree* New(int k)
    {
        Tree* t = {};
        for(auto [gocpp_ignored, v] : rand::Perm(10))
        {
            t = insert(t, (1 + v) * k);
        }
        return t;
    }

    struct Tree* insert(struct Tree* t, int v)
    {
        if(t == nullptr)
        {
            return new Tree {nullptr, v, nullptr};
        }
        if(v < t->Value)
        {
            t->Left = insert(t->Left, v);
        }
        else
        {
            t->Right = insert(t->Right, v);
        }
        return t;
    }

    std::string rec::String(struct Tree* t)
    {
        if(t == nullptr)
        {
            return "()";
        }
        auto s = "";
        if(t->Left != nullptr)
        {
            s += rec::String(gocpp::recv(t->Left)) + " ";
        }
        s += mocklib::Sprint(t->Value);
        if(t->Right != nullptr)
        {
            s += " " + rec::String(gocpp::recv(t->Right));
        }
        return "(" + s + ")";
    }

}

