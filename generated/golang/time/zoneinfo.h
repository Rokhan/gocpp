// generated by GoCpp from file '$(ImportDir)/time/zoneinfo.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/time/zoneinfo.fwd.h"
#include "gocpp/support.h"

#include "golang/sync/atomic/type.h"
#include "golang/sync/mutex.h"
#include "golang/sync/once.h"
#include "golang/time/time.h"

namespace golang::time
{
    struct zone
    {
        std::string name;
        int offset;
        bool isDST;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct zone& value);
    struct zoneTrans
    {
        int64_t when;
        uint8_t index;
        bool isstd;
        bool isutc;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct zoneTrans& value);
    extern sync::Once localOnce;
    extern sync::Once unnamedFixedZonesOnce;
    struct Location* FixedZone(std::string name, int offset);
    struct Location* fixedZone(std::string name, int offset);
    std::tuple<std::string, int, int64_t, int64_t, bool, bool> tzset(std::string s, int64_t lastTxSec, int64_t sec);
    std::tuple<std::string, std::string, bool> tzsetName(std::string s);
    std::tuple<int, std::string, bool> tzsetOffset(std::string s);
    struct rule
    {
        golang::time::ruleKind kind;
        int day;
        int week;
        int mon;
        int time;

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct rule& value);
    std::tuple<struct rule, std::string, bool> tzsetRule(std::string s);
    std::tuple<int, std::string, bool> tzsetNum(std::string s, int min, int max);
    int tzruleTime(int year, struct rule r, int off);
    extern gocpp::error errLocation;
    extern std::string* zoneinfo;
    extern sync::Once zoneinfoOnce;
    std::tuple<struct Location*, struct gocpp::error> LoadLocation(std::string name);
    bool containsDotDot(std::string s);
    struct Location
    {
        std::string name;
        gocpp::slice<zone> zone;
        gocpp::slice<zoneTrans> tx;
        std::string extend;
        int64_t cacheStart;
        int64_t cacheEnd;
        /* time::zone* cacheZone; [Known incomplete type] */

        using isGoStruct = void;

        template<typename T> requires gocpp::GoStruct<T>
        operator T();

        template<typename T> requires gocpp::GoStruct<T>
        bool operator==(const T& ref) const;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct Location& value);
    extern Location utcLoc;
    extern Location localLoc;
    extern gocpp::slice<Location*> unnamedFixedZones;
    extern Location* UTC;
    extern Location* Local;

    namespace rec
    {
        struct Location* get(struct Location* l);
        std::string String(struct Location* l);
        std::tuple<std::string, int, int64_t, int64_t, bool> lookup(struct Location* l, int64_t sec);
        int lookupFirstZone(struct Location* l);
        bool firstZoneUsed(struct Location* l);
        std::tuple<int, bool> lookupName(struct Location* l, std::string name, int64_t unix);
    }
}

