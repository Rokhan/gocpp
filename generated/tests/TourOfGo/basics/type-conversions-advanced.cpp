// generated by GoCpp from file 'tests/TourOfGo/basics/type-conversions-advanced.go'
#include <complex>
#include <functional>
#include <iostream>
#include <iomanip>
#include <map>
#include <string>
#include <tuple>
#include <vector>

#include "tests/TourOfGo/basics/type-conversions-advanced.h"
#include "gocpp/support.h"

// #include "golang/fmt/print.h"  [Ignored, known errors]
#include "golang/math/sqrt.h"

namespace golang::main
{
    void toto()
    {
    }

    
    template<typename T>
    III::III(T& ref)
    {
        value.reset(new IIIImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    III::III(const T& ref)
    {
        value.reset(new IIIImpl<T, std::unique_ptr<T>>(new T(ref)));
    }

    template<typename T>
    III::III(T* ptr)
    {
        value.reset(new IIIImpl<T, gocpp::ptr<T>>(ptr));
    }

    std::ostream& III::PrintTo(std::ostream& os) const
    {
        return os;
    }

    template<typename T, typename StoreT>
    void III::IIIImpl<T, StoreT>::vM()
    {
        return M(gocpp::PtrRecv<T, false>(value.get()));
    }

    void M(const gocpp::PtrRecv<III, false>& self)
    {
        return self.ptr->value->vM();
    }

    void M(const gocpp::ObjRecv<III>& self)
    {
        return self.obj.value->vM();
    }

    std::ostream& operator<<(std::ostream& os, const struct III& value)
    {
        return value.PrintTo(os);
    }

    
    std::ostream& T::PrintTo(std::ostream& os) const
    {
        os << '{';
        os << '}';
        return os;
    }

    std::ostream& operator<<(std::ostream& os, const struct T& value)
    {
        return value.PrintTo(os);
    }

    void M(T*)
    {
    }

    void main()
    {
        int x = 3;
        int y = 4;
        double f = std::sqrt(double(x * x + y * y));
        unsigned int z = (unsigned int)(f);
        mocklib::Println(x, y, z);
        go_any ifunc = (gocpp::Tag<std::function<void ()>>())(toto);
        mocklib::Println(ifunc);
    }

}

int main()
{
    try
    {
        std::cout << std::boolalpha << std::fixed << std::setprecision(5);
        golang::main::main();
        return 0;
    }
    catch(const gocpp::GoPanic& ex)
    {
        std::cout << "Panic: " << ex.what() << std::endl;
        return -1;
    }
}
