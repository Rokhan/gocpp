// generated by GoCpp from file '$(ImportDir)/runtime/debuglog.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/debuglog.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/cputicks.h"
#include "golang/runtime/debuglog_off.h"
#include "golang/runtime/internal/atomic/stubs.h"
#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/nih.h"
#include "golang/runtime/mem_windows.h"
#include "golang/runtime/mgc.h"
#include "golang/runtime/panic.h"
// #include "golang/runtime/print.h"  [Ignored, known errors]
#include "golang/runtime/runtime2.h"
#include "golang/runtime/slice.h"
#include "golang/runtime/string.h"
// #include "golang/runtime/stubs.h"  [Ignored, known errors]
// #include "golang/runtime/symtab.h"  [Ignored, known errors]
#include "golang/runtime/time_nofake.h"
// #include "golang/runtime/typekind.h"  [Ignored, known errors]
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    dlogger* dlog();
    struct dlogger
    {
        sys::NotInHeap _;
        /* debugLogWriter w; [Known incomplete type] */
        dlogger* allLink;
        /* atomic::Uint32 owned; [Known incomplete type] */

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct dlogger& value);
    void end(struct dlogger* l);
    dlogger* b(struct dlogger* l, bool x);
    dlogger* i(struct dlogger* l, int x);
    dlogger* i8(struct dlogger* l, int8_t x);
    dlogger* i16(struct dlogger* l, int16_t x);
    dlogger* i32(struct dlogger* l, int32_t x);
    dlogger* i64(struct dlogger* l, int64_t x);
    dlogger* u(struct dlogger* l, unsigned int x);
    dlogger* uptr(struct dlogger* l, uintptr_t x);
    dlogger* u8(struct dlogger* l, uint8_t x);
    dlogger* u16(struct dlogger* l, uint16_t x);
    dlogger* u32(struct dlogger* l, uint32_t x);
    dlogger* u64(struct dlogger* l, uint64_t x);
    dlogger* hex(struct dlogger* l, uint64_t x);
    dlogger* p(struct dlogger* l, go_any x);
    dlogger* s(struct dlogger* l, std::string x);
    dlogger* pc(struct dlogger* l, uintptr_t x);
    dlogger* traceback(struct dlogger* l, gocpp::slice<uintptr_t> x);
    struct debugLogWriter
    {
        sys::NotInHeap _;
        uint64_t write;
        /* debugLogBuf data; [Known incomplete type] */
        uint64_t tick;
        uint64_t nano;
        /* debugLogReader r; [Known incomplete type] */
        gocpp::array<unsigned char, 10> buf;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct debugLogWriter& value);
    struct debugLogBuf
    {
        sys::NotInHeap _;
        gocpp::array<unsigned char, debugLogBytes> b;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct debugLogBuf& value);
    void ensure(struct debugLogWriter* l, uint64_t n);
    bool writeFrameAt(struct debugLogWriter* l, uint64_t pos, uint64_t size);
    void writeSync(struct debugLogWriter* l, uint64_t tick, uint64_t nano);
    void writeUint64LE(struct debugLogWriter* l, uint64_t x);
    void byte(struct debugLogWriter* l, unsigned char x);
    void bytes(struct debugLogWriter* l, gocpp::slice<unsigned char> x);
    void varint(struct debugLogWriter* l, int64_t x);
    void uvarint(struct debugLogWriter* l, uint64_t u);
    struct debugLogReader
    {
        debugLogBuf* data;
        uint64_t begin;
        uint64_t end;
        uint64_t tick;
        uint64_t nano;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct debugLogReader& value);
    uint64_t skip(struct debugLogReader* r);
    uint16_t readUint16LEAt(struct debugLogReader* r, uint64_t pos);
    uint64_t readUint64LEAt(struct debugLogReader* r, uint64_t pos);
    uint64_t peek(struct debugLogReader* r);
    std::tuple<uint64_t, uint64_t, uint64_t, int> header(struct debugLogReader* r);
    uint64_t uvarint(struct debugLogReader* r);
    int64_t varint(struct debugLogReader* r);
    bool printVal(struct debugLogReader* r);
    void printDebugLog();
    void printDebugLogPC(uintptr_t pc, bool returnPC);
}

