// generated by GoCpp from file '$(ImportDir)/hash/crc32/crc32_amd64.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/hash/crc32/crc32_amd64.fwd.h"
#include "gocpp/support.h"

#include "golang/hash/crc32/crc32.h"
#include "golang/hash/crc32/crc32_generic.h"

namespace golang::crc32
{
    uint32_t castagnoliSSE42(uint32_t crc, gocpp::slice<unsigned char> p);
    std::tuple<uint32_t, uint32_t, uint32_t> castagnoliSSE42Triple(uint32_t crcA, uint32_t crcB, uint32_t crcC, gocpp::slice<unsigned char> a, gocpp::slice<unsigned char> b, gocpp::slice<unsigned char> c, uint32_t rounds);
    uint32_t ieeeCLMUL(uint32_t crc, gocpp::slice<unsigned char> p);
    bool archAvailableCastagnoli();
    void archInitCastagnoli();
    uint32_t castagnoliShift(sse42Table* table, uint32_t crc);
    uint32_t archUpdateCastagnoli(uint32_t crc, gocpp::slice<unsigned char> p);
    bool archAvailableIEEE();
    void archInitIEEE();
    uint32_t archUpdateIEEE(uint32_t crc, gocpp::slice<unsigned char> p);

    namespace rec
    {
    }
}

