// generated by GoCpp from file '$(ImportDir)/runtime/histogram.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/runtime/histogram.fwd.h"
#include "gocpp/support.h"

#include "golang/runtime/internal/atomic/types.h"
#include "golang/runtime/internal/sys/intrinsics.h"
#include "golang/runtime/metrics.h"
#include "golang/unsafe/unsafe.h"

namespace golang::runtime
{
    struct timeHistogram
    {
        gocpp::array<atomic::Uint64, timeHistNumBuckets * timeHistNumSubBuckets> counts;
        atomic::Uint64 underflow;
        atomic::Uint64 overflow;

        using isGoStruct = void;

        std::ostream& PrintTo(std::ostream& os) const;
    };

    std::ostream& operator<<(std::ostream& os, const struct timeHistogram& value);
    void record(struct timeHistogram* h, int64_t duration);
    void write(struct timeHistogram* h, metricValue* out);
    double float64Inf();
    double float64NegInf();
    gocpp::slice<double> timeHistogramMetricsBuckets();
}

