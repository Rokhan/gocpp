// generated by GoCpp from file '$(ImportDir)/slices/sort.go'
#pragma once

#include <functional>
#include <string>
#include <tuple>
#include <vector>

#include "golang/slices/sort.fwd.h"
#include "gocpp/support.h"

#include "golang/cmp/cmp.h"
#include "golang/math/bits/bits.h"
#include "golang/slices/zsortanyfunc.h"
#include "golang/slices/zsortordered.h"

namespace golang::slices
{
    void Sort(S x);
    void SortFunc(S x, std::function<int (E a, E b)> cmp);
    void SortStableFunc(S x, std::function<int (E a, E b)> cmp);
    bool IsSorted(S x);
    bool IsSortedFunc(S x, std::function<int (E a, E b)> cmp);
    E Min(S x);
    E MinFunc(S x, std::function<int (E a, E b)> cmp);
    E Max(S x);
    E MaxFunc(S x, std::function<int (E a, E b)> cmp);
    std::tuple<int, bool> BinarySearch(S x, E target);
    std::tuple<int, bool> BinarySearchFunc(S x, T target, std::function<int (E, T)> cmp);
    using sortedHint = int;
    extern slices.sortedHint increasingHint;
    extern slices.sortedHint decreasingHint;
    using xorshift = uint64_t;
    uint64_t Next(xorshift* r);
    unsigned int nextPowerOfTwo(int length);
    bool isNaN(T x);
}

